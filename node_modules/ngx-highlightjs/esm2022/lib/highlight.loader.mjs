import { Injectable, Inject, PLATFORM_ID, Optional } from '@angular/core';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { BehaviorSubject, EMPTY, from, zip, throwError, catchError, tap, map, switchMap, filter, take } from 'rxjs';
import { HIGHLIGHT_OPTIONS } from './highlight.model';
import * as i0 from "@angular/core";
// @dynamic
class HighlightLoader {
    constructor(doc, platformId, _options) {
        this.doc = doc;
        this.platformId = platformId;
        this._options = _options;
        // Stream that emits when hljs library is loaded and ready to use
        this._ready = new BehaviorSubject(null);
        this.ready = this._ready.asObservable().pipe(filter((hljs) => !!hljs), take(1));
        if (isPlatformBrowser(platformId)) {
            // Check if hljs is already available
            if (doc.defaultView.hljs) {
                this._ready.next(doc.defaultView.hljs);
            }
            else {
                // Load hljs library
                this._loadLibrary().pipe(switchMap((hljs) => {
                    if (this._options && this._options.lineNumbersLoader) {
                        // Make hljs available on window object (required for the line numbers library)
                        doc.defaultView.hljs = hljs;
                        // Load line numbers library
                        return this.loadLineNumbers().pipe(tap((plugin) => {
                            plugin.activateLineNumbers();
                            this._ready.next(hljs);
                        }));
                    }
                    else {
                        this._ready.next(hljs);
                        return EMPTY;
                    }
                }), catchError((e) => {
                    console.error('[HLJS] ', e);
                    return EMPTY;
                })).subscribe();
                // Load highlighting theme
                if (this._options?.themePath) {
                    this.loadTheme(this._options.themePath);
                }
            }
        }
    }
    /**
     * Lazy-Load highlight.js library
     */
    _loadLibrary() {
        if (this._options) {
            if (this._options.fullLibraryLoader && this._options.coreLibraryLoader) {
                return throwError(() => 'The full library and the core library were imported, only one of them should be imported!');
            }
            if (this._options.fullLibraryLoader && this._options.languages) {
                return throwError(() => 'The highlighting languages were imported they are not needed!');
            }
            if (this._options.coreLibraryLoader && !this._options.languages) {
                return throwError(() => 'The highlighting languages were not imported!');
            }
            if (!this._options.coreLibraryLoader && this._options.languages) {
                return throwError(() => 'The core library was not imported!');
            }
            if (this._options.fullLibraryLoader) {
                return this.loadFullLibrary();
            }
            if (this._options.coreLibraryLoader && this._options.languages && Object.keys(this._options.languages).length) {
                return this.loadCoreLibrary().pipe(switchMap((hljs) => this._loadLanguages(hljs)));
            }
        }
        return throwError(() => 'Highlight.js library was not imported!');
    }
    /**
     * Lazy-load highlight.js languages
     */
    _loadLanguages(hljs) {
        const languages = Object.entries(this._options.languages).map(([langName, langLoader]) => importModule(langLoader()).pipe(tap((langFunc) => hljs.registerLanguage(langName, langFunc))));
        return zip(...languages).pipe(map(() => hljs));
    }
    /**
     * Import highlight.js core library
     */
    loadCoreLibrary() {
        return importModule(this._options.coreLibraryLoader());
    }
    /**
     * Import highlight.js library with all languages
     */
    loadFullLibrary() {
        return importModule(this._options.fullLibraryLoader());
    }
    /**
     * Import line numbers library
     */
    loadLineNumbers() {
        return from(this._options.lineNumbersLoader());
    }
    /**
     * Reload theme styles
     */
    setTheme(path) {
        if (isPlatformBrowser(this.platformId)) {
            if (this._themeLinkElement) {
                this._themeLinkElement.href = path;
            }
            else {
                this.loadTheme(path);
            }
        }
    }
    /**
     * Load theme
     */
    loadTheme(path) {
        this._themeLinkElement = this.doc.createElement('link');
        this._themeLinkElement.href = path;
        this._themeLinkElement.type = 'text/css';
        this._themeLinkElement.rel = 'stylesheet';
        this._themeLinkElement.media = 'screen,print';
        this.doc.head.appendChild(this._themeLinkElement);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: HighlightLoader, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: HIGHLIGHT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: HighlightLoader, providedIn: 'root' }); }
}
export { HighlightLoader };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: HighlightLoader, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [HIGHLIGHT_OPTIONS]
                }] }]; } });
/**
 * Map loader response to module object
 */
const importModule = (moduleLoader) => {
    return from(moduleLoader).pipe(filter((module) => !!module?.default), map((module) => module.default));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LmxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1oaWdobGlnaHRqcy9zcmMvbGliL2hpZ2hsaWdodC5sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBYyxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEksT0FBTyxFQUFFLGlCQUFpQixFQUFzQyxNQUFNLG1CQUFtQixDQUFDOztBQUUxRixXQUFXO0FBQ1gsTUFHYSxlQUFlO0lBVTFCLFlBQXNDLEdBQVEsRUFDTCxVQUFrQixFQUNBLFFBQTBCO1FBRi9DLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFDTCxlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ0EsYUFBUSxHQUFSLFFBQVEsQ0FBa0I7UUFYckYsaUVBQWlFO1FBQ2hELFdBQU0sR0FBc0MsSUFBSSxlQUFlLENBQW1CLElBQUksQ0FBQyxDQUFDO1FBQ2hHLFVBQUssR0FBaUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQzVFLE1BQU0sQ0FBQyxDQUFDLElBQTZCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFDakQsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSLENBQUM7UUFPQSxJQUFJLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2pDLHFDQUFxQztZQUNyQyxJQUFJLEdBQUcsQ0FB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QUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFDMUMsR0FBRyxDQUFDLENBQUMsTUFBVyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQ3JDLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIFBMQVRGT1JNX0lELCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCwgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIEVNUFRZLCBmcm9tLCB6aXAsIHRocm93RXJyb3IsIGNhdGNoRXJyb3IsIHRhcCwgbWFwLCBzd2l0Y2hNYXAsIGZpbHRlciwgdGFrZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBISUdITElHSFRfT1BUSU9OUywgSGlnaGxpZ2h0TGlicmFyeSwgSGlnaGxpZ2h0T3B0aW9ucyB9IGZyb20gJy4vaGlnaGxpZ2h0Lm1vZGVsJztcclxuXHJcbi8vIEBkeW5hbWljXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodExvYWRlciB7XHJcbiAgLy8gU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBobGpzIGxpYnJhcnkgaXMgbG9hZGVkIGFuZCByZWFkeSB0byB1c2VcclxuICBwcml2YXRlIHJlYWRvbmx5IF9yZWFkeTogQmVoYXZpb3JTdWJqZWN0PEhpZ2hsaWdodExpYnJhcnk+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxIaWdobGlnaHRMaWJyYXJ5PihudWxsKTtcclxuICByZWFkb25seSByZWFkeTogT2JzZXJ2YWJsZTxIaWdobGlnaHRMaWJyYXJ5PiA9IHRoaXMuX3JlYWR5LmFzT2JzZXJ2YWJsZSgpLnBpcGUoXHJcbiAgICBmaWx0ZXIoKGhsanM6IEhpZ2hsaWdodExpYnJhcnkgfCBudWxsKSA9PiAhIWhsanMpLFxyXG4gICAgdGFrZSgxKVxyXG4gICk7XHJcblxyXG4gIHByaXZhdGUgX3RoZW1lTGlua0VsZW1lbnQ6IEhUTUxMaW5rRWxlbWVudDtcclxuXHJcbiAgY29uc3RydWN0b3IoQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2M6IGFueSxcclxuICAgICAgICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IG9iamVjdCxcclxuICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KEhJR0hMSUdIVF9PUFRJT05TKSBwcml2YXRlIF9vcHRpb25zOiBIaWdobGlnaHRPcHRpb25zKSB7XHJcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm1JZCkpIHtcclxuICAgICAgLy8gQ2hlY2sgaWYgaGxqcyBpcyBhbHJlYWR5IGF2YWlsYWJsZVxyXG4gICAgICBpZiAoZG9jLmRlZmF1bHRWaWV3LmhsanMpIHtcclxuICAgICAgICB0aGlzLl9yZWFkeS5uZXh0KGRvYy5kZWZhdWx0Vmlldy5obGpzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBMb2FkIGhsanMgbGlicmFyeVxyXG4gICAgICAgIHRoaXMuX2xvYWRMaWJyYXJ5KCkucGlwZShcclxuICAgICAgICAgIHN3aXRjaE1hcCgoaGxqczogSGlnaGxpZ2h0TGlicmFyeSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fb3B0aW9ucyAmJiB0aGlzLl9vcHRpb25zLmxpbmVOdW1iZXJzTG9hZGVyKSB7XHJcbiAgICAgICAgICAgICAgLy8gTWFrZSBobGpzIGF2YWlsYWJsZSBvbiB3aW5kb3cgb2JqZWN0IChyZXF1aXJlZCBmb3IgdGhlIGxpbmUgbnVtYmVycyBsaWJyYXJ5KVxyXG4gICAgICAgICAgICAgIGRvYy5kZWZhdWx0Vmlldy5obGpzID0gaGxqcztcclxuICAgICAgICAgICAgICAvLyBMb2FkIGxpbmUgbnVtYmVycyBsaWJyYXJ5XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9hZExpbmVOdW1iZXJzKCkucGlwZShcclxuICAgICAgICAgICAgICAgIHRhcCgocGx1Z2luOiB7IGFjdGl2YXRlTGluZU51bWJlcnM6ICgpID0+IHZvaWQgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBwbHVnaW4uYWN0aXZhdGVMaW5lTnVtYmVycygpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkeS5uZXh0KGhsanMpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHRoaXMuX3JlYWR5Lm5leHQoaGxqcyk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KSxcclxuICAgICAgICAgIGNhdGNoRXJyb3IoKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbSExKU10gJywgZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKS5zdWJzY3JpYmUoKTtcclxuXHJcbiAgICAgICAgLy8gTG9hZCBoaWdobGlnaHRpbmcgdGhlbWVcclxuICAgICAgICBpZiAodGhpcy5fb3B0aW9ucz8udGhlbWVQYXRoKSB7XHJcbiAgICAgICAgICB0aGlzLmxvYWRUaGVtZSh0aGlzLl9vcHRpb25zLnRoZW1lUGF0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMYXp5LUxvYWQgaGlnaGxpZ2h0LmpzIGxpYnJhcnlcclxuICAgKi9cclxuICBwcml2YXRlIF9sb2FkTGlicmFyeSgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKHRoaXMuX29wdGlvbnMpIHtcclxuICAgICAgaWYgKHRoaXMuX29wdGlvbnMuZnVsbExpYnJhcnlMb2FkZXIgJiYgdGhpcy5fb3B0aW9ucy5jb3JlTGlicmFyeUxvYWRlcikge1xyXG4gICAgICAgIHJldHVybiB0aHJvd0Vycm9yKCgpID0+ICdUaGUgZnVsbCBsaWJyYXJ5IGFuZCB0aGUgY29yZSBsaWJyYXJ5IHdlcmUgaW1wb3J0ZWQsIG9ubHkgb25lIG9mIHRoZW0gc2hvdWxkIGJlIGltcG9ydGVkIScpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLl9vcHRpb25zLmZ1bGxMaWJyYXJ5TG9hZGVyICYmIHRoaXMuX29wdGlvbnMubGFuZ3VhZ2VzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoKCkgPT4gJ1RoZSBoaWdobGlnaHRpbmcgbGFuZ3VhZ2VzIHdlcmUgaW1wb3J0ZWQgdGhleSBhcmUgbm90IG5lZWRlZCEnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5fb3B0aW9ucy5jb3JlTGlicmFyeUxvYWRlciAmJiAhdGhpcy5fb3B0aW9ucy5sYW5ndWFnZXMpIHtcclxuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcigoKSA9PiAnVGhlIGhpZ2hsaWdodGluZyBsYW5ndWFnZXMgd2VyZSBub3QgaW1wb3J0ZWQhJyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCF0aGlzLl9vcHRpb25zLmNvcmVMaWJyYXJ5TG9hZGVyICYmIHRoaXMuX29wdGlvbnMubGFuZ3VhZ2VzKSB7XHJcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoKCkgPT4gJ1RoZSBjb3JlIGxpYnJhcnkgd2FzIG5vdCBpbXBvcnRlZCEnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5fb3B0aW9ucy5mdWxsTGlicmFyeUxvYWRlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRGdWxsTGlicmFyeSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLl9vcHRpb25zLmNvcmVMaWJyYXJ5TG9hZGVyICYmIHRoaXMuX29wdGlvbnMubGFuZ3VhZ2VzICYmIE9iamVjdC5rZXlzKHRoaXMuX29wdGlvbnMubGFuZ3VhZ2VzKS5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sb2FkQ29yZUxpYnJhcnkoKS5waXBlKHN3aXRjaE1hcCgoaGxqczogSGlnaGxpZ2h0TGlicmFyeSkgPT4gdGhpcy5fbG9hZExhbmd1YWdlcyhobGpzKSkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhyb3dFcnJvcigoKSA9PiAnSGlnaGxpZ2h0LmpzIGxpYnJhcnkgd2FzIG5vdCBpbXBvcnRlZCEnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExhenktbG9hZCBoaWdobGlnaHQuanMgbGFuZ3VhZ2VzXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBfbG9hZExhbmd1YWdlcyhobGpzOiBIaWdobGlnaHRMaWJyYXJ5KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IGxhbmd1YWdlcyA9IE9iamVjdC5lbnRyaWVzKHRoaXMuX29wdGlvbnMubGFuZ3VhZ2VzKS5tYXAoKFtsYW5nTmFtZSwgbGFuZ0xvYWRlcl06IFtzdHJpbmcsICgpID0+IFByb21pc2U8YW55Pl0pID0+XHJcbiAgICAgIGltcG9ydE1vZHVsZShsYW5nTG9hZGVyKCkpLnBpcGUoXHJcbiAgICAgICAgdGFwKChsYW5nRnVuYzogYW55KSA9PiBobGpzLnJlZ2lzdGVyTGFuZ3VhZ2UobGFuZ05hbWUsIGxhbmdGdW5jKSlcclxuICAgICAgKVxyXG4gICAgKTtcclxuICAgIHJldHVybiB6aXAoLi4ubGFuZ3VhZ2VzKS5waXBlKG1hcCgoKSA9PiBobGpzKSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogSW1wb3J0IGhpZ2hsaWdodC5qcyBjb3JlIGxpYnJhcnlcclxuICAgKi9cclxuICBwcml2YXRlIGxvYWRDb3JlTGlicmFyeSgpOiBPYnNlcnZhYmxlPEhpZ2hsaWdodExpYnJhcnk+IHtcclxuICAgIHJldHVybiBpbXBvcnRNb2R1bGUodGhpcy5fb3B0aW9ucy5jb3JlTGlicmFyeUxvYWRlciEoKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbXBvcnQgaGlnaGxpZ2h0LmpzIGxpYnJhcnkgd2l0aCBhbGwgbGFuZ3VhZ2VzXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBsb2FkRnVsbExpYnJhcnkoKTogT2JzZXJ2YWJsZTxIaWdobGlnaHRMaWJyYXJ5PiB7XHJcbiAgICByZXR1cm4gaW1wb3J0TW9kdWxlKHRoaXMuX29wdGlvbnMuZnVsbExpYnJhcnlMb2FkZXIhKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW1wb3J0IGxpbmUgbnVtYmVycyBsaWJyYXJ5XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBsb2FkTGluZU51bWJlcnMoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiBmcm9tKHRoaXMuX29wdGlvbnMubGluZU51bWJlcnNMb2FkZXIhKCkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVsb2FkIHRoZW1lIHN0eWxlc1xyXG4gICAqL1xyXG4gIHNldFRoZW1lKHBhdGg6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcclxuICAgICAgaWYgKHRoaXMuX3RoZW1lTGlua0VsZW1lbnQpIHtcclxuICAgICAgICB0aGlzLl90aGVtZUxpbmtFbGVtZW50LmhyZWYgPSBwYXRoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMubG9hZFRoZW1lKHBhdGgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2FkIHRoZW1lXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBsb2FkVGhlbWUocGF0aDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLl90aGVtZUxpbmtFbGVtZW50ID0gdGhpcy5kb2MuY3JlYXRlRWxlbWVudCgnbGluaycpO1xyXG4gICAgdGhpcy5fdGhlbWVMaW5rRWxlbWVudC5ocmVmID0gcGF0aDtcclxuICAgIHRoaXMuX3RoZW1lTGlua0VsZW1lbnQudHlwZSA9ICd0ZXh0L2Nzcyc7XHJcbiAgICB0aGlzLl90aGVtZUxpbmtFbGVtZW50LnJlbCA9ICdzdHlsZXNoZWV0JztcclxuICAgIHRoaXMuX3RoZW1lTGlua0VsZW1lbnQubWVkaWEgPSAnc2NyZWVuLHByaW50JztcclxuICAgIHRoaXMuZG9jLmhlYWQuYXBwZW5kQ2hpbGQodGhpcy5fdGhlbWVMaW5rRWxlbWVudCk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogTWFwIGxvYWRlciByZXNwb25zZSB0byBtb2R1bGUgb2JqZWN0XHJcbiAqL1xyXG5jb25zdCBpbXBvcnRNb2R1bGUgPSAobW9kdWxlTG9hZGVyOiBQcm9taXNlPGFueT4pOiBPYnNlcnZhYmxlPGFueT4gPT4ge1xyXG4gIHJldHVybiBmcm9tKG1vZHVsZUxvYWRlcikucGlwZShcclxuICAgIGZpbHRlcigobW9kdWxlOiBhbnkpID0+ICEhbW9kdWxlPy5kZWZhdWx0KSxcclxuICAgIG1hcCgobW9kdWxlOiBhbnkpID0+IG1vZHVsZS5kZWZhdWx0KVxyXG4gICk7XHJcbn07XHJcbiJdfQ==
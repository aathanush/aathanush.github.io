import { Inject, Injectable, Optional } from '@angular/core';
import { HttpParams } from '@angular/common/http';
import { EMPTY, catchError, shareReplay } from 'rxjs';
import { GIST_OPTIONS } from './gist.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
class CodeLoader {
    constructor(_http, _options) {
        this._http = _http;
        this._options = _options;
    }
    /**
     * Get plus code
     * @param id Gist ID
     */
    getCodeFromGist(id) {
        let params;
        if (this.isOAuthProvided()) {
            params = new HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);
        }
        return this.fetchFile(`https://api.github.com/gists/${id}`, { params, responseType: 'json' });
    }
    /**
     * Get code by URL
     * @param url File raw link
     */
    getCodeFromUrl(url) {
        return this.fetchFile(url, { responseType: 'text' });
    }
    /**
     * Check if OAuth option is provided
     */
    isOAuthProvided() {
        return !!this._options && !!this._options.clientId && !!this._options.clientSecret;
    }
    fetchFile(url, options) {
        // Check if URL is valid
        if (isUrl(url)) {
            return this._http.get(url, options).pipe(
            // Catch response
            shareReplay(1), catchError((err) => {
                console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);
                return EMPTY;
            }));
        }
        return EMPTY;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: CodeLoader, deps: [{ token: i1.HttpClient }, { token: GIST_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: CodeLoader, providedIn: 'root' }); }
}
export { CodeLoader };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: CodeLoader, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [GIST_OPTIONS]
                }] }]; } });
function isUrl(url) {
    const regExp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
    return regExp.test(url);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1sb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtaGlnaGxpZ2h0anMvcGx1cy9zcmMvY29kZS1sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM5RCxPQUFPLEVBQWMsS0FBSyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDbEUsT0FBTyxFQUFRLFlBQVksRUFBZSxNQUFNLGNBQWMsQ0FBQzs7O0FBRS9ELE1BR2EsVUFBVTtJQUNyQixZQUFvQixLQUFpQixFQUE0QyxRQUFxQjtRQUFsRixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBQTRDLGFBQVEsR0FBUixRQUFRLENBQWE7SUFDdEcsQ0FBQztJQUVEOzs7T0FHRztJQUNILGVBQWUsQ0FBQyxFQUFVO1FBQ3hCLElBQUksTUFBbUIsQ0FBQztRQUN4QixJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUMxQixNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ3JIO1FBQ0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLGdDQUFpQyxFQUFHLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNsRyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsY0FBYyxDQUFDLEdBQVc7UUFDeEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7T0FFRztJQUNLLGVBQWU7UUFDckIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDO0lBQ3JGLENBQUM7SUFFTyxTQUFTLENBQUMsR0FBVyxFQUFFLE9BQVk7UUFDekMsd0JBQXdCO1FBQ3hCLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSTtZQUN0QyxpQkFBaUI7WUFDakIsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUNkLFVBQVUsQ0FBQyxDQUFDLEdBQVUsRUFBRSxFQUFFO2dCQUN4QixPQUFPLENBQUMsS0FBSyxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDdkUsT0FBTyxLQUFLLENBQUM7WUFDZixDQUFDLENBQUMsQ0FDSCxDQUFDO1NBQ0g7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OEdBNUNVLFVBQVUsNENBQ3NDLFlBQVk7a0hBRDVELFVBQVUsY0FGVCxNQUFNOztTQUVQLFVBQVU7MkZBQVYsVUFBVTtrQkFIdEIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7OzBCQUV5QyxRQUFROzswQkFBSSxNQUFNOzJCQUFDLFlBQVk7O0FBK0N6RSxTQUFTLEtBQUssQ0FBQyxHQUFXO0lBQ3hCLE1BQU0sTUFBTSxHQUFHLG1GQUFtRixDQUFDO0lBQ25HLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBFTVBUWSwgY2F0Y2hFcnJvciwgc2hhcmVSZXBsYXkgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgR2lzdCwgR0lTVF9PUFRJT05TLCBHaXN0T3B0aW9ucyB9IGZyb20gJy4vZ2lzdC5tb2RlbCc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb2RlTG9hZGVyIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9odHRwOiBIdHRwQ2xpZW50LCBAT3B0aW9uYWwoKSBASW5qZWN0KEdJU1RfT1BUSU9OUykgcHJpdmF0ZSBfb3B0aW9uczogR2lzdE9wdGlvbnMpIHtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBwbHVzIGNvZGVcclxuICAgKiBAcGFyYW0gaWQgR2lzdCBJRFxyXG4gICAqL1xyXG4gIGdldENvZGVGcm9tR2lzdChpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxHaXN0PiB7XHJcbiAgICBsZXQgcGFyYW1zITogSHR0cFBhcmFtcztcclxuICAgIGlmICh0aGlzLmlzT0F1dGhQcm92aWRlZCgpKSB7XHJcbiAgICAgIHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCkuc2V0KCdjbGllbnRfaWQnLCB0aGlzLl9vcHRpb25zLmNsaWVudElkKS5zZXQoJ2NsaWVudF9zZWNyZXQnLCB0aGlzLl9vcHRpb25zLmNsaWVudFNlY3JldCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5mZXRjaEZpbGUoYGh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vZ2lzdHMvJHsgaWQgfWAsIHsgcGFyYW1zLCByZXNwb25zZVR5cGU6ICdqc29uJyB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBjb2RlIGJ5IFVSTFxyXG4gICAqIEBwYXJhbSB1cmwgRmlsZSByYXcgbGlua1xyXG4gICAqL1xyXG4gIGdldENvZGVGcm9tVXJsKHVybDogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLmZldGNoRmlsZSh1cmwsIHsgcmVzcG9uc2VUeXBlOiAndGV4dCcgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiBPQXV0aCBvcHRpb24gaXMgcHJvdmlkZWRcclxuICAgKi9cclxuICBwcml2YXRlIGlzT0F1dGhQcm92aWRlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIXRoaXMuX29wdGlvbnMgJiYgISF0aGlzLl9vcHRpb25zLmNsaWVudElkICYmICEhdGhpcy5fb3B0aW9ucy5jbGllbnRTZWNyZXQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZldGNoRmlsZSh1cmw6IHN0cmluZywgb3B0aW9uczogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIC8vIENoZWNrIGlmIFVSTCBpcyB2YWxpZFxyXG4gICAgaWYgKGlzVXJsKHVybCkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2h0dHAuZ2V0KHVybCwgb3B0aW9ucykucGlwZShcclxuICAgICAgICAvLyBDYXRjaCByZXNwb25zZVxyXG4gICAgICAgIHNoYXJlUmVwbGF5KDEpLFxyXG4gICAgICAgIGNhdGNoRXJyb3IoKGVycjogRXJyb3IpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tOZ3hIaWdobGlnaHRdOiBVbmFibGUgdG8gZmV0Y2ggdGhlIFVSTCEnLCBlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBFTVBUWTtcclxuICB9XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiBpc1VybCh1cmw6IHN0cmluZykge1xyXG4gIGNvbnN0IHJlZ0V4cCA9IC8oZnRwfGh0dHB8aHR0cHMpOlxcL1xcLyhcXHcrOnswLDF9XFx3KkApPyhcXFMrKSg6WzAtOV0rKT8oXFwvfFxcLyhbXFx3IyE6Lj8rPSYlQCFcXC1cXC9dKSk/LztcclxuICByZXR1cm4gcmVnRXhwLnRlc3QodXJsKTtcclxufVxyXG4iXX0=
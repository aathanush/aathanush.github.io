import { coerceElement } from '@angular/cdk/coercion';
import { isPlatformBrowser } from '@angular/common';
import { DestroyRef, effect, inject, INJECTOR, isSignal, PLATFORM_ID, signal, } from '@angular/core';
import { WA_WINDOW } from '@ng-web-apis/common';
import { TUI_ALLOW_SIGNAL_WRITES } from '@taiga-ui/cdk/constants';
export function tuiValue(input, injector = inject(INJECTOR)) {
    const win = injector.get(WA_WINDOW);
    if (!win.tuiInputPatched && isPlatformBrowser(injector.get(PLATFORM_ID))) {
        win.tuiInputPatched = true;
        patch(win.HTMLInputElement.prototype);
        patch(win.HTMLTextAreaElement.prototype);
        patch(win.HTMLSelectElement.prototype);
    }
    let element = isSignal(input) ? undefined : coerceElement(input);
    let cleanup = () => { };
    const options = { injector, ...TUI_ALLOW_SIGNAL_WRITES };
    const value = signal(element?.value || '');
    const process = (el) => {
        const update = () => value.set(el.value);
        el.addEventListener('input', update);
        el.addEventListener('tui-input', update);
        return () => {
            el.removeEventListener('input', update);
            el.removeEventListener('tui-input', update);
        };
    };
    injector.get(DestroyRef).onDestroy(() => cleanup());
    if (isSignal(input)) {
        effect(() => {
            element = coerceElement(input());
            cleanup();
            if (element) {
                value.set(element.value);
                cleanup = process(element);
            }
        }, options);
    }
    else if (element) {
        cleanup = process(element);
    }
    effect(() => {
        const v = value();
        if (element?.matches(':focus') && 'selectionStart' in element) {
            const { selectionStart, selectionEnd } = element;
            /**
             * After programmatic updates of input's value, caret is automatically placed at the end â€“
             * revert to the previous position
             */
            element.value = v;
            element.setSelectionRange(selectionStart, selectionEnd);
        }
        else if (element) {
            element.value = v;
        }
    }, options);
    return value;
}
function patch(prototype) {
    const { set } = Object.getOwnPropertyDescriptor(prototype, 'value');
    Object.defineProperty(prototype, 'value', {
        set(detail) {
            const value = this.value;
            const event = new CustomEvent('tui-input', { detail, bubbles: true });
            set.call(this, detail);
            if (value !== detail) {
                this.dispatchEvent(event);
            }
        },
    });
}
//# sourceMappingURL=data:application/json;base64,
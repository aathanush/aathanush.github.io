import { Directive, inject, Renderer2 } from '@angular/core';
import { provideMutationObserverInit, WaMutationObserver, } from '@ng-web-apis/mutation-observer';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { TUI_ENTER, TUI_LEAVE, TuiAnimated } from './animated.directive';
import * as i0 from "@angular/core";
import * as i1 from "./animated.directive";
import * as i2 from "@ng-web-apis/mutation-observer";
class TuiAnimatedParent {
    constructor() {
        this.el = tuiInjectElement();
        this.renderer = inject(Renderer2);
    }
    handle() {
        this.el.classList.remove(TUI_ENTER);
        this.renderer.data[TUI_LEAVE] = Array.from(this.el.children);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiAnimatedParent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiAnimatedParent, isStandalone: true, selector: "[tuiAnimatedParent]", host: { listeners: { "waMutationObserver": "handle()" } }, providers: [provideMutationObserverInit({ childList: true })], hostDirectives: [{ directive: i1.TuiAnimated }, { directive: i2.WaMutationObserver, outputs: ["waMutationObserver", "waMutationObserver"] }], ngImport: i0 }); }
}
export { TuiAnimatedParent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiAnimatedParent, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiAnimatedParent]',
                    providers: [provideMutationObserverInit({ childList: true })],
                    hostDirectives: [
                        TuiAnimated,
                        {
                            directive: WaMutationObserver,
                            outputs: ['waMutationObserver'],
                        },
                    ],
                    host: {
                        '(waMutationObserver)': 'handle()',
                    },
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0ZWQtcGFyZW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkay9kaXJlY3RpdmVzL2FuaW1hdGVkL2FuaW1hdGVkLXBhcmVudC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFDSCwyQkFBMkIsRUFDM0Isa0JBQWtCLEdBQ3JCLE1BQU0sZ0NBQWdDLENBQUM7QUFDeEMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFFekQsT0FBTyxFQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFDLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFFdkUsTUFlYSxpQkFBaUI7SUFmOUI7UUFnQnFCLE9BQUUsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hCLGFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7S0FNakQ7SUFKYSxNQUFNO1FBQ1osSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqRSxDQUFDOytHQVBRLGlCQUFpQjttR0FBakIsaUJBQWlCLDZIQVpmLENBQUMsMkJBQTJCLENBQUMsRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQzs7U0FZbEQsaUJBQWlCOzRGQUFqQixpQkFBaUI7a0JBZjdCLFNBQVM7bUJBQUM7b0JBQ1AsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFNBQVMsRUFBRSxDQUFDLDJCQUEyQixDQUFDLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7b0JBQzNELGNBQWMsRUFBRTt3QkFDWixXQUFXO3dCQUNYOzRCQUNJLFNBQVMsRUFBRSxrQkFBa0I7NEJBQzdCLE9BQU8sRUFBRSxDQUFDLG9CQUFvQixDQUFDO3lCQUNsQztxQkFDSjtvQkFDRCxJQUFJLEVBQUU7d0JBQ0Ysc0JBQXNCLEVBQUUsVUFBVTtxQkFDckM7aUJBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgaW5qZWN0LCBSZW5kZXJlcjJ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBwcm92aWRlTXV0YXRpb25PYnNlcnZlckluaXQsXG4gICAgV2FNdXRhdGlvbk9ic2VydmVyLFxufSBmcm9tICdAbmctd2ViLWFwaXMvbXV0YXRpb24tb2JzZXJ2ZXInO1xuaW1wb3J0IHt0dWlJbmplY3RFbGVtZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2RvbSc7XG5cbmltcG9ydCB7VFVJX0VOVEVSLCBUVUlfTEVBVkUsIFR1aUFuaW1hdGVkfSBmcm9tICcuL2FuaW1hdGVkLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgc2VsZWN0b3I6ICdbdHVpQW5pbWF0ZWRQYXJlbnRdJyxcbiAgICBwcm92aWRlcnM6IFtwcm92aWRlTXV0YXRpb25PYnNlcnZlckluaXQoe2NoaWxkTGlzdDogdHJ1ZX0pXSxcbiAgICBob3N0RGlyZWN0aXZlczogW1xuICAgICAgICBUdWlBbmltYXRlZCxcbiAgICAgICAge1xuICAgICAgICAgICAgZGlyZWN0aXZlOiBXYU11dGF0aW9uT2JzZXJ2ZXIsXG4gICAgICAgICAgICBvdXRwdXRzOiBbJ3dhTXV0YXRpb25PYnNlcnZlciddLFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgaG9zdDoge1xuICAgICAgICAnKHdhTXV0YXRpb25PYnNlcnZlciknOiAnaGFuZGxlKCknLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUFuaW1hdGVkUGFyZW50IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVsID0gdHVpSW5qZWN0RWxlbWVudCgpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXIgPSBpbmplY3QoUmVuZGVyZXIyKTtcblxuICAgIHByb3RlY3RlZCBoYW5kbGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZShUVUlfRU5URVIpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmRhdGFbVFVJX0xFQVZFXSA9IEFycmF5LmZyb20odGhpcy5lbC5jaGlsZHJlbik7XG4gICAgfVxufVxuIl19
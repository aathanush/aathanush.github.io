import { isPlatformBrowser } from '@angular/common';
import * as i0 from '@angular/core';
import { inject, DestroyRef, PLATFORM_ID, Directive } from '@angular/core';
import { WA_WINDOW } from '@ng-web-apis/common';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';
import { tuiCreateToken, tuiFontSizeWatcher } from '@taiga-ui/cdk/utils/miscellaneous';

const TUI_FONT_SIZE_HANDLER = tuiCreateToken();
class TuiFontSize {
    constructor() {
        this.handler = inject(TUI_FONT_SIZE_HANDLER, { optional: true });
        this.nothing = inject(DestroyRef).onDestroy(this.handler &&
            isPlatformBrowser(inject(PLATFORM_ID)) &&
            typeof ResizeObserver !== 'undefined'
            ? tuiFontSizeWatcher(this.handler, inject(WA_WINDOW))
            : EMPTY_FUNCTION);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiFontSize, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiFontSize, isStandalone: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiFontSize, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_FONT_SIZE_HANDLER, TuiFontSize };
//# sourceMappingURL=taiga-ui-cdk-directives-font-size.mjs.map

import { NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, computed, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { TuiControl } from '@taiga-ui/cdk/classes';
import { tuiIsPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DATA_LIST_HOST, TuiOptionWithValue, } from '@taiga-ui/core/components/data-list';
import { tuiInjectAuxiliary } from '@taiga-ui/core/components/textfield';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/core/directives/items-handlers';
import { TuiRadio } from '@taiga-ui/kit/components/radio';
import { TuiSelectDirective } from '@taiga-ui/kit/components/select';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/components/radio";
class TuiOptionMobile {
    constructor() {
        this.host = inject(TUI_DATA_LIST_HOST);
        this.itemsHandlers = inject(TUI_ITEMS_HANDLERS);
        this.option = inject(TuiOptionWithValue, {
            optional: true,
        });
        this.control = tuiInjectAuxiliary((x) => x instanceof TuiControl);
        this.select = tuiInjectAuxiliary((x) => x instanceof TuiSelectDirective);
        this.selected = computed((controlValue = this.control()?.value(), optionValue = this.option?.value()) => tuiIsPresent(optionValue) &&
            tuiIsPresent(controlValue) &&
            this.itemsHandlers.identityMatcher()(controlValue, optionValue));
    }
    onClick() {
        const value = this.option?.value();
        if (this.host?.handleOption && value !== undefined) {
            this.host.handleOption(value);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiOptionMobile, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiOptionMobile, isStandalone: true, selector: "ng-component", host: { listeners: { "click": "onClick()" } }, ngImport: i0, template: "<input\n    *ngIf=\"select()\"\n    tuiRadio\n    type=\"radio\"\n    class=\"t-checked-indicator\"\n    [checked]=\"selected()\"\n/>\n", styles: [".t-checked-indicator{order:1;margin-inline-start:auto;pointer-events:none}\n"], dependencies: [{ kind: "ngmodule", type: FormsModule }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i1.TuiRadioComponent, selector: "input[type=\"radio\"][tuiRadio]", inputs: ["size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiOptionMobile };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiOptionMobile, decorators: [{
            type: Component,
            args: [{ standalone: true, imports: [FormsModule, NgIf, TuiRadio], changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '(click)': 'onClick()',
                    }, template: "<input\n    *ngIf=\"select()\"\n    tuiRadio\n    type=\"radio\"\n    class=\"t-checked-indicator\"\n    [checked]=\"selected()\"\n/>\n", styles: [".t-checked-indicator{order:1;margin-inline-start:auto;pointer-events:none}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLW1vYmlsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hZGRvbi1tb2JpbGUvZGlyZWN0aXZlcy9kcm9wZG93bi1tb2JpbGUvb3B0aW9uLW1vYmlsZS9vcHRpb24tbW9iaWxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FkZG9uLW1vYmlsZS9kaXJlY3RpdmVzL2Ryb3Bkb3duLW1vYmlsZS9vcHRpb24tbW9iaWxlL29wdGlvbi1tb2JpbGUudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDckMsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDakQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLG1DQUFtQyxDQUFDO0FBRS9ELE9BQU8sRUFDSCxrQkFBa0IsRUFDbEIsa0JBQWtCLEdBQ3JCLE1BQU0scUNBQXFDLENBQUM7QUFDN0MsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFFdkUsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sMENBQTBDLENBQUM7QUFDNUUsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ3hELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGlDQUFpQyxDQUFDOzs7QUFFbkUsTUFVYSxlQUFlO0lBVjVCO1FBV3FCLFNBQUksR0FBRyxNQUFNLENBQXFCLGtCQUFrQixDQUFDLENBQUM7UUFDdEQsa0JBQWEsR0FBd0IsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDaEUsV0FBTSxHQUFHLE1BQU0sQ0FBd0Isa0JBQWtCLEVBQUU7WUFDeEUsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBRWMsWUFBTyxHQUFHLGtCQUFrQixDQUN6QyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxZQUFZLFVBQVUsQ0FDakMsQ0FBQztRQUVpQixXQUFNLEdBQUcsa0JBQWtCLENBQzFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFlBQVksa0JBQWtCLENBQ3pDLENBQUM7UUFFaUIsYUFBUSxHQUFHLFFBQVEsQ0FDbEMsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FDM0UsWUFBWSxDQUFDLFdBQVcsQ0FBQztZQUN6QixZQUFZLENBQUMsWUFBWSxDQUFDO1lBQzFCLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxFQUFFLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQyxDQUN0RSxDQUFDO0tBU0w7SUFQYSxPQUFPO1FBQ2IsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUVuQyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsWUFBWSxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakM7SUFDTCxDQUFDOytHQTVCUSxlQUFlO21HQUFmLGVBQWUsdUhDMUI1Qix5SUFPQSxxSURXYyxXQUFXLCtCQUFFLElBQUk7O1NBUWxCLGVBQWU7NEZBQWYsZUFBZTtrQkFWM0IsU0FBUztpQ0FDTSxJQUFJLFdBQ1AsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxtQkFHckIsdUJBQXVCLENBQUMsTUFBTSxRQUN6Qzt3QkFDRixTQUFTLEVBQUUsV0FBVztxQkFDekIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05nSWZ9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIGNvbXB1dGVkLCBpbmplY3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGb3Jtc01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtUdWlDb250cm9sfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NsYXNzZXMnO1xuaW1wb3J0IHt0dWlJc1ByZXNlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQgdHlwZSB7VHVpRGF0YUxpc3RIb3N0fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL2RhdGEtbGlzdCc7XG5pbXBvcnQge1xuICAgIFRVSV9EQVRBX0xJU1RfSE9TVCxcbiAgICBUdWlPcHRpb25XaXRoVmFsdWUsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGF0YS1saXN0JztcbmltcG9ydCB7dHVpSW5qZWN0QXV4aWxpYXJ5fSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL3RleHRmaWVsZCc7XG5pbXBvcnQgdHlwZSB7VHVpSXRlbXNIYW5kbGVyc30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvZGlyZWN0aXZlcy9pdGVtcy1oYW5kbGVycyc7XG5pbXBvcnQge1RVSV9JVEVNU19IQU5ETEVSU30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvZGlyZWN0aXZlcy9pdGVtcy1oYW5kbGVycyc7XG5pbXBvcnQge1R1aVJhZGlvfSBmcm9tICdAdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvcmFkaW8nO1xuaW1wb3J0IHtUdWlTZWxlY3REaXJlY3RpdmV9IGZyb20gJ0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9zZWxlY3QnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIGltcG9ydHM6IFtGb3Jtc01vZHVsZSwgTmdJZiwgVHVpUmFkaW9dLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9vcHRpb24tbW9iaWxlLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL29wdGlvbi1tb2JpbGUuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJyhjbGljayknOiAnb25DbGljaygpJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlPcHRpb25Nb2JpbGU8VD4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaG9zdCA9IGluamVjdDxUdWlEYXRhTGlzdEhvc3Q8VD4+KFRVSV9EQVRBX0xJU1RfSE9TVCk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBpdGVtc0hhbmRsZXJzOiBUdWlJdGVtc0hhbmRsZXJzPFQ+ID0gaW5qZWN0KFRVSV9JVEVNU19IQU5ETEVSUyk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb24gPSBpbmplY3Q8VHVpT3B0aW9uV2l0aFZhbHVlPFQ+PihUdWlPcHRpb25XaXRoVmFsdWUsIHtcbiAgICAgICAgb3B0aW9uYWw6IHRydWUsXG4gICAgfSk7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRyb2wgPSB0dWlJbmplY3RBdXhpbGlhcnk8VHVpQ29udHJvbDxUPj4oXG4gICAgICAgICh4KSA9PiB4IGluc3RhbmNlb2YgVHVpQ29udHJvbCxcbiAgICApO1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHNlbGVjdCA9IHR1aUluamVjdEF1eGlsaWFyeTxUdWlDb250cm9sPFQ+PihcbiAgICAgICAgKHgpID0+IHggaW5zdGFuY2VvZiBUdWlTZWxlY3REaXJlY3RpdmUsXG4gICAgKTtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSBzZWxlY3RlZCA9IGNvbXB1dGVkKFxuICAgICAgICAoY29udHJvbFZhbHVlID0gdGhpcy5jb250cm9sKCk/LnZhbHVlKCksIG9wdGlvblZhbHVlID0gdGhpcy5vcHRpb24/LnZhbHVlKCkpID0+XG4gICAgICAgICAgICB0dWlJc1ByZXNlbnQob3B0aW9uVmFsdWUpICYmXG4gICAgICAgICAgICB0dWlJc1ByZXNlbnQoY29udHJvbFZhbHVlKSAmJlxuICAgICAgICAgICAgdGhpcy5pdGVtc0hhbmRsZXJzLmlkZW50aXR5TWF0Y2hlcigpKGNvbnRyb2xWYWx1ZSwgb3B0aW9uVmFsdWUpLFxuICAgICk7XG5cbiAgICBwcm90ZWN0ZWQgb25DbGljaygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLm9wdGlvbj8udmFsdWUoKTtcblxuICAgICAgICBpZiAodGhpcy5ob3N0Py5oYW5kbGVPcHRpb24gJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5ob3N0LmhhbmRsZU9wdGlvbih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCI8aW5wdXRcbiAgICAqbmdJZj1cInNlbGVjdCgpXCJcbiAgICB0dWlSYWRpb1xuICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgY2xhc3M9XCJ0LWNoZWNrZWQtaW5kaWNhdG9yXCJcbiAgICBbY2hlY2tlZF09XCJzZWxlY3RlZCgpXCJcbi8+XG4iXX0=
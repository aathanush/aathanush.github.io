import { ChangeDetectionStrategy, Component, inject } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TUI_DEFAULT_IDENTITY_MATCHER } from '@taiga-ui/cdk/constants';
import { tuiTypedFromEvent } from '@taiga-ui/cdk/observables';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiIsPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DATA_LIST_HOST, TuiDataListComponent, TuiOption, } from '@taiga-ui/core/components/data-list';
import { TUI_COMMON_ICONS } from '@taiga-ui/core/tokens';
import { AbstractTuiControl } from '@taiga-ui/legacy/classes';
import { injectContext, PolymorpheusComponent } from '@taiga-ui/polymorpheus';
import { distinctUntilChanged, EMPTY, map, merge, startWith, Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/core/components/scrollbar";
import * as i3 from "@taiga-ui/core/components/icon";
class TuiSelectOptionComponent {
    constructor() {
        this.host = inject(TUI_DATA_LIST_HOST);
        this.el = tuiInjectElement();
        this.changeDetection$ = new Subject();
        this.abstractControl = inject((AbstractTuiControl), { optional: true });
        this.control = inject(NgControl);
        this.option = inject((TuiOption));
        this.dataList = inject((TuiDataListComponent), { optional: true });
        this.icons = inject(TUI_COMMON_ICONS);
        this.context = injectContext();
        this.selected$ = merge(this.abstractControl?.update$ || EMPTY, this.changeDetection$, this.control.valueChanges || EMPTY, tuiTypedFromEvent(this.el, 'animationstart')).pipe(startWith(null), map(() => this.selected), distinctUntilChanged());
    }
    ngOnInit() {
        /**
         * This would cause changes inside already checked parent component (during the same change detection cycle),
         * and it might cause ExpressionChanged error due to potential HostBinding
         * (for example, inside {@link https://github.com/angular/angular/blob/main/packages/forms/src/directives/ng_control_status.ts#L99 NgControlStatus}).
         * Microtask keeps it in the same frame but allows change detection to run.
         */
        void Promise.resolve().then(() => {
            if (tuiIsPresent(this.option.value) && !this.option.disabled) {
                this.host.checkOption?.(this.option.value);
            }
        });
    }
    ngDoCheck() {
        this.changeDetection$.next();
    }
    get value() {
        return this.abstractControl?.value ?? this.control.value;
    }
    get matcher() {
        return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
    }
    get selected() {
        return (tuiIsPresent(this.option.value) &&
            tuiIsPresent(this.value) &&
            this.matcher(this.value, this.option.value));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectOptionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiSelectOptionComponent, selector: "tui-select-option", ngImport: i0, template: "<ng-container [ngTemplateOutlet]=\"context.$implicit\" />\n<tui-icon\n    *ngIf=\"selected$ | async; else dummy\"\n    automation-id=\"tui-select-option__checkmark\"\n    class=\"t-checkmark\"\n    [icon]=\"icons.check\"\n    [tuiScrollIntoView]=\"true\"\n/>\n<ng-template #dummy>\n    <span class=\"t-dummy\"></span>\n</ng-template>\n", styles: ["@keyframes retrigger{0%{left:1px}to{left:2px}}:host{display:flex;flex:1;align-items:center;max-inline-size:100%;animation:retrigger 1s}.t-checkmark{margin-inline-start:auto;inline-size:1.75rem;border-width:.25rem;border-inline-start-width:.5rem}:host-context(tui-data-list[data-size=\"s\"]) .t-checkmark{margin-inline-end:-.375rem}:host-context(tui-data-list[data-size=\"m\"]) .t-checkmark{margin-inline-end:-.125rem}.t-dummy{inline-size:1.75rem}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i2.TuiScrollIntoView, selector: "[tuiScrollIntoView]", inputs: ["tuiScrollIntoView"] }, { kind: "component", type: i3.TuiIcon, selector: "tui-icon", inputs: ["icon", "background"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiSelectOptionComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectOptionComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-select-option', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container [ngTemplateOutlet]=\"context.$implicit\" />\n<tui-icon\n    *ngIf=\"selected$ | async; else dummy\"\n    automation-id=\"tui-select-option__checkmark\"\n    class=\"t-checkmark\"\n    [icon]=\"icons.check\"\n    [tuiScrollIntoView]=\"true\"\n/>\n<ng-template #dummy>\n    <span class=\"t-dummy\"></span>\n</ng-template>\n", styles: ["@keyframes retrigger{0%{left:1px}to{left:2px}}:host{display:flex;flex:1;align-items:center;max-inline-size:100%;animation:retrigger 1s}.t-checkmark{margin-inline-start:auto;inline-size:1.75rem;border-width:.25rem;border-inline-start-width:.5rem}:host-context(tui-data-list[data-size=\"s\"]) .t-checkmark{margin-inline-end:-.375rem}:host-context(tui-data-list[data-size=\"m\"]) .t-checkmark{margin-inline-end:-.125rem}.t-dummy{inline-size:1.75rem}\n"] }]
        }] });
export const TUI_SELECT_OPTION = new PolymorpheusComponent(TuiSelectOptionComponent);
//# sourceMappingURL=data:application/json;base64,
import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, inject, Input, signal, ViewChild, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { MASKITO_DEFAULT_OPTIONS } from '@maskito/core';
import { maskitoDateRangeOptionsGenerator } from '@maskito/kit';
import { tuiAsControl } from '@taiga-ui/cdk/classes';
import { TUI_FALSE_HANDLER } from '@taiga-ui/cdk/constants';
import { DATE_FILLER_LENGTH, DATE_RANGE_FILLER_LENGTH, RANGE_SEPARATOR_CHAR, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDayRange, TuiMonth, } from '@taiga-ui/cdk/date-time';
import { tuiWatch } from '@taiga-ui/cdk/observables';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { changeDateSeparator, tuiIsPresent, tuiNullableSame, tuiPure, } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAsDataListHost } from '@taiga-ui/core/components/data-list';
import { TUI_DATE_FORMAT, TUI_DEFAULT_DATE_FORMAT } from '@taiga-ui/core/tokens';
import { TUI_DATE_RANGE_VALUE_TRANSFORMER, TUI_DATE_TEXTS, TUI_INPUT_DATE_OPTIONS, TUI_MOBILE_CALENDAR, TUI_MOBILE_CALENDAR_PROVIDER, tuiDateStreamWithTransformer, } from '@taiga-ui/kit/tokens';
import { AbstractTuiNullableControl, tuiAsControl as tuiAsLegacyControl, } from '@taiga-ui/legacy/classes';
import { TuiPrimitiveTextfieldComponent } from '@taiga-ui/legacy/components/primitive-textfield';
import { TUI_TEXTFIELD_SIZE } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import { TUI_DATE_MODE_MASKITO_ADAPTER } from '@taiga-ui/legacy/utils';
import { map } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@maskito/angular";
import * as i3 from "@taiga-ui/cdk/directives/let";
import * as i4 from "@taiga-ui/polymorpheus";
import * as i5 from "@taiga-ui/legacy/components/primitive-textfield";
import * as i6 from "@taiga-ui/legacy/directives";
import * as i7 from "@taiga-ui/kit/components/calendar-range";
import * as i8 from "@taiga-ui/core/components/icon";
import * as i9 from "@taiga-ui/core/directives/appearance";
import * as i10 from "@taiga-ui/core/directives/dropdown";
class TuiInputDateRangeComponent extends AbstractTuiNullableControl {
    constructor() {
        super(...arguments);
        this.isMobile = inject(TUI_IS_MOBILE);
        this.mobileCalendar = inject(TUI_MOBILE_CALENDAR, { optional: true });
        this.options = inject(TUI_INPUT_DATE_OPTIONS);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.nativeValue = signal('');
        this.dateTexts$ = inject(TUI_DATE_TEXTS);
        this.valueTransformer = inject(TUI_DATE_RANGE_VALUE_TRANSFORMER, { optional: true });
        this.dateFiller$ = this.dateTexts$.pipe(map((dateTexts) => changeDateSeparator(dateTexts[this.dateFormat.mode], this.dateFormat.separator)));
        this.dateFormat = TUI_DEFAULT_DATE_FORMAT;
        this.dateFormat$ = inject(TUI_DATE_FORMAT)
            .pipe(tuiWatch(this.cdr), takeUntilDestroyed())
            .subscribe((format) => {
            this.dateFormat = format;
        });
        this.selectedActivePeriod = null;
        this.disabledItemHandler = TUI_FALSE_HANDLER;
        this.markerHandler = null;
        this.defaultViewedMonth = TuiMonth.currentLocal();
        this.items = [];
        this.min = this.options.min;
        this.max = this.options.max;
        this.minLength = null;
        this.maxLength = null;
        this.open = false;
    }
    get nativeFocusableElement() {
        return this.textfield?.nativeFocusableElement ?? null;
    }
    get focused() {
        return !!this.textfield?.focused;
    }
    get computedExampleText() {
        return this.items.length
            ? this.textfield?.nativeFocusableElement?.placeholder || ''
            : '';
    }
    get computedValue() {
        const { value, nativeValue, activePeriod } = this;
        if (activePeriod) {
            return String(activePeriod);
        }
        return value
            ? value.getFormattedDayRange(this.dateFormat.mode, this.dateFormat.separator)
            : nativeValue();
    }
    get size() {
        return this.textfieldSize.size;
    }
    onClick() {
        if (!this.isMobile && this.interactive) {
            this.toggle();
        }
    }
    onValueChange(value) {
        this.nativeValue.set(value);
        if (this.control) {
            this.control.updateValueAndValidity({ emitEvent: false });
        }
        if (!value && !this.mobileCalendar) {
            this.onOpenChange(true);
        }
        if (this.activePeriod) {
            this.nativeValue.set('');
        }
        this.value =
            value.length === DATE_RANGE_FILLER_LENGTH && !this.activePeriod
                ? TuiDayRange.normalizeParse(value, this.dateFormat.mode)
                : null;
        if (!this.value) {
            this.selectedActivePeriod = null;
        }
    }
    onRangeChange(range) {
        this.toggle();
        this.focusInput();
        if (!range) {
            this.nativeValue.set('');
        }
        this.value = range;
    }
    writeValue(value) {
        if (this.value === null && value === this.value) {
            return;
        }
        super.writeValue(value);
        this.nativeValue.set(this.value ? this.computedValue : '');
        this.selectedActivePeriod = this.findActivePeriodBy(this.value);
    }
    get computedMobile() {
        return this.isMobile && !!this.mobileCalendar;
    }
    get calendarIcon() {
        return this.options.icon;
    }
    get computedMask() {
        return this.activePeriod
            ? MASKITO_DEFAULT_OPTIONS
            : this.calculateMask(this.dateFormat.mode, this.dateFormat.separator, this.min, this.max, this.minLength, this.maxLength);
    }
    get activePeriod() {
        return this.selectedActivePeriod ?? this.findActivePeriodBy(this.value);
    }
    get showValueTemplate() {
        return tuiIsPresent(this.value) && !this.focused;
    }
    get computedContent() {
        return this.activePeriod?.content || this.computedValue;
    }
    get innerPseudoFocused() {
        if (this.pseudoFocus === false) {
            return false;
        }
        if (this.open || this.computedFocused) {
            return true;
        }
        return null;
    }
    getComputedRangeFiller(dateFiller) {
        return this.activePeriod ? '' : this.getDateRangeFiller(dateFiller);
    }
    onIconClick() {
        if (this.isMobile && this.interactive) {
            this.onOpenChange(true);
        }
    }
    onOpenChange(open) {
        this.open = open;
    }
    onActiveZone(focused) {
        this.updateFocused(focused);
        if (!focused &&
            !this.itemSelected &&
            (this.nativeValue().length === DATE_FILLER_LENGTH ||
                this.nativeValue().length ===
                    DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length)) {
            this.value = TuiDayRange.normalizeParse(this.nativeValue(), this.dateFormat.mode);
        }
    }
    valueIdenticalComparator(oldValue, newValue) {
        return tuiNullableSame(oldValue, newValue, (a, b) => a.daySame(b));
    }
    get itemSelected() {
        return this.items.findIndex((item) => String(item) === this.nativeValue()) !== -1;
    }
    // eslint-disable-next-line @typescript-eslint/max-params,max-params
    calculateMask(dateFormat, dateSeparator, min, max, minLength, maxLength) {
        return maskitoDateRangeOptionsGenerator({
            dateSeparator,
            mode: TUI_DATE_MODE_MASKITO_ADAPTER[dateFormat],
            min: (min || TUI_FIRST_DAY).toLocalNativeDate(),
            max: (max || TUI_LAST_DAY).toLocalNativeDate(),
            minLength: minLength || {},
            maxLength: maxLength || {},
        });
    }
    toggle() {
        this.open = !this.open;
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll });
        }
    }
    getDateRangeFiller(dateFiller) {
        return `${dateFiller}${RANGE_SEPARATOR_CHAR}${dateFiller}`;
    }
    findActivePeriodBy(value) {
        return (this.items.find((item) => tuiNullableSame(value, item.range, (a, b) => a.from.daySame(b.from.dayLimit(this.min, this.max)) &&
            a.to.daySame(b.to.dayLimit(this.min, this.max)))) ?? null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateRangeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputDateRangeComponent, selector: "tui-input-date-range", inputs: { disabledItemHandler: "disabledItemHandler", markerHandler: "markerHandler", defaultViewedMonth: "defaultViewedMonth", items: "items", min: "min", max: "max", minLength: "minLength", maxLength: "maxLength" }, host: { listeners: { "click": "onClick()" }, properties: { "attr.data-size": "size" } }, providers: [
            tuiAsFocusableItemAccessor(TuiInputDateRangeComponent),
            tuiAsControl(TuiInputDateRangeComponent),
            tuiAsLegacyControl(TuiInputDateRangeComponent),
            tuiDateStreamWithTransformer(TUI_DATE_RANGE_VALUE_TRANSFORMER),
            tuiAsDataListHost(TuiInputDateRangeComponent),
            TUI_MOBILE_CALENDAR_PROVIDER,
        ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownEnabled]=\"interactive\"\n    [tuiDropdownOpen]=\"open && interactive\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n    (tuiDropdownOpenChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        *tuiLet=\"dateFiller$ | async as dateFiller\"\n        automation-id=\"tui-input-date-range__textfield\"\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"computedMask\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"innerPseudoFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldFiller]=\"getComputedRangeFiller(dateFiller || '')\"\n        [tuiTextfieldIcon]=\"calendarIcon && iconContent\"\n        [value]=\"computedValue\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n\n        <div\n            *ngIf=\"showValueTemplate\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-value\"\n        >\n            <ng-container *polymorpheusOutlet=\"computedContent as text; context: {$implicit: value}\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </tui-primitive-textfield>\n\n    <ng-template #iconContent>\n        <tui-icon\n            *polymorpheusOutlet=\"calendarIcon as src; context: {$implicit: size}\"\n            automation-id=\"tui-input-date-range__icon\"\n            tuiAppearance=\"icon\"\n            [class.t-icon_small]=\"size === 's'\"\n            [class.t-icon]=\"!computedDisabled\"\n            [icon]=\"src.toString()\"\n            (click)=\"onIconClick()\"\n        />\n    </ng-template>\n\n    <ng-template #dropdown>\n        <tui-calendar-range\n            [defaultViewedMonth]=\"defaultViewedMonth\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [items]=\"items\"\n            [markerHandler]=\"markerHandler\"\n            [max]=\"max\"\n            [maxLength]=\"maxLength\"\n            [min]=\"min\"\n            [minLength]=\"minLength\"\n            [value]=\"value\"\n            [(item)]=\"selectedActivePeriod\"\n            (valueChange)=\"onRangeChange($event)\"\n        />\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host._disabled,:host :host-context(*:disabled){pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-icon_small{border-width:.25rem}.t-value{display:flex;inline-size:100%;align-items:center}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { kind: "directive", type: i3.TuiLet, selector: "[tuiLet]", inputs: ["tuiLet"] }, { kind: "directive", type: i4.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "component", type: i5.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i5.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "directive", type: i6.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { kind: "directive", type: i6.TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: ["tuiTextfieldFiller"] }, { kind: "component", type: i7.TuiCalendarRange, selector: "tui-calendar-range", inputs: ["disabledItemHandler", "markerHandler", "items", "min", "max", "minLength", "maxLength", "item", "value", "defaultViewedMonth"], outputs: ["valueChange", "itemChange"] }, { kind: "directive", type: i6.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { kind: "directive", type: i6.TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "component", type: i8.TuiIcon, selector: "tui-icon", inputs: ["icon", "background"] }, { kind: "directive", type: i9.TuiAppearance, selector: "[tuiAppearance]", inputs: ["tuiAppearance", "tuiAppearanceState", "tuiAppearanceFocus", "tuiAppearanceMode"] }, { kind: "directive", type: i10.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i10.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiInputDateRangeComponent.prototype, "calculateMask", null);
export { TuiInputDateRangeComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateRangeComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-input-date-range', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiInputDateRangeComponent),
                        tuiAsControl(TuiInputDateRangeComponent),
                        tuiAsLegacyControl(TuiInputDateRangeComponent),
                        tuiDateStreamWithTransformer(TUI_DATE_RANGE_VALUE_TRANSFORMER),
                        tuiAsDataListHost(TuiInputDateRangeComponent),
                        TUI_MOBILE_CALENDAR_PROVIDER,
                    ], host: {
                        '[attr.data-size]': 'size',
                        '(click)': 'onClick()',
                    }, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownEnabled]=\"interactive\"\n    [tuiDropdownOpen]=\"open && interactive\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n    (tuiDropdownOpenChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        *tuiLet=\"dateFiller$ | async as dateFiller\"\n        automation-id=\"tui-input-date-range__textfield\"\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"computedMask\"\n        [nativeId]=\"nativeId\"\n        [pseudoActive]=\"pseudoActive\"\n        [pseudoFocus]=\"innerPseudoFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldFiller]=\"getComputedRangeFiller(dateFiller || '')\"\n        [tuiTextfieldIcon]=\"calendarIcon && iconContent\"\n        [value]=\"computedValue\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n\n        <div\n            *ngIf=\"showValueTemplate\"\n            ngProjectAs=\"tuiContent\"\n            class=\"t-value\"\n        >\n            <ng-container *polymorpheusOutlet=\"computedContent as text; context: {$implicit: value}\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </tui-primitive-textfield>\n\n    <ng-template #iconContent>\n        <tui-icon\n            *polymorpheusOutlet=\"calendarIcon as src; context: {$implicit: size}\"\n            automation-id=\"tui-input-date-range__icon\"\n            tuiAppearance=\"icon\"\n            [class.t-icon_small]=\"size === 's'\"\n            [class.t-icon]=\"!computedDisabled\"\n            [icon]=\"src.toString()\"\n            (click)=\"onIconClick()\"\n        />\n    </ng-template>\n\n    <ng-template #dropdown>\n        <tui-calendar-range\n            [defaultViewedMonth]=\"defaultViewedMonth\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [items]=\"items\"\n            [markerHandler]=\"markerHandler\"\n            [max]=\"max\"\n            [maxLength]=\"maxLength\"\n            [min]=\"min\"\n            [minLength]=\"minLength\"\n            [value]=\"value\"\n            [(item)]=\"selectedActivePeriod\"\n            (valueChange)=\"onRangeChange($event)\"\n        />\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host._disabled,:host :host-context(*:disabled){pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-icon_small{border-width:.25rem}.t-value{display:flex;inline-size:100%;align-items:center}\n"] }]
        }], propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], disabledItemHandler: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], defaultViewedMonth: [{
                type: Input
            }], items: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], minLength: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], calculateMask: [] } });
//# sourceMappingURL=data:application/json;base64,
import { Directive, inject } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';
import { tuiArrayToggle } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DATA_LIST_HOST, tuiAsOptionContent, } from '@taiga-ui/core/components/data-list';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import { AbstractTuiControl } from '@taiga-ui/legacy/classes';
import { TuiMultiSelectOptionComponent } from '@taiga-ui/legacy/components/multi-select-option';
import { PolymorpheusComponent } from '@taiga-ui/polymorpheus';
import { TuiMultiSelectComponent } from '../multi-select.component';
import * as i0 from "@angular/core";
export const TUI_MULTI_SELECT_OPTION = new PolymorpheusComponent(TuiMultiSelectOptionComponent);
class TuiMultiSelectGroupDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectGroupDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiMultiSelectGroupDirective, selector: "[tuiMultiSelectGroup]", providers: [
            tuiAsOptionContent(TUI_MULTI_SELECT_OPTION),
            {
                provide: TUI_DATA_LIST_HOST,
                useFactory: () => {
                    const multiSelect = inject(TuiMultiSelectComponent, { optional: true });
                    const ngControl = inject(NgControl);
                    const host = inject(AbstractTuiControl, { optional: true });
                    const { identityMatcher, stringify } = inject(TUI_ITEMS_HANDLERS, { optional: true }) ?? {};
                    return (multiSelect || {
                        stringify,
                        identityMatcher,
                        handleOption: (option) => {
                            const value = host?.value ?? ngControl.control?.value ?? [];
                            const result = tuiArrayToggle(value, option, identityMatcher);
                            if (host) {
                                host.value = result;
                            }
                            else {
                                ngControl.control?.setValue(result);
                            }
                        },
                    });
                },
            },
            {
                provide: NG_VALUE_ACCESSOR,
                multi: true,
                useValue: {
                    writeValue: EMPTY_FUNCTION,
                    registerOnChange: EMPTY_FUNCTION,
                    registerOnTouched: EMPTY_FUNCTION,
                },
            },
        ], ngImport: i0 }); }
}
export { TuiMultiSelectGroupDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiMultiSelectGroupDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: false,
                    selector: '[tuiMultiSelectGroup]',
                    providers: [
                        tuiAsOptionContent(TUI_MULTI_SELECT_OPTION),
                        {
                            provide: TUI_DATA_LIST_HOST,
                            useFactory: () => {
                                const multiSelect = inject(TuiMultiSelectComponent, { optional: true });
                                const ngControl = inject(NgControl);
                                const host = inject(AbstractTuiControl, { optional: true });
                                const { identityMatcher, stringify } = inject(TUI_ITEMS_HANDLERS, { optional: true }) ?? {};
                                return (multiSelect || {
                                    stringify,
                                    identityMatcher,
                                    handleOption: (option) => {
                                        const value = host?.value ?? ngControl.control?.value ?? [];
                                        const result = tuiArrayToggle(value, option, identityMatcher);
                                        if (host) {
                                            host.value = result;
                                        }
                                        else {
                                            ngControl.control?.setValue(result);
                                        }
                                    },
                                });
                            },
                        },
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useValue: {
                                writeValue: EMPTY_FUNCTION,
                                registerOnChange: EMPTY_FUNCTION,
                                registerOnTouched: EMPTY_FUNCTION,
                            },
                        },
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LWdyb3VwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xlZ2FjeS9jb21wb25lbnRzL211bHRpLXNlbGVjdC9tdWx0aS1zZWxlY3QtZ3JvdXAvbXVsdGktc2VsZWN0LWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUVqRSxPQUFPLEVBQ0gsa0JBQWtCLEVBQ2xCLGtCQUFrQixHQUNyQixNQUFNLHFDQUFxQyxDQUFDO0FBQzdDLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzVELE9BQU8sRUFBQyw2QkFBNkIsRUFBQyxNQUFNLGlEQUFpRCxDQUFDO0FBQzlGLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBRTdELE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDOztBQUVsRSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLHFCQUFxQixDQUM1RCw2QkFBNkIsQ0FDaEMsQ0FBQztBQUVGLE1BMkNhLDRCQUE0QjsrR0FBNUIsNEJBQTRCO21HQUE1Qiw0QkFBNEIsZ0RBeEMxQjtZQUNQLGtCQUFrQixDQUFDLHVCQUF1QixDQUFDO1lBQzNDO2dCQUNJLE9BQU8sRUFBRSxrQkFBa0I7Z0JBQzNCLFVBQVUsRUFBRSxHQUEwQixFQUFF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QUNJLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLEtBQUssRUFBRSxJQUFJOzRCQUNYLFFBQVEsRUFBRTtnQ0FDTixVQUFVLEVBQUUsY0FBYztnQ0FDMUIsZ0JBQWdCLEVBQUUsY0FBYztnQ0FDaEMsaUJBQWlCLEVBQUUsY0FBYzs2QkFDcEM7eUJBQ0o7cUJBQ0o7aUJBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgaW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1IsIE5nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtFTVBUWV9GVU5DVElPTn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb25zdGFudHMnO1xuaW1wb3J0IHt0dWlBcnJheVRvZ2dsZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB0eXBlIHtUdWlEYXRhTGlzdEhvc3R9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGF0YS1saXN0JztcbmltcG9ydCB7XG4gICAgVFVJX0RBVEFfTElTVF9IT1NULFxuICAgIHR1aUFzT3B0aW9uQ29udGVudCxcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvY29tcG9uZW50cy9kYXRhLWxpc3QnO1xuaW1wb3J0IHtUVUlfSVRFTVNfSEFORExFUlN9IGZyb20gJ0B0YWlnYS11aS9raXQvdG9rZW5zJztcbmltcG9ydCB7QWJzdHJhY3RUdWlDb250cm9sfSBmcm9tICdAdGFpZ2EtdWkvbGVnYWN5L2NsYXNzZXMnO1xuaW1wb3J0IHtUdWlNdWx0aVNlbGVjdE9wdGlvbkNvbXBvbmVudH0gZnJvbSAnQHRhaWdhLXVpL2xlZ2FjeS9jb21wb25lbnRzL211bHRpLXNlbGVjdC1vcHRpb24nO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb21wb25lbnR9IGZyb20gJ0B0YWlnYS11aS9wb2x5bW9ycGhldXMnO1xuXG5pbXBvcnQge1R1aU11bHRpU2VsZWN0Q29tcG9uZW50fSBmcm9tICcuLi9tdWx0aS1zZWxlY3QuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IFRVSV9NVUxUSV9TRUxFQ1RfT1BUSU9OID0gbmV3IFBvbHltb3JwaGV1c0NvbXBvbmVudChcbiAgICBUdWlNdWx0aVNlbGVjdE9wdGlvbkNvbXBvbmVudCxcbik7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHN0YW5kYWxvbmU6IGZhbHNlLFxuICAgIHNlbGVjdG9yOiAnW3R1aU11bHRpU2VsZWN0R3JvdXBdJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgdHVpQXNPcHRpb25Db250ZW50KFRVSV9NVUxUSV9TRUxFQ1RfT1BUSU9OKSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX0RBVEFfTElTVF9IT1NULFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogPFQ+KCk6IFR1aURhdGFMaXN0SG9zdDxUPiA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbXVsdGlTZWxlY3QgPSBpbmplY3QoVHVpTXVsdGlTZWxlY3RDb21wb25lbnQsIHtvcHRpb25hbDogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5nQ29udHJvbCA9IGluamVjdChOZ0NvbnRyb2wpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhvc3QgPSBpbmplY3QoQWJzdHJhY3RUdWlDb250cm9sLCB7b3B0aW9uYWw6IHRydWV9KTtcbiAgICAgICAgICAgICAgICBjb25zdCB7aWRlbnRpdHlNYXRjaGVyLCBzdHJpbmdpZnl9ID1cbiAgICAgICAgICAgICAgICAgICAgaW5qZWN0KFRVSV9JVEVNU19IQU5ETEVSUywge29wdGlvbmFsOiB0cnVlfSkgPz8ge307XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICBtdWx0aVNlbGVjdCB8fCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdpZnksXG4gICAgICAgICAgICAgICAgICAgICAgICBpZGVudGl0eU1hdGNoZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVPcHRpb246IChvcHRpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGhvc3Q/LnZhbHVlID8/IG5nQ29udHJvbC5jb250cm9sPy52YWx1ZSA/PyBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0dWlBcnJheVRvZ2dsZSh2YWx1ZSwgb3B0aW9uLCBpZGVudGl0eU1hdGNoZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9zdC52YWx1ZSA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZ0NvbnRyb2wuY29udHJvbD8uc2V0VmFsdWUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgICAgIHdyaXRlVmFsdWU6IEVNUFRZX0ZVTkNUSU9OLFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyT25DaGFuZ2U6IEVNUFRZX0ZVTkNUSU9OLFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyT25Ub3VjaGVkOiBFTVBUWV9GVU5DVElPTixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpTXVsdGlTZWxlY3RHcm91cERpcmVjdGl2ZSB7fVxuIl19
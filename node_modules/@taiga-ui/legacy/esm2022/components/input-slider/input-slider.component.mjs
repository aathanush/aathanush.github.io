import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, inject, Input, ViewChild, } from '@angular/core';
import { tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { tuiClamp, tuiRound } from '@taiga-ui/cdk/utils/math';
import { tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiGetFractionPartPadded } from '@taiga-ui/core/utils/format';
import { TUI_FLOATING_PRECISION, TuiSliderComponent, tuiSliderOptionsProvider, } from '@taiga-ui/kit/components/slider';
import { AbstractTuiControl, tuiAsControl } from '@taiga-ui/legacy/classes';
import { TuiInputNumberComponent } from '@taiga-ui/legacy/components/input-number';
import { TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_WATCHED_CONTROLLER, } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@taiga-ui/polymorpheus";
import * as i4 from "@taiga-ui/legacy/components/input-number";
import * as i5 from "@taiga-ui/core/directives/number-format";
import * as i6 from "@taiga-ui/legacy/directives";
import * as i7 from "@taiga-ui/kit/components/slider";
/**
 * TODO(v5): delete it
 * @deprecated use new version of {@link https://taiga-ui.dev/components/input-slider TuiInputSlider} (from @taiga-ui/kit) instead
 */
class TuiInputSliderComponent extends AbstractTuiControl {
    constructor() {
        super(...arguments);
        this.textfieldValue = this.safeCurrentValue;
        this.controller = inject(TUI_TEXTFIELD_WATCHED_CONTROLLER);
        this.min = 0;
        this.max = 100;
        this.quantum = 1;
        this.steps = 0;
        this.segments = 1;
        this.keySteps = null;
    }
    get nativeFocusableElement() {
        return !this.inputNumberRef?.nativeFocusableElement || this.computedDisabled
            ? null
            : this.inputNumberRef.nativeFocusableElement;
    }
    get focused() {
        return (tuiIsNativeFocused(this.nativeFocusableElement) ||
            tuiIsNativeFocused(this.sliderRef?.nativeElement || null));
    }
    writeValue(value) {
        super.writeValue(value);
        this.textfieldValue = this.value;
    }
    get prefix() {
        return this.controller.prefix;
    }
    get postfix() {
        return this.controller.postfix;
    }
    get computedSteps() {
        return this.steps || (this.max - this.min) / this.quantum;
    }
    get precision() {
        return tuiGetFractionPartPadded(this.quantum).length;
    }
    get showValueContent() {
        return Boolean(this.valueContent && !this.focused);
    }
    get step() {
        return (this.max - this.min) / this.computedSteps;
    }
    computeKeySteps(keySteps, min, max) {
        return (keySteps || [
            [0, min],
            [100, max],
        ]);
    }
    focusTextInput() {
        const focusableElement = this.inputNumberRef?.nativeFocusableElement;
        if (focusableElement) {
            focusableElement.focus();
        }
    }
    safelyUpdateValue(value) {
        this.value = this.valueGuard(value ?? this.safeCurrentValue);
    }
    onVerticalArrowKeyDown(coefficient) {
        if (this.readOnly || !this.step) {
            return;
        }
        const value = this.value + coefficient * this.step;
        if (value !== this.value) {
            this.safelyUpdateValue(value);
            this.textfieldValue = this.value;
        }
    }
    onSliderChange(newValue) {
        this.safelyUpdateValue(newValue);
        this.textfieldValue = this.value;
    }
    onFocused(focused) {
        const { value, textfieldValue } = this;
        if (!focused && textfieldValue !== value) {
            this.textfieldValue = value;
        }
        this.updateFocused(focused);
    }
    getFallbackValue() {
        return 0;
    }
    valueGuard(value) {
        const roundedValue = tuiRound(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);
        return tuiClamp(roundedValue, this.min, this.max);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputSliderComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputSliderComponent, selector: "tui-input-slider", inputs: { min: "min", max: "max", quantum: "quantum", steps: "steps", segments: "segments", keySteps: "keySteps", valueContent: "valueContent" }, host: { properties: { "attr.data-size": "controller.size", "class._label-outside": "controller.labelOutside" } }, providers: [
            tuiAsFocusableItemAccessor(TuiInputSliderComponent),
            tuiAsControl(TuiInputSliderComponent),
            tuiSliderOptionsProvider({ trackColor: 'transparent' }),
            TEXTFIELD_CONTROLLER_PROVIDER,
        ], viewQueries: [{ propertyName: "inputNumberRef", first: true, predicate: TuiInputNumberComponent, descendants: true }, { propertyName: "sliderRef", first: true, predicate: TuiSliderComponent, descendants: true, read: ElementRef }], usesInheritance: true, ngImport: i0, template: "<tui-input-number\n    [disabled]=\"computedDisabled\"\n    [max]=\"max\"\n    [min]=\"min\"\n    [ngModelOptions]=\"{standalone: true}\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"computedFocused\"\n    [pseudoHover]=\"pseudoHover\"\n    [pseudoInvalid]=\"pseudoInvalid\"\n    [readOnly]=\"readOnly\"\n    [tuiNumberFormat]=\"{precision}\"\n    [tuiTextfieldPostfix]=\"postfix\"\n    [tuiTextfieldPrefix]=\"prefix\"\n    [(ngModel)]=\"textfieldValue\"\n    (focusedChange)=\"onFocused($event)\"\n    (keydown.arrowDown.prevent)=\"onVerticalArrowKeyDown(-1)\"\n    (keydown.arrowUp.prevent)=\"onVerticalArrowKeyDown(1)\"\n    (ngModelChange)=\"safelyUpdateValue($event)\"\n>\n    <ng-content />\n    <div\n        *ngIf=\"showValueContent\"\n        automation-id=\"tui-input-slider__value-content\"\n        ngProjectAs=\"tuiContent\"\n    >\n        <ng-container *polymorpheusOutlet=\"valueContent as text; context: {$implicit: value}\">\n            {{ text }}\n        </ng-container>\n    </div>\n</tui-input-number>\n\n<input\n    tabIndex=\"-1\"\n    tuiSlider\n    type=\"range\"\n    [disabled]=\"readOnly || computedDisabled\"\n    [keySteps]=\"computeKeySteps(keySteps, min, max)\"\n    [max]=\"computedSteps\"\n    [ngModel]=\"value\"\n    [ngModelOptions]=\"{standalone: true}\"\n    [segments]=\"segments\"\n    (click)=\"focusTextInput()\"\n    (ngModelChange)=\"onSliderChange($event)\"\n/>\n", styles: [":host{position:relative;display:block;block-size:-webkit-max-content;block-size:max-content;isolation:isolate;border-radius:var(--tui-radius);--tui-radius: var(--tui-radius-m)}:host[data-size=l]{--tui-radius: var(--tui-radius-l)}:host :host-context(*:disabled){pointer-events:none}tui-input-number{border-radius:inherit}input[type=range]{position:absolute;top:100%;left:calc(var(--tui-radius) / 2);right:0;inline-size:calc(100% - calc(var(--tui-radius) / 2));box-sizing:border-box;block-size:1rem;margin:-.5625rem 0 0;border-top-left-radius:0;border-bottom-left-radius:calc(var(--tui-radius) * 10) calc(var(--tui-radius) * 2)}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i3.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "component", type: i4.TuiInputNumberComponent, selector: "tui-input-number", inputs: ["min", "max", "step"] }, { kind: "directive", type: i4.TuiInputNumberDirective, selector: "tui-input-number" }, { kind: "directive", type: i5.TuiNumberFormat, selector: "[tuiNumberFormat]", inputs: ["tuiNumberFormat"] }, { kind: "directive", type: i6.TuiTextfieldPrefixDirective, selector: "[tuiTextfieldPrefix]", inputs: ["tuiTextfieldPrefix"] }, { kind: "directive", type: i6.TuiTextfieldPostfixDirective, selector: "[tuiTextfieldPostfix]", inputs: ["tuiTextfieldPostfix"] }, { kind: "component", type: i7.TuiSliderComponent, selector: "input[type=range][tuiSlider]", inputs: ["size", "segments"] }, { kind: "directive", type: i7.TuiSliderKeyStepsBase, selector: "input[tuiSlider][keySteps]", inputs: ["step", "keySteps"] }, { kind: "directive", type: i7.TuiSliderKeySteps, selector: "input[tuiSlider][keySteps][ngModel],input[tuiSlider][keySteps][formControl],input[tuiSlider][keySteps][formControlName]", inputs: ["keySteps"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiInputSliderComponent.prototype, "computeKeySteps", null);
export { TuiInputSliderComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputSliderComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-input-slider', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiInputSliderComponent),
                        tuiAsControl(TuiInputSliderComponent),
                        tuiSliderOptionsProvider({ trackColor: 'transparent' }),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ], host: {
                        '[attr.data-size]': 'controller.size',
                        '[class._label-outside]': 'controller.labelOutside',
                    }, template: "<tui-input-number\n    [disabled]=\"computedDisabled\"\n    [max]=\"max\"\n    [min]=\"min\"\n    [ngModelOptions]=\"{standalone: true}\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoFocus]=\"computedFocused\"\n    [pseudoHover]=\"pseudoHover\"\n    [pseudoInvalid]=\"pseudoInvalid\"\n    [readOnly]=\"readOnly\"\n    [tuiNumberFormat]=\"{precision}\"\n    [tuiTextfieldPostfix]=\"postfix\"\n    [tuiTextfieldPrefix]=\"prefix\"\n    [(ngModel)]=\"textfieldValue\"\n    (focusedChange)=\"onFocused($event)\"\n    (keydown.arrowDown.prevent)=\"onVerticalArrowKeyDown(-1)\"\n    (keydown.arrowUp.prevent)=\"onVerticalArrowKeyDown(1)\"\n    (ngModelChange)=\"safelyUpdateValue($event)\"\n>\n    <ng-content />\n    <div\n        *ngIf=\"showValueContent\"\n        automation-id=\"tui-input-slider__value-content\"\n        ngProjectAs=\"tuiContent\"\n    >\n        <ng-container *polymorpheusOutlet=\"valueContent as text; context: {$implicit: value}\">\n            {{ text }}\n        </ng-container>\n    </div>\n</tui-input-number>\n\n<input\n    tabIndex=\"-1\"\n    tuiSlider\n    type=\"range\"\n    [disabled]=\"readOnly || computedDisabled\"\n    [keySteps]=\"computeKeySteps(keySteps, min, max)\"\n    [max]=\"computedSteps\"\n    [ngModel]=\"value\"\n    [ngModelOptions]=\"{standalone: true}\"\n    [segments]=\"segments\"\n    (click)=\"focusTextInput()\"\n    (ngModelChange)=\"onSliderChange($event)\"\n/>\n", styles: [":host{position:relative;display:block;block-size:-webkit-max-content;block-size:max-content;isolation:isolate;border-radius:var(--tui-radius);--tui-radius: var(--tui-radius-m)}:host[data-size=l]{--tui-radius: var(--tui-radius-l)}:host :host-context(*:disabled){pointer-events:none}tui-input-number{border-radius:inherit}input[type=range]{position:absolute;top:100%;left:calc(var(--tui-radius) / 2);right:0;inline-size:calc(100% - calc(var(--tui-radius) / 2));box-sizing:border-box;block-size:1rem;margin:-.5625rem 0 0;border-top-left-radius:0;border-bottom-left-radius:calc(var(--tui-radius) * 10) calc(var(--tui-radius) * 2)}\n"] }]
        }], propDecorators: { inputNumberRef: [{
                type: ViewChild,
                args: [TuiInputNumberComponent]
            }], sliderRef: [{
                type: ViewChild,
                args: [TuiSliderComponent, { read: ElementRef }]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], quantum: [{
                type: Input
            }], steps: [{
                type: Input
            }], segments: [{
                type: Input
            }], keySteps: [{
                type: Input
            }], valueContent: [{
                type: Input
            }], computeKeySteps: [] } });
//# sourceMappingURL=data:application/json;base64,
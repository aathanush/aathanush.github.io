import { AsyncPipe, NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, computed, inject } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { TuiIcon } from '@taiga-ui/core/components/icon';
import { TuiDropdownOpen } from '@taiga-ui/core/directives/dropdown';
import { tuiSizeBigger } from '@taiga-ui/core/utils/miscellaneous';
import { AbstractTuiControl } from '@taiga-ui/legacy/classes';
import { TUI_TEXTFIELD_SIZE } from '@taiga-ui/legacy/directives';
import { PolymorpheusComponent, PolymorpheusOutlet, PolymorpheusTemplate, } from '@taiga-ui/polymorpheus';
import { of } from 'rxjs';
import { TUI_ARROW_OPTIONS } from './arrow.options';
import * as i0 from "@angular/core";
/**
 * @deprecated: drop in v5.0 use {@link TuiChevron}
 */
class TuiArrowComponent {
    constructor() {
        this.control = inject(AbstractTuiControl, { optional: true });
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.options = inject(TUI_ARROW_OPTIONS);
        this.dropdownOpen = toSignal(inject(TuiDropdownOpen, { optional: true })?.tuiDropdownOpenChange || of(false));
        this.rotated = computed(() => this.dropdownOpen() || this.control.pseudoOpen?.());
    }
    get small() {
        return !tuiSizeBigger(this.textfieldSize.size);
    }
    get arrowIcon() {
        return !this.small ? this.options.iconLarge : this.options.iconSmall;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiArrowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiArrowComponent, isStandalone: true, selector: "tui-arrow", host: { properties: { "class._rotated": "rotated()", "class._small": "small" } }, ngImport: i0, template: "<tui-icon\n    *polymorpheusOutlet=\"arrowIcon as src\"\n    [icon]=\"src\"\n/>\n", styles: [":host{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;cursor:pointer;pointer-events:none}:host._rotated{transform:rotate(180deg)}tui-icon{border-width:.25rem}\n"], dependencies: [{ kind: "directive", type: PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "component", type: TuiIcon, selector: "tui-icon", inputs: ["icon", "background"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiArrowComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiArrowComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-arrow', imports: [AsyncPipe, NgIf, PolymorpheusOutlet, PolymorpheusTemplate, TuiIcon], changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class._rotated]': 'rotated()',
                        '[class._small]': 'small',
                    }, template: "<tui-icon\n    *polymorpheusOutlet=\"arrowIcon as src\"\n    [icon]=\"src\"\n/>\n", styles: [":host{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;cursor:pointer;pointer-events:none}:host._rotated{transform:rotate(180deg)}tui-icon{border-width:.25rem}\n"] }]
        }] });
export const TUI_ARROW = new PolymorpheusComponent(TuiArrowComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyb3cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGVnYWN5L2NvbXBvbmVudHMvYXJyb3cvYXJyb3cuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGVnYWN5L2NvbXBvbmVudHMvYXJyb3cvYXJyb3cudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBQyx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRixPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFDcEQsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ3ZELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUNuRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDakUsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDNUQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFFL0QsT0FBTyxFQUNILHFCQUFxQixFQUNyQixrQkFBa0IsRUFDbEIsb0JBQW9CLEdBQ3ZCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUV4QixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQzs7QUFFbEQ7O0dBRUc7QUFDSCxNQVlhLGlCQUFpQjtJQVo5QjtRQWFxQixZQUFPLEdBQVEsTUFBTSxDQUFDLGtCQUFrQixFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFDNUQsa0JBQWEsR0FBRyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMzQyxZQUFPLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDbEMsaUJBQVksR0FBRyxRQUFRLENBQ3RDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsRUFBRSxxQkFBcUIsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQ2hGLENBQUM7UUFFaUIsWUFBTyxHQUFHLFFBQVEsQ0FDakMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FDM0QsQ0FBQztLQVNMO0lBUEcsSUFBYyxLQUFLO1FBQ2YsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxJQUFjLFNBQVM7UUFDbkIsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUN6RSxDQUFDOytHQWxCUSxpQkFBaUI7bUdBQWpCLGlCQUFpQix1SkNqQzlCLG1GQUlBLDBTRG9CK0Isa0JBQWtCLDhIQUF3QixPQUFPOztTQVNuRSxpQkFBaUI7NEZBQWpCLGlCQUFpQjtrQkFaN0IsU0FBUztpQ0FDTSxJQUFJLFlBQ04sV0FBVyxXQUNaLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxvQkFBb0IsRUFBRSxPQUFPLENBQUMsbUJBRzVELHVCQUF1QixDQUFDLE1BQU0sUUFDekM7d0JBQ0Ysa0JBQWtCLEVBQUUsV0FBVzt3QkFDL0IsZ0JBQWdCLEVBQUUsT0FBTztxQkFDNUI7O0FBdUJMLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxJQUFJLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FzeW5jUGlwZSwgTmdJZn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgY29tcHV0ZWQsIGluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3RvU2lnbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQge1R1aUljb259IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvaWNvbic7XG5pbXBvcnQge1R1aURyb3Bkb3duT3Blbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvZGlyZWN0aXZlcy9kcm9wZG93bic7XG5pbXBvcnQge3R1aVNpemVCaWdnZXJ9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3V0aWxzL21pc2NlbGxhbmVvdXMnO1xuaW1wb3J0IHtBYnN0cmFjdFR1aUNvbnRyb2x9IGZyb20gJ0B0YWlnYS11aS9sZWdhY3kvY2xhc3Nlcyc7XG5pbXBvcnQge1RVSV9URVhURklFTERfU0laRX0gZnJvbSAnQHRhaWdhLXVpL2xlZ2FjeS9kaXJlY3RpdmVzJztcbmltcG9ydCB0eXBlIHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGFpZ2EtdWkvcG9seW1vcnBoZXVzJztcbmltcG9ydCB7XG4gICAgUG9seW1vcnBoZXVzQ29tcG9uZW50LFxuICAgIFBvbHltb3JwaGV1c091dGxldCxcbiAgICBQb2x5bW9ycGhldXNUZW1wbGF0ZSxcbn0gZnJvbSAnQHRhaWdhLXVpL3BvbHltb3JwaGV1cyc7XG5pbXBvcnQge29mfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtUVUlfQVJST1dfT1BUSU9OU30gZnJvbSAnLi9hcnJvdy5vcHRpb25zJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZDogZHJvcCBpbiB2NS4wIHVzZSB7QGxpbmsgVHVpQ2hldnJvbn1cbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBzZWxlY3RvcjogJ3R1aS1hcnJvdycsXG4gICAgaW1wb3J0czogW0FzeW5jUGlwZSwgTmdJZiwgUG9seW1vcnBoZXVzT3V0bGV0LCBQb2x5bW9ycGhldXNUZW1wbGF0ZSwgVHVpSWNvbl0sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Fycm93LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2Fycm93LnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBob3N0OiB7XG4gICAgICAgICdbY2xhc3MuX3JvdGF0ZWRdJzogJ3JvdGF0ZWQoKScsXG4gICAgICAgICdbY2xhc3MuX3NtYWxsXSc6ICdzbWFsbCcsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQXJyb3dDb21wb25lbnQge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY29udHJvbDogYW55ID0gaW5qZWN0KEFic3RyYWN0VHVpQ29udHJvbCwge29wdGlvbmFsOiB0cnVlfSk7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0ZXh0ZmllbGRTaXplID0gaW5qZWN0KFRVSV9URVhURklFTERfU0laRSk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zID0gaW5qZWN0KFRVSV9BUlJPV19PUFRJT05TKTtcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZHJvcGRvd25PcGVuID0gdG9TaWduYWwoXG4gICAgICAgIGluamVjdChUdWlEcm9wZG93bk9wZW4sIHtvcHRpb25hbDogdHJ1ZX0pPy50dWlEcm9wZG93bk9wZW5DaGFuZ2UgfHwgb2YoZmFsc2UpLFxuICAgICk7XG5cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgcm90YXRlZCA9IGNvbXB1dGVkKFxuICAgICAgICAoKSA9PiB0aGlzLmRyb3Bkb3duT3BlbigpIHx8IHRoaXMuY29udHJvbC5wc2V1ZG9PcGVuPy4oKSxcbiAgICApO1xuXG4gICAgcHJvdGVjdGVkIGdldCBzbWFsbCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0dWlTaXplQmlnZ2VyKHRoaXMudGV4dGZpZWxkU2l6ZS5zaXplKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGFycm93SWNvbigpOiBQb2x5bW9ycGhldXNDb250ZW50IHtcbiAgICAgICAgcmV0dXJuICF0aGlzLnNtYWxsID8gdGhpcy5vcHRpb25zLmljb25MYXJnZSA6IHRoaXMub3B0aW9ucy5pY29uU21hbGw7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgVFVJX0FSUk9XID0gbmV3IFBvbHltb3JwaGV1c0NvbXBvbmVudChUdWlBcnJvd0NvbXBvbmVudCk7XG4iLCI8dHVpLWljb25cbiAgICAqcG9seW1vcnBoZXVzT3V0bGV0PVwiYXJyb3dJY29uIGFzIHNyY1wiXG4gICAgW2ljb25dPVwic3JjXCJcbi8+XG4iXX0=
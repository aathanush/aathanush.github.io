import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, EventEmitter, inject, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import { MASKITO_DEFAULT_OPTIONS, maskitoTransform } from '@maskito/core';
import { maskitoCaretGuard, maskitoPrefixPostprocessorGenerator } from '@maskito/kit';
import { tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAsDataListHost, TuiDataListDirective, } from '@taiga-ui/core/components/data-list';
import { TuiDropdownFixed, TuiDropdownOpen } from '@taiga-ui/core/directives/dropdown';
import { AbstractTuiControl, tuiAsControl } from '@taiga-ui/legacy/classes';
import { TuiPrimitiveTextfieldComponent } from '@taiga-ui/legacy/components/primitive-textfield';
import { TUI_TEXTFIELD_CLEANER, TUI_TEXTFIELD_SIZE } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import { TUI_INPUT_PHONE_OPTIONS } from './input-phone.options';
import { tuiCreateCompletePhoneInsertionPreprocessor, tuiCreatePhoneMaskExpression, } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/directives/dropdown";
import * as i2 from "@maskito/angular";
import * as i3 from "@taiga-ui/legacy/components/primitive-textfield";
import * as i4 from "@taiga-ui/legacy/directives";
const MASK_SYMBOLS = /[ \-_()]/g;
function isText(value) {
    return Number.isNaN(parseInt(value.replaceAll(MASK_SYMBOLS, ''), 10));
}
class TuiInputPhoneComponent extends AbstractTuiControl {
    constructor() {
        super(...arguments);
        this.textfieldCleaner = inject(TUI_TEXTFIELD_CLEANER);
        this.options = inject(TUI_INPUT_PHONE_OPTIONS);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.open = false;
        this.phoneMaskAfterCountryCode = this.options.phoneMaskAfterCountryCode;
        this.allowText = this.options.allowText;
        this.search = '';
        this.searchChange = new EventEmitter();
        this.countryCode = this.options.countryCode;
    }
    set countryCodeSetter(newCountryCode) {
        const prevCountryCode = this.countryCode;
        this.countryCode = newCountryCode;
        this.updateValueWithNewCountryCode(prevCountryCode, newCountryCode);
    }
    get size() {
        return this.textfieldSize.size;
    }
    get nativeFocusableElement() {
        return !this.textfield || this.computedDisabled
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        return (tuiIsNativeFocused(this.nativeFocusableElement) ||
            !!this.dropdown?.tuiDropdownOpen);
    }
    get nativeValue() {
        return (this.nativeFocusableElement?.value ||
            maskitoTransform(this.value, this.maskOptions));
    }
    set nativeValue(value) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.value = value;
        }
    }
    get inputMode() {
        return this.allowText ? 'text' : 'numeric';
    }
    onValueChange(value) {
        const parsed = isText(value)
            ? value
            : value.replaceAll(MASK_SYMBOLS, '').slice(0, this.maxPhoneLength);
        this.updateSearch(parsed);
        this.value = parsed === this.countryCode || isText(parsed) ? '' : parsed;
        this.open = true;
        if (!this.value && !this.allowText) {
            this.nativeValue = this.nonRemovablePrefix;
        }
    }
    handleOption(item) {
        this.focusInput();
        this.value = item;
        this.nativeValue = maskitoTransform(this.value, this.maskOptions);
        this.updateSearch('');
        this.open = false;
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValue = maskitoTransform(this.value || '', this.maskOptions);
        this.updateSearch('');
    }
    get canOpen() {
        return this.interactive && !!this.datalist;
    }
    get canClean() {
        return (this.nativeValue !== this.nonRemovablePrefix && this.textfieldCleaner.cleaner);
    }
    get maskOptions() {
        return this.calculateMask(this.countryCode, this.phoneMaskAfterCountryCode, this.nonRemovablePrefix, this.allowText);
    }
    onActiveZone(active) {
        this.updateFocused(active);
        if (active && !this.nativeValue && !this.readOnly && !this.allowText) {
            this.updateSearch(this.nonRemovablePrefix);
            this.nativeValue = this.nonRemovablePrefix;
            return;
        }
        if (this.nativeValue === this.nonRemovablePrefix || this.isTextValue) {
            this.updateSearch('');
            this.nativeValue = '';
            return;
        }
        if (!active && !this.allowText && this.nativeFocusableElement) {
            this.nativeValue = this.nativeValue.replace(/\D$/, '');
        }
    }
    getFallbackValue() {
        return '';
    }
    get nonRemovablePrefix() {
        return `${this.countryCode} `;
    }
    get maxPhoneLength() {
        return (this.countryCode.length +
            this.phoneMaskAfterCountryCode.replaceAll(/[^#]+/g, '').length);
    }
    get isTextValue() {
        return !!this.search && isText(this.search);
    }
    calculateMask(countryCode, phoneMaskAfterCountryCode, nonRemovablePrefix, allowText) {
        const mask = tuiCreatePhoneMaskExpression(countryCode, phoneMaskAfterCountryCode);
        const preprocessors = [
            tuiCreateCompletePhoneInsertionPreprocessor(countryCode, phoneMaskAfterCountryCode),
        ];
        return allowText
            ? {
                mask: ({ value }) => isText(value) && value !== '+'
                    ? MASKITO_DEFAULT_OPTIONS.mask
                    : mask,
                preprocessors,
            }
            : {
                mask,
                preprocessors,
                postprocessors: [
                    maskitoPrefixPostprocessorGenerator(nonRemovablePrefix),
                ],
                plugins: [
                    maskitoCaretGuard((value, [from, to]) => [
                        from === to ? nonRemovablePrefix.length : 0,
                        value.length,
                    ]),
                ],
            };
    }
    focusInput() {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll: true });
        }
    }
    updateSearch(search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    }
    updateValueWithNewCountryCode(prevCountryCode, newCountryCode) {
        if (!this.isTextValue) {
            this.value = this.value.replace(prevCountryCode, newCountryCode);
            this.nativeValue = maskitoTransform(this.value, this.maskOptions);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputPhoneComponent, selector: "tui-input-phone", inputs: { phoneMaskAfterCountryCode: "phoneMaskAfterCountryCode", allowText: "allowText", search: "search", countryCodeSetter: ["countryCode", "countryCodeSetter"] }, outputs: { searchChange: "searchChange" }, host: { properties: { "attr.data-size": "size" } }, providers: [
            tuiAsFocusableItemAccessor(TuiInputPhoneComponent),
            tuiAsControl(TuiInputPhoneComponent),
            tuiAsDataListHost(TuiInputPhoneComponent),
        ], queries: [{ propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "dropdown", first: true, predicate: TuiDropdownOpen, descendants: true }, { propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, hostDirectives: [{ directive: i1.TuiDropdownFixed }], ngImport: i0, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"canOpen\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"focusable\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"maskOptions\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldCleaner]=\"canClean\"\n        [(value)]=\"nativeValue\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n    </tui-primitive-textfield>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host._disabled,:host :host-context(*:disabled){pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}\n"], dependencies: [{ kind: "directive", type: i2.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { kind: "component", type: i3.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i3.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "directive", type: i4.TuiTextfieldCleanerDirective, selector: "[tuiTextfieldCleaner]", inputs: ["tuiTextfieldCleaner"] }, { kind: "directive", type: i4.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { kind: "directive", type: i4.TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "directive", type: i1.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i1.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiInputPhoneComponent.prototype, "calculateMask", null);
export { TuiInputPhoneComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPhoneComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-input-phone', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiInputPhoneComponent),
                        tuiAsControl(TuiInputPhoneComponent),
                        tuiAsDataListHost(TuiInputPhoneComponent),
                    ], hostDirectives: [TuiDropdownFixed], host: {
                        '[attr.data-size]': 'size',
                    }, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"datalist || ''\"\n    [tuiDropdownEnabled]=\"canOpen\"\n    [(tuiDropdownOpen)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"focusable\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"maskOptions\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldCleaner]=\"canClean\"\n        [(value)]=\"nativeValue\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n    </tui-primitive-textfield>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host._disabled,:host :host-context(*:disabled){pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}\n"] }]
        }], propDecorators: { dropdown: [{
                type: ViewChild,
                args: [TuiDropdownOpen]
            }], textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], datalist: [{
                type: ContentChild,
                args: [TuiDataListDirective, { read: TemplateRef }]
            }], phoneMaskAfterCountryCode: [{
                type: Input
            }], allowText: [{
                type: Input
            }], search: [{
                type: Input
            }], searchChange: [{
                type: Output
            }], countryCodeSetter: [{
                type: Input,
                args: ['countryCode']
            }], calculateMask: [] } });
//# sourceMappingURL=data:application/json;base64,
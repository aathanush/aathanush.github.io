import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, inject, Input, signal, ViewChild, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { maskitoDateTimeOptionsGenerator, maskitoSelectionChangeHandler, } from '@maskito/kit';
import { TUI_FALSE_HANDLER } from '@taiga-ui/cdk/constants';
import { DATE_FILLER_LENGTH, tuiDateClamp, TuiDay, TuiMonth, TuiTime, } from '@taiga-ui/cdk/date-time';
import { tuiWatch } from '@taiga-ui/cdk/observables';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiClamp } from '@taiga-ui/cdk/utils/math';
import { changeDateSeparator, tuiNullableSame, tuiPure, } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DATE_FORMAT, TUI_DEFAULT_DATE_FORMAT } from '@taiga-ui/core/tokens';
import { TUI_DATE_TEXTS, TUI_DATE_TIME_VALUE_TRANSFORMER, TUI_INPUT_DATE_OPTIONS, TUI_TIME_TEXTS, tuiDateStreamWithTransformer, } from '@taiga-ui/kit/tokens';
import { AbstractTuiControl, tuiAsControl } from '@taiga-ui/legacy/classes';
import { TuiPrimitiveTextfieldComponent } from '@taiga-ui/legacy/components/primitive-textfield';
import { TUI_TEXTFIELD_SIZE } from '@taiga-ui/legacy/directives';
import { tuiAsFocusableItemAccessor } from '@taiga-ui/legacy/tokens';
import { TUI_DATE_MODE_MASKITO_ADAPTER } from '@taiga-ui/legacy/utils';
import { BehaviorSubject, combineLatest, map, timer } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@maskito/angular";
import * as i3 from "@taiga-ui/polymorpheus";
import * as i4 from "@taiga-ui/core/components/calendar";
import * as i5 from "@taiga-ui/legacy/components/primitive-textfield";
import * as i6 from "@taiga-ui/legacy/directives";
import * as i7 from "@taiga-ui/core/components/icon";
import * as i8 from "@taiga-ui/core/directives/appearance";
import * as i9 from "@taiga-ui/core/directives/dropdown";
import * as i10 from "./native-date-time/native-date-time.directive";
const DATE_TIME_SEPARATOR = ', ';
class TuiInputDateTimeComponent extends AbstractTuiControl {
    constructor() {
        super(...arguments);
        this.options = inject(TUI_INPUT_DATE_OPTIONS);
        this.textfieldSize = inject(TUI_TEXTFIELD_SIZE);
        this.month = null;
        this.timeMode$ = new BehaviorSubject('HH:MM');
        this.nativeValue = signal('');
        this.timeTexts$ = inject(TUI_TIME_TEXTS);
        this.dateTexts$ = inject(TUI_DATE_TEXTS);
        this.valueTransformer = inject(TUI_DATE_TIME_VALUE_TRANSFORMER, { optional: true });
        this.filler$ = combineLatest([
            this.dateTexts$.pipe(map((dateTexts) => changeDateSeparator(dateTexts[this.dateFormat.mode], this.dateFormat.separator))),
            this.timeTexts$,
            this.timeMode$,
        ]).pipe(map(([dateFiller, timeTexts, timeMode]) => this.getDateTimeString(dateFiller, timeTexts[timeMode])));
        this.dateFormat = TUI_DEFAULT_DATE_FORMAT;
        this.isMobile = inject(TUI_IS_MOBILE);
        this.dateFormat$ = inject(TUI_DATE_FORMAT)
            .pipe(tuiWatch(this.cdr), takeUntilDestroyed())
            .subscribe((format) => {
            this.dateFormat = format;
        });
        this.min = this.options.min;
        this.max = this.options.max;
        this.disabledItemHandler = TUI_FALSE_HANDLER;
        this.defaultActiveYearMonth = TuiMonth.currentLocal();
        this.open = false;
    }
    set timeMode(value) {
        this.timeMode$.next(value);
    }
    get timeMode() {
        return this.timeMode$.value;
    }
    get nativeFocusableElement() {
        return this.textfield?.nativeFocusableElement ?? null;
    }
    get focused() {
        return !!this.textfield?.focused;
    }
    get computedValue() {
        const { value, nativeValue, timeMode } = this;
        const [date, time] = value ?? [null, null];
        const hasTimeInputChars = nativeValue().length > DATE_FILLER_LENGTH;
        if (!date || (!time && hasTimeInputChars)) {
            return nativeValue();
        }
        return this.getDateTimeString(date, time, timeMode);
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
    writeValue(value) {
        const transformed = this.valueTransformer
            ? this.valueTransformer.fromControlValue(value)
            : value;
        if (this.value === null && transformed === this.value) {
            return;
        }
        if (transformed?.[0]) {
            super.writeValue(value);
        }
        else {
            super.writeValue(null);
        }
        this.nativeValue.set(this.value && (this.value[0] || this.value[1]) ? this.computedValue : '');
    }
    onValueChange(value) {
        this.nativeValue.set(value);
        if (this.control) {
            this.control.updateValueAndValidity({ emitEvent: false });
        }
        if (!value) {
            this.onOpenChange(true);
        }
        if (value.length < DATE_FILLER_LENGTH) {
            this.value = null;
            return;
        }
        const [date = '', time] = value.split(DATE_TIME_SEPARATOR);
        const parsedDate = TuiDay.normalizeParse(date, this.dateFormat.mode);
        const parsedTime = time && time.length === this.timeMode.length
            ? TuiTime.fromString(time)
            : null;
        this.open = false;
        this.value = time && !parsedTime ? null : [parsedDate, parsedTime];
    }
    get size() {
        return this.textfieldSize.size;
    }
    get computedMin() {
        return this.toTuiDay(this.min, this.options.min);
    }
    get computedMax() {
        return this.toTuiDay(this.max, this.options.max);
    }
    get fillerLength() {
        return DATE_FILLER_LENGTH + DATE_TIME_SEPARATOR.length + this.timeMode.length;
    }
    get maskOptions() {
        return this.calculateMask(this.computedMin, this.computedMax, this.timeMode, this.dateFormat.mode, this.dateFormat.separator);
    }
    get calendarIcon() {
        return this.options.icon;
    }
    get showNativePicker() {
        return this.nativePicker && this.timeMode === 'HH:MM';
    }
    get calendarValue() {
        return this.value?.[0] ?? null;
    }
    get calendarMinDay() {
        const min = this.computedMin;
        return Array.isArray(min) ? min[0] : min;
    }
    get calendarMaxDay() {
        const max = this.computedMax;
        return Array.isArray(max) ? max[0] : max;
    }
    get computedActiveYearMonth() {
        const { computedMin, computedMax } = this;
        return (this.month ||
            this.value?.[0] ||
            tuiDateClamp(this.defaultActiveYearMonth, Array.isArray(computedMin) ? computedMin[0] : computedMin, Array.isArray(computedMax) ? computedMax[0] : computedMax));
    }
    onClick() {
        this.open = !this.open;
    }
    onDayClick(day) {
        const modifiedTime = (this.value?.[1] && this.clampTime(this.value?.[1], day)) ?? null;
        const newCaretIndex = DATE_FILLER_LENGTH + DATE_TIME_SEPARATOR.length;
        this.value = [day, modifiedTime];
        this.nativeValue.update((x) => this.getDateTimeString(day, x.split(DATE_TIME_SEPARATOR)[1] || ''));
        setTimeout(() => this.nativeFocusableElement?.setSelectionRange(newCaretIndex, newCaretIndex));
        this.open = false;
    }
    onMonthChange(month) {
        this.month = month;
    }
    onOpenChange(open) {
        this.open = open;
    }
    onFocused(focused) {
        this.updateFocused(focused);
        if (focused) {
            return;
        }
        timer(0)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.nativeValue.update((x) => this.trimTrailingSeparator(x));
        });
        if (this.nativeValue().length === this.fillerLength ||
            this.timeMode === 'HH:MM') {
            return;
        }
        const [date = '', time] = this.nativeValue().split(DATE_TIME_SEPARATOR);
        if (!time) {
            return;
        }
        const parsedTime = TuiTime.fromString(time);
        const parsedDate = TuiDay.normalizeParse(date, this.dateFormat.mode);
        this.value = !parsedDate || !parsedTime ? null : [parsedDate, parsedTime];
    }
    getFallbackValue() {
        return null;
    }
    valueIdenticalComparator(oldValue, newValue) {
        return (tuiNullableSame(oldValue?.[0] ?? null, newValue?.[0] ?? null, (a, b) => a.daySame(b)) &&
            tuiNullableSame(oldValue?.[1] ?? null, newValue?.[1] ?? null, (a, b) => String(a) === String(b)));
    }
    get nativePicker() {
        return this.options.nativePicker && this.isMobile;
    }
    calculateMask(min, max, timeMode, dateFormat, dateSeparator) {
        const options = maskitoDateTimeOptionsGenerator({
            timeMode,
            dateSeparator,
            dateMode: TUI_DATE_MODE_MASKITO_ADAPTER[dateFormat],
            min: this.toNativeDate(min),
            max: this.toNativeDate(max),
        });
        const inputModeSwitchPlugin = maskitoSelectionChangeHandler((element) => {
            element.inputMode =
                element.selectionStart >=
                    DATE_FILLER_LENGTH + DATE_TIME_SEPARATOR.length + timeMode.indexOf(' AA')
                    ? 'text'
                    : 'numeric';
        });
        return {
            ...options,
            plugins: options.plugins.concat(timeMode.includes('AA') ? inputModeSwitchPlugin : []),
        };
    }
    getDateTimeString(date, time, timeMode = 'HH:MM') {
        const dateString = date instanceof TuiDay
            ? date.toString(this.dateFormat.mode, this.dateFormat.separator)
            : date;
        const timeString = time instanceof TuiTime ? time.toString(timeMode) : time || '';
        return timeString
            ? `${dateString}${DATE_TIME_SEPARATOR}${timeString}`
            : dateString;
    }
    clampTime(time, day) {
        const { computedMin, computedMax } = this;
        const ms = time.toAbsoluteMilliseconds();
        const min = Array.isArray(computedMin) && day.daySame(this.calendarMinDay)
            ? computedMin[1].toAbsoluteMilliseconds()
            : -Infinity;
        const max = Array.isArray(computedMax) && day.daySame(this.calendarMaxDay)
            ? computedMax[1].toAbsoluteMilliseconds()
            : Infinity;
        return TuiTime.fromAbsoluteMilliseconds(tuiClamp(ms, min, max));
    }
    trimTrailingSeparator(value) {
        return value.replace(new RegExp(`(\\${this.dateFormat.separator}|${DATE_TIME_SEPARATOR}|\\.)$`), '');
    }
    toNativeDate(value) {
        if (!Array.isArray(value)) {
            return value.toLocalNativeDate();
        }
        const [{ year, month, day }, { hours, minutes, seconds, ms }] = value;
        return new Date(year, month, day, hours, minutes, seconds, ms);
    }
    toTuiDay(value, fallback) {
        if (!value) {
            return fallback;
        }
        if (!Array.isArray(value)) {
            return value;
        }
        const [tuiDay, tuiTime] = value;
        if (!tuiDay) {
            return fallback;
        }
        if (!tuiTime) {
            return tuiDay;
        }
        return value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateTimeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputDateTimeComponent, selector: "tui-input-date-time", inputs: { min: "min", max: "max", disabledItemHandler: "disabledItemHandler", defaultActiveYearMonth: "defaultActiveYearMonth", timeMode: "timeMode" }, host: { listeners: { "click": "onClick()" }, properties: { "attr.data-size": "size" } }, providers: [
            tuiAsFocusableItemAccessor(TuiInputDateTimeComponent),
            tuiAsControl(TuiInputDateTimeComponent),
            tuiDateStreamWithTransformer(TUI_DATE_TIME_VALUE_TRANSFORMER),
        ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownEnabled]=\"interactive && !showNativePicker\"\n    [tuiDropdownOpen]=\"open && interactive\"\n    (tuiDropdownOpenChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-input-date-time__textfield\"\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"maskOptions\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"pseudoFocus\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldFiller]=\"(filler$ | async) || ''\"\n        [tuiTextfieldIcon]=\"calendarIcon && iconContent\"\n        [value]=\"computedValue\"\n        (focusedChange)=\"onFocused($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n    </tui-primitive-textfield>\n\n    <ng-template #iconContent>\n        <tui-icon\n            *polymorpheusOutlet=\"calendarIcon as src; context: {$implicit: size}\"\n            tuiAppearance=\"icon\"\n            [class.t-icon_small]=\"size === 's'\"\n            [class.t-icon]=\"!computedDisabled\"\n            [icon]=\"src.toString()\"\n        />\n        <input\n            *ngIf=\"showNativePicker\"\n            tuiDateTime\n            class=\"t-native-input\"\n        />\n    </ng-template>\n\n    <ng-template\n        #dropdown=\"polymorpheus\"\n        [polymorpheus]=\"type\"\n    >\n        <tui-calendar\n            automation-id=\"tui-input-date-time__calendar\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [max]=\"calendarMaxDay\"\n            [min]=\"calendarMinDay\"\n            [month]=\"computedActiveYearMonth\"\n            [value]=\"calendarValue\"\n            (dayClick)=\"onDayClick($event)\"\n            (monthChange)=\"onMonthChange($event)\"\n            (mousedown.prevent.zoneless)=\"(0)\"\n        />\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host :host-context(*:disabled){pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-icon_small{border-width:.25rem}.t-button{display:flex;block-size:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-border-normal)}.t-native-input{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0;pointer-events:auto;font-size:2rem}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.MaskitoDirective, selector: "[maskito]", inputs: ["maskito", "maskitoElement"] }, { kind: "directive", type: i3.PolymorpheusOutlet, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { kind: "directive", type: i3.PolymorpheusTemplate, selector: "ng-template[polymorpheus]", inputs: ["polymorpheus"], exportAs: ["polymorpheus"] }, { kind: "component", type: i4.TuiCalendar, selector: "tui-calendar", inputs: ["month", "disabledItemHandler", "min", "max", "minViewedMonth", "maxViewedMonth", "hoveredItem", "showAdjacent", "markerHandler", "value", "initialView"], outputs: ["dayClick", "monthChange", "hoveredItemChange"] }, { kind: "component", type: i5.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "iconCleaner", "readOnly", "invalid", "disabled", "value"], outputs: ["valueChange"] }, { kind: "directive", type: i5.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { kind: "directive", type: i6.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { kind: "directive", type: i6.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { kind: "directive", type: i6.TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: ["tuiTextfieldFiller"] }, { kind: "directive", type: i6.TuiLegacyDropdownOpenMonitorDirective, selector: "[tuiDropdownOpenMonitor]" }, { kind: "component", type: i7.TuiIcon, selector: "tui-icon", inputs: ["icon", "background"] }, { kind: "directive", type: i8.TuiAppearance, selector: "[tuiAppearance]", inputs: ["tuiAppearance", "tuiAppearanceState", "tuiAppearanceFocus", "tuiAppearanceMode"] }, { kind: "directive", type: i9.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { kind: "directive", type: i9.TuiDropdownOpen, selector: "[tuiDropdown][tuiDropdownOpen],[tuiDropdown][tuiDropdownOpenChange]", inputs: ["tuiDropdownEnabled", "tuiDropdownOpen"], outputs: ["tuiDropdownOpenChange"] }, { kind: "directive", type: i10.TuiNativeDateTimeDirective, selector: "input[tuiDateTime]" }, { kind: "pipe", type: i1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
__decorate([
    tuiPure
], TuiInputDateTimeComponent.prototype, "calculateMask", null);
__decorate([
    tuiPure
], TuiInputDateTimeComponent.prototype, "getDateTimeString", null);
export { TuiInputDateTimeComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateTimeComponent, decorators: [{
            type: Component,
            args: [{ standalone: false, selector: 'tui-input-date-time', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsFocusableItemAccessor(TuiInputDateTimeComponent),
                        tuiAsControl(TuiInputDateTimeComponent),
                        tuiDateStreamWithTransformer(TUI_DATE_TIME_VALUE_TRANSFORMER),
                    ], host: {
                        '[attr.data-size]': 'size',
                        '(click)': 'onClick()',
                    }, template: "<div\n    tuiDropdownOpenMonitor\n    class=\"t-hosted\"\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownEnabled]=\"interactive && !showNativePicker\"\n    [tuiDropdownOpen]=\"open && interactive\"\n    (tuiDropdownOpenChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-input-date-time__textfield\"\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [disabled]=\"computedDisabled\"\n        [invalid]=\"computedInvalid\"\n        [maskito]=\"maskOptions\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"pseudoFocus\"\n        [pseudoHover]=\"pseudoHover\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldFiller]=\"(filler$ | async) || ''\"\n        [tuiTextfieldIcon]=\"calendarIcon && iconContent\"\n        [value]=\"computedValue\"\n        (focusedChange)=\"onFocused($event)\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content />\n        <ng-content\n            ngProjectAs=\"input\"\n            select=\"input\"\n        />\n    </tui-primitive-textfield>\n\n    <ng-template #iconContent>\n        <tui-icon\n            *polymorpheusOutlet=\"calendarIcon as src; context: {$implicit: size}\"\n            tuiAppearance=\"icon\"\n            [class.t-icon_small]=\"size === 's'\"\n            [class.t-icon]=\"!computedDisabled\"\n            [icon]=\"src.toString()\"\n        />\n        <input\n            *ngIf=\"showNativePicker\"\n            tuiDateTime\n            class=\"t-native-input\"\n        />\n    </ng-template>\n\n    <ng-template\n        #dropdown=\"polymorpheus\"\n        [polymorpheus]=\"type\"\n    >\n        <tui-calendar\n            automation-id=\"tui-input-date-time__calendar\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [max]=\"calendarMaxDay\"\n            [min]=\"calendarMinDay\"\n            [month]=\"computedActiveYearMonth\"\n            [value]=\"calendarValue\"\n            (dayClick)=\"onDayClick($event)\"\n            (monthChange)=\"onMonthChange($event)\"\n            (mousedown.prevent.zoneless)=\"(0)\"\n        />\n    </ng-template>\n</div>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:start}:host :host-context(*:disabled){pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}.t-icon_small{border-width:.25rem}.t-button{display:flex;block-size:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-border-normal)}.t-native-input{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;opacity:0;pointer-events:auto;font-size:2rem}\n"] }]
        }], propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], defaultActiveYearMonth: [{
                type: Input
            }], timeMode: [{
                type: Input
            }], calculateMask: [], getDateTimeString: [] } });
//# sourceMappingURL=data:application/json;base64,
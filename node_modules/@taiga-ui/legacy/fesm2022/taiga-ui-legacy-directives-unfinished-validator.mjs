import { TuiValidationError } from '@taiga-ui/cdk/classes';
import { tuiIsHTMLElement, tuiIsInput } from '@taiga-ui/cdk/utils/dom';
import * as i0 from '@angular/core';
import { inject, INJECTOR, Directive, Input } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { NG_VALIDATORS } from '@angular/forms';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DEFAULT_ERROR_MESSAGE } from '@taiga-ui/core/tokens';
import { TUI_FOCUSABLE_ITEM_ACCESSOR } from '@taiga-ui/legacy/tokens';

function tuiCreateUnfinishedValidator(nativeInputGetter, message) {
    return ({ value, }) => {
        const nativeInput = nativeInputGetter();
        return value === null &&
            nativeInput &&
            tuiIsHTMLElement(nativeInput.nativeFocusableElement) &&
            tuiIsInput(nativeInput.nativeFocusableElement) &&
            nativeInput.nativeFocusableElement.value !== ''
            ? { unfinished: new TuiValidationError(message) }
            : null;
    };
}

class TuiUnfinishedValidator {
    constructor() {
        this.default = toSignal(inject(TUI_DEFAULT_ERROR_MESSAGE));
        this.injector = inject(INJECTOR);
        this.tuiUnfinishedValidator = '';
        this.validate = tuiCreateUnfinishedValidator(() => this.injector.get(TUI_FOCUSABLE_ITEM_ACCESSOR), () => this.tuiUnfinishedValidator || this.default());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiUnfinishedValidator, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiUnfinishedValidator, isStandalone: true, selector: "[tuiUnfinishedValidator]", inputs: { tuiUnfinishedValidator: "tuiUnfinishedValidator" }, providers: [tuiProvide(NG_VALIDATORS, TuiUnfinishedValidator, true)], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiUnfinishedValidator, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiUnfinishedValidator]',
                    providers: [tuiProvide(NG_VALIDATORS, TuiUnfinishedValidator, true)],
                }]
        }], propDecorators: { tuiUnfinishedValidator: [{
                type: Input
            }] } });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiUnfinishedValidator, tuiCreateUnfinishedValidator };
//# sourceMappingURL=taiga-ui-legacy-directives-unfinished-validator.mjs.map

import { TuiControl } from '@taiga-ui/cdk/classes';
import type { TuiTextfieldAccessor } from '@taiga-ui/core/components/textfield';
import type { TuiItemsHandlers } from '@taiga-ui/core/directives/items-handlers';
import { tuiIsFlat } from '@taiga-ui/kit/utils';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/textfield";
export declare class TuiNativeSelect<T> extends TuiControl<T | null> implements TuiTextfieldAccessor<T> {
    private readonly textfield;
    protected readonly isFlat: typeof tuiIsFlat;
    protected readonly placeholder: import("@angular/core").WritableSignal<string>;
    protected readonly itemsHandlers: TuiItemsHandlers<T>;
    protected readonly stringified: import("@angular/core").Signal<string>;
    protected readonly showPlaceholder: import("@angular/core").Signal<boolean | "">;
    protected readonly isSelected: import("@angular/core").Signal<(x: T) => boolean>;
    protected readonly valueEffect: import("@angular/core").EffectRef;
    items: ReadonlyArray<readonly T[]> | readonly T[] | null;
    labels: readonly string[];
    set placeholderSetter(x: string);
    setValue(value: T | null): void;
    protected selectOption(index: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiNativeSelect<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiNativeSelect<any>, "select[tuiSelect]", never, { "items": { "alias": "items"; "required": false; }; "labels": { "alias": "labels"; "required": false; }; "placeholderSetter": { "alias": "placeholder"; "required": false; }; }, {}, never, never, true, [{ directive: typeof i1.TuiWithTextfield; inputs: {}; outputs: {}; }]>;
}

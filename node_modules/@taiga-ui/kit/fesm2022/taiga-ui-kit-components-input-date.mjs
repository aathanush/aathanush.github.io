import { TuiCalendar } from '@taiga-ui/core/components/calendar';
import { NgIf } from '@angular/common';
import * as i0 from '@angular/core';
import { inject, effect, Directive, computed, signal, Input, Component, ViewEncapsulation, ChangeDetectionStrategy } from '@angular/core';
import { TUI_FIRST_DAY, TUI_LAST_DAY, DATE_FILLER_LENGTH, TuiDay } from '@taiga-ui/cdk/date-time';
import * as i1 from '@taiga-ui/core/components/textfield';
import { TuiTextfieldDirective, tuiInjectAuxiliary, TuiTextfieldComponent, tuiTextfieldIconBinding, TuiWithTextfield, TuiTextfieldContent } from '@taiga-ui/core/components/textfield';
import { toSignal } from '@angular/core/rxjs-interop';
import * as i4 from '@maskito/angular';
import { MaskitoDirective } from '@maskito/angular';
import { maskitoDateOptionsGenerator } from '@maskito/kit';
import { TUI_IDENTITY_VALUE_TRANSFORMER, TuiControl, tuiAsControl, tuiValueTransformerFrom } from '@taiga-ui/cdk/classes';
import { TUI_ALLOW_SIGNAL_WRITES } from '@taiga-ui/cdk/constants';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiProvide, tuiDirectiveBinding, changeDateSeparator } from '@taiga-ui/cdk/utils/miscellaneous';
import * as i2 from '@taiga-ui/core/directives/dropdown';
import { tuiDropdownOpen, tuiDropdownEnabled, TuiDropdownAuto } from '@taiga-ui/core/directives/dropdown';
import { TuiItemsHandlersDirective } from '@taiga-ui/core/directives/items-handlers';
import { TUI_DATE_FORMAT, TUI_DEFAULT_DATE_FORMAT } from '@taiga-ui/core/tokens';
import { TUI_DATE_TEXTS } from '@taiga-ui/kit/tokens';
import { tuiMaskito } from '@taiga-ui/kit/utils';
import { tuiCreateOptions } from '@taiga-ui/cdk/utils/di';
import { NG_VALIDATORS } from '@angular/forms';
import { TuiValidator } from '@taiga-ui/cdk/directives/validator';

const TUI_INPUT_DATE_DEFAULT_OPTIONS_NEW = {
    icon: () => '@tui.calendar',
    min: TUI_FIRST_DAY,
    max: TUI_LAST_DAY,
    valueTransformer: TUI_IDENTITY_VALUE_TRANSFORMER,
};
const [TUI_INPUT_DATE_OPTIONS_NEW, tuiInputDateOptionsProviderNew] = tuiCreateOptions(TUI_INPUT_DATE_DEFAULT_OPTIONS_NEW);

class TuiInputDateValidator extends TuiValidator {
    constructor() {
        super(...arguments);
        this.handlers = inject(TuiItemsHandlersDirective);
        this.update = effect(() => {
            this.handlers.disabledItemHandler();
            this.onChange();
        }, TUI_ALLOW_SIGNAL_WRITES);
        this.validate = ({ value }) => value && this.handlers.disabledItemHandler()(value)
            ? { tuiDisabledDate: value }
            : null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputDateValidator, isStandalone: true, providers: [tuiProvide(NG_VALIDATORS, TuiInputDateValidator, true)], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateValidator, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    providers: [tuiProvide(NG_VALIDATORS, TuiInputDateValidator, true)],
                }]
        }] });

const ADAPTER = {
    DMY: 'dd/mm/yyyy',
    MDY: 'mm/dd/yyyy',
    YMD: 'yyyy/mm/dd',
};
class TuiInputDateDirective extends TuiControl {
    constructor() {
        super(...arguments);
        this.el = tuiInjectElement();
        this.mobile = inject(TUI_IS_MOBILE);
        this.options = inject(TUI_INPUT_DATE_OPTIONS_NEW);
        this.handlers = inject(TuiItemsHandlersDirective);
        this.textfield = inject(TuiTextfieldDirective);
        this.texts = toSignal(inject(TUI_DATE_TEXTS));
        this.calendar = tuiInjectAuxiliary((x) => x instanceof TuiCalendar);
        this.filler = tuiDirectiveBinding(TuiTextfieldComponent, 'fillerSetter', computed(() => {
            const { mode, separator } = this.format();
            const texts = this.texts() || '';
            return texts && changeDateSeparator(texts[mode], separator);
        }), {});
        this.open = tuiDropdownOpen();
        this.icon = tuiTextfieldIconBinding(TUI_INPUT_DATE_OPTIONS_NEW);
        this.dropdownEnabled = tuiDropdownEnabled(computed(() => !this.native && this.interactive()));
        this.format = toSignal(inject(TUI_DATE_FORMAT), {
            initialValue: TUI_DEFAULT_DATE_FORMAT,
        });
        this.mask = tuiMaskito(computed(() => maskitoDateOptionsGenerator({
            separator: this.format().separator,
            mode: ADAPTER[this.format().mode],
            min: this.min().toLocalNativeDate(),
            max: this.max().toLocalNativeDate(),
        })));
        this.valueEffect = effect(() => {
            const value = this.value()?.toString(this.format().mode, this.format().separator) ??
                this.el.value;
            this.textfield.value.set(value);
        }, TUI_ALLOW_SIGNAL_WRITES);
        this.calendarIn = effect(() => {
            const calendar = this.calendar();
            if (!calendar) {
                return;
            }
            calendar.value = this.value();
            calendar.disabledItemHandler = this.handlers.disabledItemHandler();
            calendar.min = this.min();
            calendar.max = this.max();
        }, TUI_ALLOW_SIGNAL_WRITES);
        this.calendarOut = effect((onCleanup) => {
            const subscription = this.calendar()?.dayClick.subscribe((day) => {
                this.onChange(day);
                this.open.set(false);
            });
            onCleanup(() => subscription?.unsubscribe());
        });
        this.native = this.el.type === 'date' && this.mobile;
        this.min = signal(this.options.min);
        this.max = signal(this.options.max);
    }
    set minSetter(min) {
        this.min.set(min || this.options.min);
    }
    set maxSetter(max) {
        this.max.set(max || this.options.max);
    }
    onClick() {
        if (!this.mobile) {
            this.open.update((open) => !open);
        }
    }
    onValueChange(value) {
        this.control?.control?.updateValueAndValidity({ emitEvent: false });
        this.onChange(value.length !== DATE_FILLER_LENGTH
            ? null
            : TuiDay.normalizeParse(value, this.format().mode));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputDateDirective, isStandalone: true, selector: "input[tuiInputDate]", inputs: { minSetter: ["min", "minSetter"], maxSetter: ["max", "maxSetter"] }, host: { listeners: { "blur": "onTouched()", "input": "onValueChange($event.target.value)", "click.capture.stop": "onClick()" }, properties: { "attr.inputmode": "open() ? \"none\" : \"numeric\"", "disabled": "disabled()" } }, providers: [
            tuiAsControl(TuiInputDateDirective),
            tuiValueTransformerFrom(TUI_INPUT_DATE_OPTIONS_NEW),
        ], usesInheritance: true, hostDirectives: [{ directive: i1.TuiWithTextfield }, { directive: i2.TuiDropdownAuto }, { directive: TuiInputDateValidator }, { directive: i4.MaskitoDirective }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[tuiInputDate]',
                    providers: [
                        tuiAsControl(TuiInputDateDirective),
                        tuiValueTransformerFrom(TUI_INPUT_DATE_OPTIONS_NEW),
                    ],
                    hostDirectives: [
                        TuiWithTextfield,
                        TuiDropdownAuto,
                        TuiInputDateValidator,
                        MaskitoDirective,
                    ],
                    host: {
                        '[attr.inputmode]': 'open() ? "none" : "numeric"',
                        '[disabled]': 'disabled()',
                        '(blur)': 'onTouched()',
                        '(input)': 'onValueChange($event.target.value)',
                        '(click.capture.stop)': 'onClick()',
                    },
                }]
        }], propDecorators: { minSetter: [{
                type: Input,
                args: ['min']
            }], maxSetter: [{
                type: Input,
                args: ['max']
            }] } });

class TuiInputDateComponent {
    constructor() {
        this.host = inject(TuiInputDateDirective);
        this.list = null;
    }
    onInput(value) {
        if (!value) {
            return this.host.onChange(null);
        }
        const [year = 0, month = 0, day = 0] = value.split('-').map(Number);
        this.host.onChange(new TuiDay(year, month - 1, day));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputDateComponent, isStandalone: true, selector: "input[tuiInputDate][type=\"date\"]", inputs: { list: "list" }, host: { attributes: { "ngSkipHydration": "true" }, properties: { "type": "\"text\"", "attr.list": "null" } }, ngImport: i0, template: "<ng-container *ngIf=\"host.native\">\n    <input\n        *tuiTextfieldContent\n        type=\"date\"\n        [attr.list]=\"list\"\n        [max]=\"host.max().toJSON()\"\n        [min]=\"host.min().toJSON()\"\n        [value]=\"host.value()?.toJSON()\"\n        (click.stop.zoneless)=\"(0)\"\n        (input)=\"onInput($any($event.target).value)\"\n        (pointerdown.stop.zoneless)=\"(0)\"\n    />\n</ng-container>\n", styles: ["tui-textfield input[tuiInputDate]~.t-content input[type=date]{position:absolute;top:0;left:auto;right:0;bottom:0;inline-size:2.5rem;padding:0;opacity:0}tui-textfield input[tuiInputDate]~.t-content input[type=date]::-webkit-calendar-picker-indicator{position:absolute;top:0;left:0;inline-size:100%;block-size:100%}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: TuiTextfieldContent, selector: "ng-template[tuiTextfieldContent]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'input[tuiInputDate][type="date"]', imports: [NgIf, TuiTextfieldContent], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        ngSkipHydration: 'true',
                        '[type]': '"text"',
                        '[attr.list]': 'null',
                    }, template: "<ng-container *ngIf=\"host.native\">\n    <input\n        *tuiTextfieldContent\n        type=\"date\"\n        [attr.list]=\"list\"\n        [max]=\"host.max().toJSON()\"\n        [min]=\"host.min().toJSON()\"\n        [value]=\"host.value()?.toJSON()\"\n        (click.stop.zoneless)=\"(0)\"\n        (input)=\"onInput($any($event.target).value)\"\n        (pointerdown.stop.zoneless)=\"(0)\"\n    />\n</ng-container>\n", styles: ["tui-textfield input[tuiInputDate]~.t-content input[type=date]{position:absolute;top:0;left:auto;right:0;bottom:0;inline-size:2.5rem;padding:0;opacity:0}tui-textfield input[tuiInputDate]~.t-content input[type=date]::-webkit-calendar-picker-indicator{position:absolute;top:0;left:0;inline-size:100%;block-size:100%}\n"] }]
        }], propDecorators: { list: [{
                type: Input
            }] } });

const TuiInputDate = [
    TuiInputDateDirective,
    TuiInputDateComponent,
    TuiInputDateValidator,
    TuiCalendar,
];

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_INPUT_DATE_DEFAULT_OPTIONS_NEW, TUI_INPUT_DATE_OPTIONS_NEW, TuiInputDate, TuiInputDateComponent, TuiInputDateDirective, TuiInputDateValidator, tuiInputDateOptionsProviderNew };
//# sourceMappingURL=taiga-ui-kit-components-input-date.mjs.map

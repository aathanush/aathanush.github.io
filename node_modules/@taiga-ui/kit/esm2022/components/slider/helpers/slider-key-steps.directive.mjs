import { __decorate } from "tslib";
import { Directive, forwardRef, inject, INJECTOR, Input, signal } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { NgControl } from '@angular/forms';
import { TuiControl } from '@taiga-ui/cdk/classes';
import { tuiControlValue } from '@taiga-ui/cdk/observables';
import { tuiFallbackValueProvider } from '@taiga-ui/cdk/tokens';
import { tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { switchMap, timer } from 'rxjs';
import { TuiSliderComponent } from '../slider.component';
import { tuiCreateKeyStepsTransformer } from './key-steps';
import * as i0 from "@angular/core";
class TuiSliderKeyStepsBase {
    constructor() {
        this.injector = inject(INJECTOR);
        this.control = inject(NgControl, { self: true, optional: true });
        this.step = 1;
        this.transformer = signal(null);
        this.value = toSignal(timer(0) // https://github.com/angular/angular/issues/54418
            .pipe(switchMap(() => tuiControlValue(this.control))));
    }
    get slider() {
        return this.injector.get(TuiSliderComponent);
    }
    set keySteps(steps) {
        this.transformer.set(steps && tuiCreateKeyStepsTransformer(steps, this.slider));
        this.min = steps?.[0][1];
        this.max = steps?.[steps.length - 1]?.[1];
    }
    /**
     * TODO(v5): standardize logic between `TuiSlider` & `TuiInputSlider` (for non-linear slider `step` means percentage)
     * Add these host-bindings to `TuiSliderKeyStepsBase`:
     * ```
     * host: {
     *     '[attr.min]': '0',
     *     '[attr.step]': '1',
     *     '[attr.max]': 'totalSteps',
     * },
     * ```
     */
    get totalSteps() {
        /**
         * Not-integer amount of steps is invalid usage of native sliders
         * ```html
         * <input type="range" [max]="100" [step]="3.33" />
         * ```
         * (impossible to select 100; 99.9 is max allowed value)
         */
        return this.step ? Math.round(100 / this.step) : Infinity;
    }
    takeStep(coefficient) {
        const newValue = this.slider.value + coefficient;
        return (this.transformer()?.toControlValue(this.slider.value + coefficient) ??
            newValue);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSliderKeyStepsBase, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "16.2.12", type: TuiSliderKeyStepsBase, isStandalone: true, selector: "input[tuiSlider][keySteps]", inputs: { step: ["step", "step", (x) => (x === 'any' ? null : x)], keySteps: "keySteps" }, host: { properties: { "attr.aria-valuemin": "min", "attr.aria-valuemax": "max", "attr.aria-valuenow": "value()" } }, ngImport: i0 }); }
}
__decorate([
    tuiPure
], TuiSliderKeyStepsBase.prototype, "slider", null);
export { TuiSliderKeyStepsBase };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSliderKeyStepsBase, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[tuiSlider][keySteps]',
                    host: {
                        '[attr.aria-valuemin]': 'min',
                        '[attr.aria-valuemax]': 'max',
                        '[attr.aria-valuenow]': 'value()',
                    },
                }]
        }], propDecorators: { step: [{
                type: Input,
                args: [{ transform: (x) => (x === 'any' ? null : x) }]
            }], slider: [], keySteps: [{
                type: Input
            }] } });
class TuiSliderKeySteps extends TuiControl {
    constructor() {
        super(...arguments);
        this.slider = inject(forwardRef(() => TuiSliderComponent));
    }
    set keySteps(steps) {
        this.transformer = tuiCreateKeyStepsTransformer(steps, this.slider);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSliderKeySteps, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiSliderKeySteps, isStandalone: true, selector: "input[tuiSlider][keySteps][ngModel],input[tuiSlider][keySteps][formControl],input[tuiSlider][keySteps][formControlName]", inputs: { keySteps: "keySteps" }, host: { listeners: { "blur": "onTouched()", "input": "onChange($event.target.value)", "change": "onChange($event.target.value)" }, properties: { "value": "value()", "disabled": "disabled()" } }, providers: [tuiFallbackValueProvider(0)], usesInheritance: true, ngImport: i0 }); }
}
export { TuiSliderKeySteps };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSliderKeySteps, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[tuiSlider][keySteps][ngModel],input[tuiSlider][keySteps][formControl],input[tuiSlider][keySteps][formControlName]',
                    providers: [tuiFallbackValueProvider(0)],
                    host: {
                        '[value]': 'value()',
                        '[disabled]': 'disabled()',
                        '(blur)': 'onTouched()',
                        '(input)': 'onChange($event.target.value)',
                        '(change)': 'onChange($event.target.value)',
                    },
                }]
        }], propDecorators: { keySteps: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
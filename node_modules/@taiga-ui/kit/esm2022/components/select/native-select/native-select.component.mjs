import { NgForOf, NgIf, NgTemplateOutlet } from '@angular/common';
import { ChangeDetectionStrategy, Component, computed, effect, inject, Input, signal, } from '@angular/core';
import { tuiAsControl, TuiControl } from '@taiga-ui/cdk/classes';
import { TUI_ALLOW_SIGNAL_WRITES } from '@taiga-ui/cdk/constants';
import { tuiIsPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAsTextfieldAccessor, TuiTextfieldDirective, TuiWithTextfield, } from '@taiga-ui/core/components/textfield';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/core/directives/items-handlers';
import { tuiIsFlat } from '@taiga-ui/kit/utils';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/textfield";
class TuiNativeSelect extends TuiControl {
    constructor() {
        super(...arguments);
        this.textfield = inject(TuiTextfieldDirective);
        this.isFlat = tuiIsFlat;
        this.placeholder = signal('');
        this.itemsHandlers = inject(TUI_ITEMS_HANDLERS);
        this.stringified = computed((value = this.value()) => tuiIsPresent(value) ? this.itemsHandlers.stringify()(value) : '');
        this.showPlaceholder = computed(() => this.placeholder() && !this.stringified());
        this.isSelected = computed((value = this.value()) => (x) => tuiIsPresent(value) && this.itemsHandlers.identityMatcher()(x, value));
        this.valueEffect = effect(() => {
            this.textfield.value.set(this.stringified());
        }, TUI_ALLOW_SIGNAL_WRITES);
        this.items = [];
        this.labels = [];
    }
    // TODO(v5): use signal inputs
    set placeholderSetter(x) {
        this.placeholder.set(x);
    }
    setValue(value) {
        this.onChange(value);
    }
    selectOption(index) {
        const items = (this.items?.flat() ?? []);
        this.onChange(items[index - (this.showPlaceholder() ? 1 : 0)] ?? null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeSelect, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiNativeSelect, isStandalone: true, selector: "select[tuiSelect]", inputs: { items: "items", labels: "labels", placeholderSetter: ["placeholder", "placeholderSetter"] }, host: { listeners: { "change": "selectOption($event.target.options.selectedIndex)" }, properties: { "attr.aria-invalid": "invalid()", "disabled": "!interactive()" } }, providers: [tuiAsTextfieldAccessor(TuiNativeSelect), tuiAsControl(TuiNativeSelect)], usesInheritance: true, hostDirectives: [{ directive: i1.TuiWithTextfield }], ngImport: i0, template: "<option\n    *ngIf=\"showPlaceholder()\"\n    disabled\n    selected\n    value=\"\"\n>\n    {{ placeholder() }}\n</option>\n\n<ng-container *ngIf=\"items && !isFlat(items); else flatItems\">\n    <optgroup\n        *ngFor=\"let group of labels; let index = index\"\n        [label]=\"labels[index]\"\n    >\n        <ng-container *ngTemplateOutlet=\"options; context: {$implicit: items[index]}\" />\n    </optgroup>\n</ng-container>\n\n<ng-template #flatItems>\n    <ng-container *ngTemplateOutlet=\"options; context: {$implicit: items}\" />\n</ng-template>\n\n<ng-template\n    #options\n    let-items\n>\n    <option\n        *ngFor=\"let option of items\"\n        [disabled]=\"itemsHandlers.disabledItemHandler()(option)\"\n        [selected]=\"isSelected()(option)\"\n        [value]=\"itemsHandlers.stringify()(option)\"\n    >\n        {{ itemsHandlers.stringify()(option) }}\n    </option>\n</ng-template>\n", dependencies: [{ kind: "directive", type: NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiNativeSelect };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiNativeSelect, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'select[tuiSelect]', imports: [NgForOf, NgIf, NgTemplateOutlet], changeDetection: ChangeDetectionStrategy.OnPush, providers: [tuiAsTextfieldAccessor(TuiNativeSelect), tuiAsControl(TuiNativeSelect)], hostDirectives: [TuiWithTextfield], host: {
                        '[attr.aria-invalid]': 'invalid()',
                        '[disabled]': '!interactive()',
                        '(change)': 'selectOption($event.target.options.selectedIndex)',
                    }, template: "<option\n    *ngIf=\"showPlaceholder()\"\n    disabled\n    selected\n    value=\"\"\n>\n    {{ placeholder() }}\n</option>\n\n<ng-container *ngIf=\"items && !isFlat(items); else flatItems\">\n    <optgroup\n        *ngFor=\"let group of labels; let index = index\"\n        [label]=\"labels[index]\"\n    >\n        <ng-container *ngTemplateOutlet=\"options; context: {$implicit: items[index]}\" />\n    </optgroup>\n</ng-container>\n\n<ng-template #flatItems>\n    <ng-container *ngTemplateOutlet=\"options; context: {$implicit: items}\" />\n</ng-template>\n\n<ng-template\n    #options\n    let-items\n>\n    <option\n        *ngFor=\"let option of items\"\n        [disabled]=\"itemsHandlers.disabledItemHandler()(option)\"\n        [selected]=\"isSelected()(option)\"\n        [value]=\"itemsHandlers.stringify()(option)\"\n    >\n        {{ itemsHandlers.stringify()(option) }}\n    </option>\n</ng-template>\n" }]
        }], propDecorators: { items: [{
                type: Input
            }], labels: [{
                type: Input
            }], placeholderSetter: [{
                type: Input,
                args: ['placeholder']
            }] } });
//# sourceMappingURL=data:application/json;base64,
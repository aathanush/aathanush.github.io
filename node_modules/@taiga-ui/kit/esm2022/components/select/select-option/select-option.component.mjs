import { ChangeDetectionStrategy, Component, computed, inject } from '@angular/core';
import { TuiControl } from '@taiga-ui/cdk/classes';
import { tuiDirectiveBinding, tuiIsPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_DATA_LIST_HOST, TuiOptionWithValue, } from '@taiga-ui/core/components/data-list';
import { TuiScrollIntoView } from '@taiga-ui/core/components/scrollbar';
import { tuiInjectAuxiliary } from '@taiga-ui/core/components/textfield';
import { TuiIcons } from '@taiga-ui/core/directives/icons';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/core/directives/items-handlers';
import { TUI_COMMON_ICONS } from '@taiga-ui/core/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/scrollbar";
class TuiSelectOption {
    constructor() {
        this.host = inject(TUI_DATA_LIST_HOST);
        this.itemsHandlers = inject(TUI_ITEMS_HANDLERS);
        this.control = tuiInjectAuxiliary((x) => x instanceof TuiControl);
        this.option = inject(TuiOptionWithValue, {
            optional: true,
        });
        this.icon = this.option &&
            tuiDirectiveBinding(TuiIcons, 'iconEnd', inject(TUI_COMMON_ICONS).check, {});
        this.selected = computed((controlValue = this.control()?.value(), optionValue = this.option?.value()) => tuiIsPresent(optionValue) &&
            tuiIsPresent(controlValue) &&
            this.itemsHandlers.identityMatcher()(controlValue, optionValue));
        this.scrolled = tuiDirectiveBinding(TuiScrollIntoView, 'tuiScrollIntoView', this.selected);
    }
    onClick() {
        const value = this.option?.value();
        if (this.host?.handleOption && value !== undefined) {
            this.host.handleOption(value);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectOption, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiSelectOption, isStandalone: true, selector: "ng-component", host: { listeners: { "click": "onClick()" }, properties: { "class._value": "option", "class._selected": "selected()" } }, hostDirectives: [{ directive: i1.TuiScrollIntoView }], ngImport: i0, template: '', isInline: true, styles: [":host._value:after{color:var(--tui-text-action);opacity:0}:host-context(tui-data-list[data-size=\"s\"]) :host._value:after{margin-inline-end:-.625rem}:host-context(tui-data-list[data-size=\"m\"]) :host._value:after,:host-context(tui-data-list[data-size=\"l\"]) :host._value:after{margin-inline-end:-.5rem}:host-context(tui-data-list[data-size=\"l\"]) :host._value:after{font-size:1.5rem}:host._value._selected:after{opacity:1}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiSelectOption };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiSelectOption, decorators: [{
            type: Component,
            args: [{ standalone: true, template: '', changeDetection: ChangeDetectionStrategy.OnPush, hostDirectives: [TuiScrollIntoView], host: {
                        '[class._value]': 'option',
                        '[class._selected]': 'selected()',
                        '(click)': 'onClick()',
                    }, styles: [":host._value:after{color:var(--tui-text-action);opacity:0}:host-context(tui-data-list[data-size=\"s\"]) :host._value:after{margin-inline-end:-.625rem}:host-context(tui-data-list[data-size=\"m\"]) :host._value:after,:host-context(tui-data-list[data-size=\"l\"]) :host._value:after{margin-inline-end:-.5rem}:host-context(tui-data-list[data-size=\"l\"]) :host._value:after{font-size:1.5rem}:host._value._selected:after{opacity:1}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LW9wdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy9zZWxlY3Qvc2VsZWN0LW9wdGlvbi9zZWxlY3Qtb3B0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkYsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBQyxtQkFBbUIsRUFBRSxZQUFZLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUVwRixPQUFPLEVBQ0gsa0JBQWtCLEVBQ2xCLGtCQUFrQixHQUNyQixNQUFNLHFDQUFxQyxDQUFDO0FBQzdDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQ3RFLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHFDQUFxQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUV6RCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQztBQUM1RSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBRXZELE1BWWEsZUFBZTtJQVo1QjtRQWFxQixTQUFJLEdBQUcsTUFBTSxDQUFxQixrQkFBa0IsQ0FBQyxDQUFDO1FBQ3RELGtCQUFhLEdBQXdCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2hFLFlBQU8sR0FBRyxrQkFBa0IsQ0FDekMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsWUFBWSxVQUFVLENBQ2pDLENBQUM7UUFFaUIsV0FBTSxHQUFHLE1BQU0sQ0FBd0Isa0JBQWtCLEVBQUU7WUFDMUUsUUFBUSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBRWdCLFNBQUksR0FDbkIsSUFBSSxDQUFDLE1BQU07WUFDWCxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUU5RCxhQUFRLEdBQUcsUUFBUSxDQUNsQyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUMzRSxZQUFZLENBQUMsV0FBVyxDQUFDO1lBQ3pCLFlBQVksQ0FBQyxZQUFZLENBQUM7WUFDMUIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQ3RFLENBQUM7UUFFaUIsYUFBUSxHQUFHLG1CQUFtQixDQUM3QyxpQkFBaUIsRUFDakIsbUJBQW1CLEVBQ25CLElBQUksQ0FBQyxRQUFRLENBQ2hCLENBQUM7S0FTTDtJQVBhLE9BQU87UUFDYixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDO1FBRW5DLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxZQUFZLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQztJQUNMLENBQUM7K0dBbENRLGVBQWU7bUdBQWYsZUFBZSx5UEFWZCxFQUFFOztTQVVILGVBQWU7NEZBQWYsZUFBZTtrQkFaM0IsU0FBUztpQ0FDTSxJQUFJLFlBQ04sRUFBRSxtQkFFSyx1QkFBdUIsQ0FBQyxNQUFNLGtCQUMvQixDQUFDLGlCQUFpQixDQUFDLFFBQzdCO3dCQUNGLGdCQUFnQixFQUFFLFFBQVE7d0JBQzFCLG1CQUFtQixFQUFFLFlBQVk7d0JBQ2pDLFNBQVMsRUFBRSxXQUFXO3FCQUN6QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgY29tcHV0ZWQsIGluamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUNvbnRyb2x9IGZyb20gJ0B0YWlnYS11aS9jZGsvY2xhc3Nlcyc7XG5pbXBvcnQge3R1aURpcmVjdGl2ZUJpbmRpbmcsIHR1aUlzUHJlc2VudH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB0eXBlIHtUdWlEYXRhTGlzdEhvc3R9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvZGF0YS1saXN0JztcbmltcG9ydCB7XG4gICAgVFVJX0RBVEFfTElTVF9IT1NULFxuICAgIFR1aU9wdGlvbldpdGhWYWx1ZSxcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvY29tcG9uZW50cy9kYXRhLWxpc3QnO1xuaW1wb3J0IHtUdWlTY3JvbGxJbnRvVmlld30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvY29tcG9uZW50cy9zY3JvbGxiYXInO1xuaW1wb3J0IHt0dWlJbmplY3RBdXhpbGlhcnl9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvdGV4dGZpZWxkJztcbmltcG9ydCB7VHVpSWNvbnN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvaWNvbnMnO1xuaW1wb3J0IHR5cGUge1R1aUl0ZW1zSGFuZGxlcnN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvaXRlbXMtaGFuZGxlcnMnO1xuaW1wb3J0IHtUVUlfSVRFTVNfSEFORExFUlN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvaXRlbXMtaGFuZGxlcnMnO1xuaW1wb3J0IHtUVUlfQ09NTU9OX0lDT05TfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHRlbXBsYXRlOiAnJyxcbiAgICBzdHlsZVVybHM6IFsnLi9zZWxlY3Qtb3B0aW9uLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBob3N0RGlyZWN0aXZlczogW1R1aVNjcm9sbEludG9WaWV3XSxcbiAgICBob3N0OiB7XG4gICAgICAgICdbY2xhc3MuX3ZhbHVlXSc6ICdvcHRpb24nLFxuICAgICAgICAnW2NsYXNzLl9zZWxlY3RlZF0nOiAnc2VsZWN0ZWQoKScsXG4gICAgICAgICcoY2xpY2spJzogJ29uQ2xpY2soKScsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU2VsZWN0T3B0aW9uPFQ+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGhvc3QgPSBpbmplY3Q8VHVpRGF0YUxpc3RIb3N0PFQ+PihUVUlfREFUQV9MSVNUX0hPU1QpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaXRlbXNIYW5kbGVyczogVHVpSXRlbXNIYW5kbGVyczxUPiA9IGluamVjdChUVUlfSVRFTVNfSEFORExFUlMpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY29udHJvbCA9IHR1aUluamVjdEF1eGlsaWFyeTxUdWlDb250cm9sPFQ+PihcbiAgICAgICAgKHgpID0+IHggaW5zdGFuY2VvZiBUdWlDb250cm9sLFxuICAgICk7XG5cbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgb3B0aW9uID0gaW5qZWN0PFR1aU9wdGlvbldpdGhWYWx1ZTxUPj4oVHVpT3B0aW9uV2l0aFZhbHVlLCB7XG4gICAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGljb24gPVxuICAgICAgICB0aGlzLm9wdGlvbiAmJlxuICAgICAgICB0dWlEaXJlY3RpdmVCaW5kaW5nKFR1aUljb25zLCAnaWNvbkVuZCcsIGluamVjdChUVUlfQ09NTU9OX0lDT05TKS5jaGVjaywge30pO1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IHNlbGVjdGVkID0gY29tcHV0ZWQoXG4gICAgICAgIChjb250cm9sVmFsdWUgPSB0aGlzLmNvbnRyb2woKT8udmFsdWUoKSwgb3B0aW9uVmFsdWUgPSB0aGlzLm9wdGlvbj8udmFsdWUoKSkgPT5cbiAgICAgICAgICAgIHR1aUlzUHJlc2VudChvcHRpb25WYWx1ZSkgJiZcbiAgICAgICAgICAgIHR1aUlzUHJlc2VudChjb250cm9sVmFsdWUpICYmXG4gICAgICAgICAgICB0aGlzLml0ZW1zSGFuZGxlcnMuaWRlbnRpdHlNYXRjaGVyKCkoY29udHJvbFZhbHVlLCBvcHRpb25WYWx1ZSksXG4gICAgKTtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSBzY3JvbGxlZCA9IHR1aURpcmVjdGl2ZUJpbmRpbmcoXG4gICAgICAgIFR1aVNjcm9sbEludG9WaWV3LFxuICAgICAgICAndHVpU2Nyb2xsSW50b1ZpZXcnLFxuICAgICAgICB0aGlzLnNlbGVjdGVkLFxuICAgICk7XG5cbiAgICBwcm90ZWN0ZWQgb25DbGljaygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLm9wdGlvbj8udmFsdWUoKTtcblxuICAgICAgICBpZiAodGhpcy5ob3N0Py5oYW5kbGVPcHRpb24gJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5ob3N0LmhhbmRsZU9wdGlvbih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=
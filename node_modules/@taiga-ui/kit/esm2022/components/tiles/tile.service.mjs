import { isPlatformBrowser } from '@angular/common';
import { inject, Injectable, PLATFORM_ID } from '@angular/core';
import { MutationObserverService } from '@ng-web-apis/mutation-observer';
import { ResizeObserverService } from '@ng-web-apis/resize-observer';
import { tuiZonefreeScheduler } from '@taiga-ui/cdk/observables';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiArrayShallowEquals, tuiPx } from '@taiga-ui/cdk/utils/miscellaneous';
import { BehaviorSubject, combineLatest, debounceTime, distinctUntilChanged, map, startWith, Subscription, } from 'rxjs';
import { TuiTilesComponent } from './tiles.component';
import * as i0 from "@angular/core";
class TuiTileService {
    constructor() {
        this.isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
        this.el = tuiInjectElement();
        this.tiles = inject(TuiTilesComponent);
        this.sub = new Subscription();
        this.offset$ = new BehaviorSubject([NaN, NaN]);
        this.position$ = combineLatest([
            this.offset$.pipe(distinctUntilChanged(tuiArrayShallowEquals)),
            inject(ResizeObserverService).pipe(startWith(null)),
            inject(MutationObserverService).pipe(startWith(null)),
            this.tiles.order$.pipe(debounceTime(0, tuiZonefreeScheduler())),
        ]).pipe(map(([offset]) => offset));
    }
    init(element) {
        if (this.isBrowser) {
            this.sub.add(this.position$.subscribe((offset) => {
                this.setPosition(element, offset);
                this.setRect(element, offset);
            }));
        }
        else {
            this.el.style.setProperty('position', 'relative');
        }
    }
    setOffset(offset) {
        this.offset$.next(offset);
    }
    ngOnDestroy() {
        this.sub.unsubscribe();
    }
    getRect([left, top]) {
        const elTop = Number.isNaN(top) ? this.el.offsetTop : top;
        const elLeft = Number.isNaN(left) ? this.el.offsetLeft : left;
        const rect = {
            top: elTop,
            left: elLeft,
            width: this.el.clientWidth,
            height: this.el.clientHeight,
            right: NaN,
            bottom: NaN,
            y: elTop,
            x: elLeft,
        };
        return {
            ...rect,
            toJSON: () => JSON.stringify(rect),
        };
    }
    setRect({ style }, offset) {
        const { top, left, width, height } = this.getRect(offset);
        style.top = tuiPx(top);
        style.left = tuiPx(left);
        style.width = tuiPx(width);
        style.height = tuiPx(height);
    }
    setPosition(element, [left]) {
        if (!Number.isNaN(left)) {
            element.style.setProperty('position', 'fixed');
            element.style.setProperty('transition', 'none');
            return;
        }
        const { style } = element;
        const rect = element.getBoundingClientRect();
        const host = this.el.getBoundingClientRect();
        style.removeProperty('position');
        style.removeProperty('transition');
        style.removeProperty('top');
        style.removeProperty('left');
        style.top = tuiPx(rect.top - host.top + this.el.offsetTop);
        style.left = tuiPx(rect.left - host.left + this.el.offsetLeft);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTileService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTileService }); }
}
export { TuiTileService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTileService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,
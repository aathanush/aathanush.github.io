import { Directive, effect, inject } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { TUI_ALLOW_SIGNAL_WRITES } from '@taiga-ui/cdk/constants';
import { TuiValidator } from '@taiga-ui/cdk/directives/validator';
import { tuiProvide } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiItemsHandlersDirective } from '@taiga-ui/core/directives/items-handlers';
import * as i0 from "@angular/core";
class TuiInputDateValidator extends TuiValidator {
    constructor() {
        super(...arguments);
        this.handlers = inject(TuiItemsHandlersDirective);
        this.update = effect(() => {
            this.handlers.disabledItemHandler();
            this.onChange();
        }, TUI_ALLOW_SIGNAL_WRITES);
        this.validate = ({ value }) => value && this.handlers.disabledItemHandler()(value)
            ? { tuiDisabledDate: value }
            : null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputDateValidator, isStandalone: true, providers: [tuiProvide(NG_VALIDATORS, TuiInputDateValidator, true)], usesInheritance: true, ngImport: i0 }); }
}
export { TuiInputDateValidator };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateValidator, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    providers: [tuiProvide(NG_VALIDATORS, TuiInputDateValidator, true)],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZGF0ZS52YWxpZGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy9pbnB1dC1kYXRlL2lucHV0LWRhdGUudmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV4RCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDaEUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQ2hFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUM3RCxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQzs7QUFFbkYsTUFJYSxxQkFBc0IsU0FBUSxZQUFZO0lBSnZEOztRQUtxQixhQUFRLEdBQUcsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFFM0MsV0FBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNwQixDQUFDLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUVaLGFBQVEsR0FBZ0IsQ0FBQyxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUUsQ0FDaEQsS0FBSyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDL0MsQ0FBQyxDQUFDLEVBQUMsZUFBZSxFQUFFLEtBQUssRUFBQztZQUMxQixDQUFDLENBQUMsSUFBSSxDQUFDO0tBQ2xCOytHQVpZLHFCQUFxQjttR0FBckIscUJBQXFCLGlDQUZuQixDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxDQUFDLENBQUM7O1NBRTFELHFCQUFxQjs0RkFBckIscUJBQXFCO2tCQUpqQyxTQUFTO21CQUFDO29CQUNQLFVBQVUsRUFBRSxJQUFJO29CQUNoQixTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsYUFBYSx5QkFBeUIsSUFBSSxDQUFDLENBQUM7aUJBQ3RFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIGVmZmVjdCwgaW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB0eXBlIHtWYWxpZGF0b3JGbn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtOR19WQUxJREFUT1JTfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1RVSV9BTExPV19TSUdOQUxfV1JJVEVTfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NvbnN0YW50cyc7XG5pbXBvcnQge1R1aVZhbGlkYXRvcn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9kaXJlY3RpdmVzL3ZhbGlkYXRvcic7XG5pbXBvcnQge3R1aVByb3ZpZGV9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQge1R1aUl0ZW1zSGFuZGxlcnNEaXJlY3RpdmV9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvaXRlbXMtaGFuZGxlcnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHByb3ZpZGVyczogW3R1aVByb3ZpZGUoTkdfVkFMSURBVE9SUywgVHVpSW5wdXREYXRlVmFsaWRhdG9yLCB0cnVlKV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUlucHV0RGF0ZVZhbGlkYXRvciBleHRlbmRzIFR1aVZhbGlkYXRvciB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBoYW5kbGVycyA9IGluamVjdChUdWlJdGVtc0hhbmRsZXJzRGlyZWN0aXZlKTtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSB1cGRhdGUgPSBlZmZlY3QoKCkgPT4ge1xuICAgICAgICB0aGlzLmhhbmRsZXJzLmRpc2FibGVkSXRlbUhhbmRsZXIoKTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSgpO1xuICAgIH0sIFRVSV9BTExPV19TSUdOQUxfV1JJVEVTKTtcblxuICAgIHB1YmxpYyBvdmVycmlkZSB2YWxpZGF0ZTogVmFsaWRhdG9yRm4gPSAoe3ZhbHVlfSkgPT5cbiAgICAgICAgdmFsdWUgJiYgdGhpcy5oYW5kbGVycy5kaXNhYmxlZEl0ZW1IYW5kbGVyKCkodmFsdWUpXG4gICAgICAgICAgICA/IHt0dWlEaXNhYmxlZERhdGU6IHZhbHVlfVxuICAgICAgICAgICAgOiBudWxsO1xufVxuIl19
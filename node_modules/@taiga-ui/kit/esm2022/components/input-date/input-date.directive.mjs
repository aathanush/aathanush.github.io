import { computed, Directive, effect, inject, Input, signal } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { MaskitoDirective } from '@maskito/angular';
import { maskitoDateOptionsGenerator } from '@maskito/kit';
import { tuiAsControl, TuiControl, tuiValueTransformerFrom } from '@taiga-ui/cdk/classes';
import { TUI_ALLOW_SIGNAL_WRITES } from '@taiga-ui/cdk/constants';
import { DATE_FILLER_LENGTH, TuiDay } from '@taiga-ui/cdk/date-time';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { changeDateSeparator, tuiDirectiveBinding, } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiCalendar } from '@taiga-ui/core/components/calendar';
import { tuiInjectAuxiliary, TuiTextfieldComponent, TuiTextfieldDirective, tuiTextfieldIconBinding, TuiWithTextfield, } from '@taiga-ui/core/components/textfield';
import { TuiDropdownAuto, tuiDropdownEnabled, tuiDropdownOpen, } from '@taiga-ui/core/directives/dropdown';
import { TuiItemsHandlersDirective } from '@taiga-ui/core/directives/items-handlers';
import { TUI_DATE_FORMAT, TUI_DEFAULT_DATE_FORMAT } from '@taiga-ui/core/tokens';
import { TUI_DATE_TEXTS } from '@taiga-ui/kit/tokens';
import { tuiMaskito } from '@taiga-ui/kit/utils';
import { TUI_INPUT_DATE_OPTIONS_NEW } from './input-date.options';
import { TuiInputDateValidator } from './input-date.validator';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/textfield";
import * as i2 from "@taiga-ui/core/directives/dropdown";
import * as i3 from "./input-date.validator";
import * as i4 from "@maskito/angular";
const ADAPTER = {
    DMY: 'dd/mm/yyyy',
    MDY: 'mm/dd/yyyy',
    YMD: 'yyyy/mm/dd',
};
class TuiInputDateDirective extends TuiControl {
    constructor() {
        super(...arguments);
        this.el = tuiInjectElement();
        this.mobile = inject(TUI_IS_MOBILE);
        this.options = inject(TUI_INPUT_DATE_OPTIONS_NEW);
        this.handlers = inject(TuiItemsHandlersDirective);
        this.textfield = inject(TuiTextfieldDirective);
        this.texts = toSignal(inject(TUI_DATE_TEXTS));
        this.calendar = tuiInjectAuxiliary((x) => x instanceof TuiCalendar);
        this.filler = tuiDirectiveBinding(TuiTextfieldComponent, 'fillerSetter', computed(() => {
            const { mode, separator } = this.format();
            const texts = this.texts() || '';
            return texts && changeDateSeparator(texts[mode], separator);
        }), {});
        this.open = tuiDropdownOpen();
        this.icon = tuiTextfieldIconBinding(TUI_INPUT_DATE_OPTIONS_NEW);
        this.dropdownEnabled = tuiDropdownEnabled(computed(() => !this.native && this.interactive()));
        this.format = toSignal(inject(TUI_DATE_FORMAT), {
            initialValue: TUI_DEFAULT_DATE_FORMAT,
        });
        this.mask = tuiMaskito(computed(() => maskitoDateOptionsGenerator({
            separator: this.format().separator,
            mode: ADAPTER[this.format().mode],
            min: this.min().toLocalNativeDate(),
            max: this.max().toLocalNativeDate(),
        })));
        this.valueEffect = effect(() => {
            const value = this.value()?.toString(this.format().mode, this.format().separator) ??
                this.el.value;
            this.textfield.value.set(value);
        }, TUI_ALLOW_SIGNAL_WRITES);
        this.calendarIn = effect(() => {
            const calendar = this.calendar();
            if (!calendar) {
                return;
            }
            calendar.value = this.value();
            calendar.disabledItemHandler = this.handlers.disabledItemHandler();
            calendar.min = this.min();
            calendar.max = this.max();
        }, TUI_ALLOW_SIGNAL_WRITES);
        this.calendarOut = effect((onCleanup) => {
            const subscription = this.calendar()?.dayClick.subscribe((day) => {
                this.onChange(day);
                this.open.set(false);
            });
            onCleanup(() => subscription?.unsubscribe());
        });
        this.native = this.el.type === 'date' && this.mobile;
        this.min = signal(this.options.min);
        this.max = signal(this.options.max);
    }
    set minSetter(min) {
        this.min.set(min || this.options.min);
    }
    set maxSetter(max) {
        this.max.set(max || this.options.max);
    }
    onClick() {
        if (!this.mobile) {
            this.open.update((open) => !open);
        }
    }
    onValueChange(value) {
        this.control?.control?.updateValueAndValidity({ emitEvent: false });
        this.onChange(value.length !== DATE_FILLER_LENGTH
            ? null
            : TuiDay.normalizeParse(value, this.format().mode));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputDateDirective, isStandalone: true, selector: "input[tuiInputDate]", inputs: { minSetter: ["min", "minSetter"], maxSetter: ["max", "maxSetter"] }, host: { listeners: { "blur": "onTouched()", "input": "onValueChange($event.target.value)", "click.capture.stop": "onClick()" }, properties: { "attr.inputmode": "open() ? \"none\" : \"numeric\"", "disabled": "disabled()" } }, providers: [
            tuiAsControl(TuiInputDateDirective),
            tuiValueTransformerFrom(TUI_INPUT_DATE_OPTIONS_NEW),
        ], usesInheritance: true, hostDirectives: [{ directive: i1.TuiWithTextfield }, { directive: i2.TuiDropdownAuto }, { directive: i3.TuiInputDateValidator }, { directive: i4.MaskitoDirective }], ngImport: i0 }); }
}
export { TuiInputDateDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputDateDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[tuiInputDate]',
                    providers: [
                        tuiAsControl(TuiInputDateDirective),
                        tuiValueTransformerFrom(TUI_INPUT_DATE_OPTIONS_NEW),
                    ],
                    hostDirectives: [
                        TuiWithTextfield,
                        TuiDropdownAuto,
                        TuiInputDateValidator,
                        MaskitoDirective,
                    ],
                    host: {
                        '[attr.inputmode]': 'open() ? "none" : "numeric"',
                        '[disabled]': 'disabled()',
                        '(blur)': 'onTouched()',
                        '(input)': 'onValueChange($event.target.value)',
                        '(click.capture.stop)': 'onClick()',
                    },
                }]
        }], propDecorators: { minSetter: [{
                type: Input,
                args: ['min']
            }], maxSetter: [{
                type: Input,
                args: ['max']
            }] } });
//# sourceMappingURL=data:application/json;base64,
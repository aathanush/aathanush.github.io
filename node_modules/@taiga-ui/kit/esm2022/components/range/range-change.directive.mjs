import { DOCUMENT } from '@angular/common';
import { Directive, EventEmitter, inject, Output } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { tuiTypedFromEvent } from '@taiga-ui/cdk/observables';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiClamp, tuiRound } from '@taiga-ui/cdk/utils/math';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/components/slider';
import { map, repeat, startWith, switchMap, takeUntil, tap } from 'rxjs';
import { TuiRange } from './range.component';
import * as i0 from "@angular/core";
class TuiRangeChange {
    constructor() {
        this.doc = inject(DOCUMENT);
        this.el = tuiInjectElement();
        this.range = inject(TuiRange);
        this.activeThumbChange = new EventEmitter();
        let activeThumb;
        tuiTypedFromEvent(this.el, 'pointerdown', {
            passive: true,
            capture: true,
        })
            .pipe(tap(({ clientX, target, pointerId }) => {
            activeThumb = this.detectActiveThumb(clientX, target);
            this.range.slidersRefs
                .get(activeThumb === 'left' ? 0 : 1)
                ?.nativeElement.setPointerCapture(pointerId);
            this.activeThumbChange.emit(activeThumb);
            if (this.range.focusable) {
                this.el.focus();
            }
        }), switchMap((event) => tuiTypedFromEvent(this.doc, 'pointermove').pipe(startWith(event))), map(({ clientX }) => this.getFractionFromEvents(clientX ?? 0)), takeUntil(tuiTypedFromEvent(this.doc, 'pointerup', { passive: true })), repeat(), takeUntilDestroyed())
            .subscribe((fraction) => {
            const value = this.range.toValue(fraction);
            this.range.processValue(value, activeThumb === 'right');
        });
    }
    getFractionFromEvents(clickClientX) {
        const hostRect = this.el.getBoundingClientRect();
        const value = clickClientX - hostRect.left;
        const total = hostRect.width;
        return tuiClamp(tuiRound(value / total, TUI_FLOATING_PRECISION), 0, 1);
    }
    detectActiveThumb(clientX, target) {
        const [leftSliderRef, rightSliderRef] = this.range.slidersRefs;
        switch (target) {
            case leftSliderRef?.nativeElement:
                return 'left';
            case rightSliderRef?.nativeElement:
                return 'right';
            default:
                return this.findNearestActiveThumb(clientX);
        }
    }
    findNearestActiveThumb(clientX) {
        const fraction = this.getFractionFromEvents(clientX);
        const deltaLeft = fraction * 100 - this.range.left();
        const deltaRight = fraction * 100 - 100 + this.range.right();
        return Math.abs(deltaLeft) > Math.abs(deltaRight) ||
            deltaRight > 0 ||
            (this.range.left() === 0 && this.range.right() === 100)
            ? 'right'
            : 'left';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiRangeChange, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiRangeChange, isStandalone: true, outputs: { activeThumbChange: "activeThumbChange" }, ngImport: i0 }); }
}
export { TuiRangeChange };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiRangeChange, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { activeThumbChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
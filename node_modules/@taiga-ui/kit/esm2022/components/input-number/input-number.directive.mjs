import { computed, Directive, effect, inject, Input, signal } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { MaskitoDirective } from '@maskito/angular';
import { maskitoInitialCalibrationPlugin } from '@maskito/core';
import { maskitoCaretGuard, maskitoNumberOptionsGenerator, maskitoParseNumber, } from '@maskito/kit';
import { tuiAsControl, TuiControl, tuiValueTransformerFrom } from '@taiga-ui/cdk/classes';
import { CHAR_HYPHEN, CHAR_MINUS, TUI_ALLOW_SIGNAL_WRITES } from '@taiga-ui/cdk/constants';
import { TUI_IS_IOS, tuiFallbackValueProvider } from '@taiga-ui/cdk/tokens';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiIsSafeToRound } from '@taiga-ui/cdk/utils/math';
import { TuiTextfieldDirective, TuiWithTextfield, } from '@taiga-ui/core/components/textfield';
import { TUI_DEFAULT_NUMBER_FORMAT, TUI_NUMBER_FORMAT } from '@taiga-ui/core/tokens';
import { tuiFormatNumber } from '@taiga-ui/core/utils/format';
import { tuiMaskito } from '@taiga-ui/kit/utils';
import { TUI_INPUT_NUMBER_OPTIONS } from './input-number.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/textfield";
import * as i2 from "@maskito/angular";
const DEFAULT_MAX_LENGTH = 18;
class TuiInputNumberDirective extends TuiControl {
    constructor() {
        super(...arguments);
        this.textfield = inject(TuiTextfieldDirective);
        this.isIOS = inject(TUI_IS_IOS);
        this.numberFormat = toSignal(inject(TUI_NUMBER_FORMAT), {
            initialValue: TUI_DEFAULT_NUMBER_FORMAT,
        });
        this.formatted = computed(() => maskitoParseNumber(this.textfield.value(), this.numberFormat().decimalSeparator));
        this.precision = computed(() => Number.isNaN(this.numberFormat().precision) ? 2 : this.numberFormat().precision);
        this.unfinished = computed((value = this.formatted()) => value < 0 ? value > this.max() : value < this.min());
        this.onChangeEffect = effect(() => {
            const value = this.formatted();
            if (Number.isNaN(value)) {
                this.onChange(null);
                return;
            }
            if (this.unfinished() ||
                value < this.min() ||
                value > this.max() ||
                this.value() === value) {
                return;
            }
            this.onChange(value);
        }, TUI_ALLOW_SIGNAL_WRITES);
        this.options = inject(TUI_INPUT_NUMBER_OPTIONS);
        this.element = tuiInjectElement();
        this.inputMode = computed(() => {
            if (this.isIOS && this.min() < 0) {
                // iPhone does not have minus sign if inputMode is equal to 'numeric' / 'decimal'
                return 'text';
            }
            return this.precision() ? 'decimal' : 'numeric';
        });
        this.defaultMaxLength = computed(() => {
            const { decimalSeparator, thousandSeparator } = this.numberFormat();
            const decimalPart = !!this.precision() && this.textfield.value().includes(decimalSeparator);
            const precision = decimalPart ? Math.min(this.precision() + 1, 20) : 0;
            const takeThousand = thousandSeparator.repeat(5).length;
            return DEFAULT_MAX_LENGTH + precision + takeThousand;
        });
        this.mask = tuiMaskito(computed(({ decimalMode, ...numberFormat } = this.numberFormat(), maximumFractionDigits = this.precision()) => this.computeMask({
            ...numberFormat,
            maximumFractionDigits,
            min: this.min(),
            max: this.max(),
            prefix: this.prefix(),
            postfix: this.postfix(),
            minimumFractionDigits: decimalMode === 'always' ? maximumFractionDigits : 0,
        })));
        this.min = signal(this.options.min);
        this.max = signal(this.options.max);
        this.prefix = signal(this.options.prefix);
        this.postfix = signal(this.options.postfix);
    }
    set minSetter(x) {
        this.updateMinMaxLimits(x, this.max());
    }
    set maxSetter(x) {
        this.updateMinMaxLimits(this.min(), x);
    }
    // TODO(v5): replace with signal input
    set prefixSetter(x) {
        this.prefix.set(x);
    }
    // TODO(v5): replace with signal input
    set postfixSetter(x) {
        this.postfix.set(x);
    }
    writeValue(value) {
        super.writeValue(value);
        this.setValue(this.value());
    }
    setValue(value) {
        this.textfield.value.set(this.formatNumber(value));
    }
    onBlur() {
        this.onTouched();
        if (!this.unfinished()) {
            this.setValue(this.value());
        }
    }
    onFocus() {
        if (Number.isNaN(this.formatted()) && !this.readOnly()) {
            this.textfield.value.set(this.prefix() + this.postfix());
        }
    }
    formatNumber(value) {
        if (value === null || Number.isNaN(value)) {
            return '';
        }
        return ((this.prefix() !== CHAR_MINUS ? this.prefix() : '') +
            tuiFormatNumber(value, {
                ...this.numberFormat(),
                /**
                 * Number can satisfy interval [Number.MIN_SAFE_INTEGER; Number.MAX_SAFE_INTEGER]
                 * but its rounding can violate it.
                 * Before BigInt support there is no perfect solution – only trade off.
                 * No rounding is better than lose precision and incorrect mutation of already valid value.
                 */
                precision: tuiIsSafeToRound(value, this.precision())
                    ? this.precision()
                    : Infinity,
            }).replace(CHAR_HYPHEN, CHAR_MINUS) +
            this.postfix());
    }
    updateMinMaxLimits(nullableMin, nullableMax) {
        const min = this.transformer.fromControlValue(nullableMin) ?? this.options.min;
        const max = this.transformer.fromControlValue(nullableMax) ?? this.options.max;
        this.min.set(Math.min(min, max));
        this.max.set(Math.max(min, max));
    }
    computeMask(params) {
        const { prefix = '', postfix = '' } = params;
        const { plugins, ...options } = maskitoNumberOptionsGenerator(params);
        const initialCalibrationPlugin = maskitoInitialCalibrationPlugin(maskitoNumberOptionsGenerator({
            ...params,
            min: Number.MIN_SAFE_INTEGER,
            max: Number.MAX_SAFE_INTEGER,
        }));
        return {
            ...options,
            plugins: [
                ...plugins,
                initialCalibrationPlugin,
                maskitoCaretGuard((value) => [
                    prefix.length,
                    value.length - postfix.length,
                ]),
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputNumberDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputNumberDirective, isStandalone: true, selector: "input[tuiInputNumber]", inputs: { minSetter: ["min", "minSetter"], maxSetter: ["max", "maxSetter"], prefixSetter: ["prefix", "prefixSetter"], postfixSetter: ["postfix", "postfixSetter"] }, host: { listeners: { "blur": "onBlur()", "focus": "onFocus()" }, properties: { "disabled": "disabled()", "attr.inputMode": "inputMode()", "attr.maxLength": "element.maxLength > 0 ? element.maxLength : defaultMaxLength()" } }, providers: [
            tuiAsControl(TuiInputNumberDirective),
            tuiFallbackValueProvider(null),
            tuiValueTransformerFrom(TUI_INPUT_NUMBER_OPTIONS),
        ], usesInheritance: true, hostDirectives: [{ directive: i1.TuiWithTextfield }, { directive: i2.MaskitoDirective }], ngImport: i0 }); }
}
export { TuiInputNumberDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputNumberDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[tuiInputNumber]',
                    providers: [
                        tuiAsControl(TuiInputNumberDirective),
                        tuiFallbackValueProvider(null),
                        tuiValueTransformerFrom(TUI_INPUT_NUMBER_OPTIONS),
                    ],
                    hostDirectives: [TuiWithTextfield, MaskitoDirective],
                    host: {
                        '[disabled]': 'disabled()',
                        '[attr.inputMode]': 'inputMode()',
                        '[attr.maxLength]': 'element.maxLength > 0 ? element.maxLength : defaultMaxLength()',
                        '(blur)': 'onBlur()',
                        '(focus)': 'onFocus()',
                    },
                }]
        }], propDecorators: { minSetter: [{
                type: Input,
                args: ['min']
            }], maxSetter: [{
                type: Input,
                args: ['max']
            }], prefixSetter: [{
                type: Input,
                args: ['prefix']
            }], postfixSetter: [{
                type: Input,
                args: ['postfix']
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Directive, effect, inject, Input, untracked } from '@angular/core';
import { tuiAsControl, TuiControl } from '@taiga-ui/cdk/classes';
import { TUI_ALLOW_SIGNAL_WRITES, TUI_STRICT_MATCHER } from '@taiga-ui/cdk/constants';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiIsString } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiAsOptionContent } from '@taiga-ui/core/components/data-list';
import { tuiAsTextfieldAccessor, tuiInjectAuxiliary, TuiTextfieldComponent, TuiTextfieldDirective, TuiWithTextfield, } from '@taiga-ui/core/components/textfield';
import { TuiDropdownDirective, tuiDropdownEnabled, tuiDropdownOpen, } from '@taiga-ui/core/directives/dropdown';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/core/directives/items-handlers';
import { tuiAsAuxiliary } from '@taiga-ui/core/tokens';
import { TuiSelectOption } from '@taiga-ui/kit/components/select';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/textfield";
class TuiComboBox extends TuiControl {
    constructor() {
        super(...arguments);
        this.el = tuiInjectElement();
        this.host = inject(TuiTextfieldComponent);
        this.textfield = inject(TuiTextfieldDirective);
        this.open = tuiDropdownOpen();
        this.dropdown = inject(TuiDropdownDirective);
        this.itemsHandlers = inject(TUI_ITEMS_HANDLERS);
        this.datalist = tuiInjectAuxiliary((x) => 'getOptions' in x);
        this.dropdownEnabled = tuiDropdownEnabled(this.interactive);
        this.valueEffect = effect(() => {
            const value = this.value() ?? '';
            const stringified = tuiIsString(value)
                ? value
                : this.itemsHandlers.stringify()(value);
            const match = this.match(stringified);
            this.textfield.value.update((x) => stringified || x);
            if (match) {
                setTimeout((end = this.el.value.length) => this.el.setSelectionRange(end, end));
            }
        }, TUI_ALLOW_SIGNAL_WRITES);
        this.blurEffect = effect(() => {
            const value = untracked(() => this.value());
            if (!this.host.focused() && this.strict && !value) {
                this.textfield.value.set('');
            }
        }, TUI_ALLOW_SIGNAL_WRITES);
        this.strict = true;
        this.matcher = TUI_STRICT_MATCHER;
    }
    setValue(value) {
        this.onChange(value);
        if (!value) {
            this.toggleDropdown(true);
            this.textfield.value.set('');
        }
    }
    toggleDropdown(open = !this.open()) {
        if (this.dropdownEnabled() && this.dropdown.content) {
            this.open.set(open);
        }
    }
    onInput(value) {
        const match = this.match(value);
        const fallback = this.strict || !value ? null : value;
        this.onChange(match ?? fallback);
        setTimeout(() => this.toggleDropdown(true));
    }
    keydownEnter(event) {
        if (!this.open()) {
            return;
        }
        event.preventDefault();
        if (this.options.length === 1) {
            this.onChange(this.options[0]);
            this.toggleDropdown(false);
        }
    }
    get options() {
        return this.datalist()?.getOptions() || [];
    }
    match(value) {
        return (this.options.find((item) => this.matcher?.(item, value, this.itemsHandlers.stringify())) ?? null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiComboBox, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiComboBox, isStandalone: true, selector: "input[tuiComboBox]", inputs: { strict: "strict", matcher: "matcher" }, host: { listeners: { "blur": "onTouched()", "click": "toggleDropdown()", "input": "onInput($event.target.value)", "keydown.enter": "keydownEnter($event)" }, properties: { "disabled": "disabled()" } }, providers: [
            tuiAsOptionContent(TuiSelectOption),
            tuiAsTextfieldAccessor(TuiComboBox),
            tuiAsControl(TuiComboBox),
            tuiAsAuxiliary(TuiComboBox),
        ], usesInheritance: true, hostDirectives: [{ directive: i1.TuiWithTextfield }], ngImport: i0 }); }
}
export { TuiComboBox };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiComboBox, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'input[tuiComboBox]',
                    providers: [
                        tuiAsOptionContent(TuiSelectOption),
                        tuiAsTextfieldAccessor(TuiComboBox),
                        tuiAsControl(TuiComboBox),
                        tuiAsAuxiliary(TuiComboBox),
                    ],
                    hostDirectives: [TuiWithTextfield],
                    host: {
                        '[disabled]': 'disabled()',
                        '(blur)': 'onTouched()',
                        '(click)': 'toggleDropdown()',
                        '(input)': 'onInput($event.target.value)',
                        '(keydown.enter)': 'keydownEnter($event)',
                    },
                }]
        }], propDecorators: { strict: [{
                type: Input
            }], matcher: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
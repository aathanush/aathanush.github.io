import { AsyncPipe, NgForOf, NgIf, NgTemplateOutlet } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, inject, Output, TemplateRef, } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { MutationObserverService, WA_MUTATION_OBSERVER_INIT, } from '@ng-web-apis/mutation-observer';
import { ResizeObserverService } from '@ng-web-apis/resize-observer';
import { EMPTY_QUERY } from '@taiga-ui/cdk/constants';
import { TuiItem } from '@taiga-ui/cdk/directives/item';
import { TuiItemsWithMoreDirective } from './items-with-more.directive';
import { TuiItemsWithMoreService } from './items-with-more.service';
import { TuiMore } from './more.directive';
import * as i0 from "@angular/core";
import * as i1 from "./items-with-more.directive";
class TuiItemsWithMoreComponent {
    constructor() {
        this.items = EMPTY_QUERY;
        this.directive = inject(TuiItemsWithMoreDirective);
        this.lastIndexChange = inject(TuiItemsWithMoreService);
        this.lastIndex = toSignal(this.lastIndexChange, {
            initialValue: 0,
        });
    }
    get isMoreHidden() {
        const { computedSide } = this.directive;
        return ((this.lastIndex() >= this.items.length - 1 && computedSide === 'end') ||
            (!this.lastIndex() && computedSide === 'start'));
    }
    isHidden(index) {
        const { computedSide, required } = this.directive;
        return ((index > this.lastIndex() && index !== required && computedSide === 'end') ||
            (index < this.lastIndex() && index !== required && computedSide === 'start'));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiItemsWithMoreComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiItemsWithMoreComponent, isStandalone: true, selector: "tui-items-with-more", outputs: { lastIndexChange: "lastIndexChange" }, providers: [
            MutationObserverService,
            ResizeObserverService,
            TuiItemsWithMoreService,
            {
                provide: WA_MUTATION_OBSERVER_INIT,
                useValue: {
                    childList: true,
                    characterData: true,
                    subtree: true,
                },
            },
        ], queries: [{ propertyName: "more", first: true, predicate: TuiMore, descendants: true, read: TemplateRef }, { propertyName: "items", predicate: TuiItem, descendants: true, read: TemplateRef }], hostDirectives: [{ directive: i1.TuiItemsWithMoreDirective, inputs: ["itemsLimit", "itemsLimit", "required", "required", "side", "side", "linesLimit", "linesLimit"] }], ngImport: i0, template: "<ng-container *ngIf=\"items.changes | async\" />\n<ng-container\n    *ngIf=\"directive.side === 'start'\"\n    [ngTemplateOutlet]=\"template\"\n/>\n<div\n    *ngFor=\"let item of items; let index = index\"\n    class=\"t-item\"\n    [class.t-item_hidden]=\"isHidden(index)\"\n>\n    <ng-container *ngTemplateOutlet=\"item\" />\n</div>\n<ng-container\n    *ngIf=\"directive.side === 'end'\"\n    [ngTemplateOutlet]=\"template\"\n/>\n<ng-template #template>\n    <span\n        *ngIf=\"!isMoreHidden\"\n        class=\"t-item t-item_more\"\n    >\n        <ng-container\n            [ngTemplateOutlet]=\"more || null\"\n            [ngTemplateOutletContext]=\"{$implicit: lastIndex()}\"\n        />\n    </span>\n</ng-template>\n", styles: [":host{position:relative;display:flex;min-inline-size:0;flex:1;align-items:center;white-space:nowrap}:host._multiline{flex-wrap:wrap}.t-item{flex:0 0 auto}.t-item_hidden{position:absolute;bottom:0;visibility:hidden}:host._multiline .t-item_more:not(:empty){min-inline-size:var(--t-min-width, 0)}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "directive", type: NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiItemsWithMoreComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiItemsWithMoreComponent, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'tui-items-with-more', imports: [AsyncPipe, NgForOf, NgIf, NgTemplateOutlet], changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        MutationObserverService,
                        ResizeObserverService,
                        TuiItemsWithMoreService,
                        {
                            provide: WA_MUTATION_OBSERVER_INIT,
                            useValue: {
                                childList: true,
                                characterData: true,
                                subtree: true,
                            },
                        },
                    ], hostDirectives: [
                        {
                            directive: TuiItemsWithMoreDirective,
                            inputs: ['itemsLimit', 'required', 'side', 'linesLimit'],
                        },
                    ], template: "<ng-container *ngIf=\"items.changes | async\" />\n<ng-container\n    *ngIf=\"directive.side === 'start'\"\n    [ngTemplateOutlet]=\"template\"\n/>\n<div\n    *ngFor=\"let item of items; let index = index\"\n    class=\"t-item\"\n    [class.t-item_hidden]=\"isHidden(index)\"\n>\n    <ng-container *ngTemplateOutlet=\"item\" />\n</div>\n<ng-container\n    *ngIf=\"directive.side === 'end'\"\n    [ngTemplateOutlet]=\"template\"\n/>\n<ng-template #template>\n    <span\n        *ngIf=\"!isMoreHidden\"\n        class=\"t-item t-item_more\"\n    >\n        <ng-container\n            [ngTemplateOutlet]=\"more || null\"\n            [ngTemplateOutletContext]=\"{$implicit: lastIndex()}\"\n        />\n    </span>\n</ng-template>\n", styles: [":host{position:relative;display:flex;min-inline-size:0;flex:1;align-items:center;white-space:nowrap}:host._multiline{flex-wrap:wrap}.t-item{flex:0 0 auto}.t-item_hidden{position:absolute;bottom:0;visibility:hidden}:host._multiline .t-item_more:not(:empty){min-inline-size:var(--t-min-width, 0)}\n"] }]
        }], propDecorators: { items: [{
                type: ContentChildren,
                args: [TuiItem, { read: TemplateRef, descendants: true }]
            }], more: [{
                type: ContentChild,
                args: [TuiMore, { read: TemplateRef }]
            }], lastIndexChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
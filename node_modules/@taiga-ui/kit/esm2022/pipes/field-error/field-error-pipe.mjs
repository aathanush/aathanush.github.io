import { __decorate } from "tslib";
import { inject, Pipe } from '@angular/core';
import { ControlContainer, NgControl } from '@angular/forms';
import { TuiValidationError } from '@taiga-ui/cdk/classes';
import { tuiIsString, tuiPure } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_VALIDATION_ERRORS } from '@taiga-ui/kit/tokens';
import { map, Observable, of } from 'rxjs';
import * as i0 from "@angular/core";
const EMPTY_RECORD = {};
function unwrapObservable(content, context) {
    return content.pipe(map((error) => new TuiValidationError(error || '', context)));
}
function defaultError(content, context) {
    return of(new TuiValidationError(content || '', context));
}
class TuiFieldErrorPipe {
    constructor() {
        this.order = [];
        this.parent = inject(NgControl, { skipSelf: true, optional: true });
        this.self = inject(NgControl, { self: true, optional: true });
        this.container = inject(ControlContainer, { optional: true });
        this.validationErrors = inject(TUI_VALIDATION_ERRORS);
        if (this.self && !this.self.valueAccessor) {
            this.self.valueAccessor = this;
        }
    }
    transform(order) {
        this.order = order;
        return this.computedError;
    }
    registerOnChange() { }
    registerOnTouched() { }
    setDisabledState() { }
    writeValue() { }
    get computedError() {
        return (this.invalid && this.touched && this.error) || of(null);
    }
    get error() {
        const { errorId } = this;
        if (!errorId) {
            return null;
        }
        const firstError = this.controlErrors[errorId];
        const errorContent = this.validationErrors[errorId];
        return this.getError(firstError, errorContent);
    }
    get invalid() {
        return !!this.control?.invalid;
    }
    get touched() {
        return !!this.control?.touched;
    }
    get control() {
        return this.self?.control || this.parent?.control || this.container?.control;
    }
    get errorId() {
        return this.getErrorId(this.order, this.controlErrors);
    }
    get controlErrors() {
        return this.control?.errors || EMPTY_RECORD;
    }
    getError(context, content) {
        if (context instanceof TuiValidationError) {
            return of(context);
        }
        if (content === undefined && tuiIsString(context)) {
            return of(new TuiValidationError(context));
        }
        if (content instanceof Observable) {
            return unwrapObservable(content, context);
        }
        if (content instanceof Function) {
            const message = content(context);
            return message instanceof Observable
                ? unwrapObservable(message, context)
                : defaultError(message, context);
        }
        return defaultError(content, context);
    }
    getErrorId(order, controlErrors) {
        const id = order?.find((errorId) => controlErrors[errorId]);
        const [fallback] = Object.keys(controlErrors);
        return id || fallback || '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiFieldErrorPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: TuiFieldErrorPipe, isStandalone: true, name: "tuiFieldError", pure: false }); }
}
__decorate([
    tuiPure
], TuiFieldErrorPipe.prototype, "getError", null);
__decorate([
    tuiPure
], TuiFieldErrorPipe.prototype, "getErrorId", null);
export { TuiFieldErrorPipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiFieldErrorPipe, decorators: [{
            type: Pipe,
            args: [{
                    standalone: true,
                    name: 'tuiFieldError',
                    pure: false,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { getError: [], getErrorId: [] } });
//# sourceMappingURL=data:application/json;base64,
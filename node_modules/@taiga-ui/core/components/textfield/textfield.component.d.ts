import type { AfterContentInit, QueryList } from '@angular/core';
import { ElementRef, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import type { TuiContext } from '@taiga-ui/cdk/types';
import type { TuiDataListHost } from '@taiga-ui/core/components/data-list';
import type { TuiSizeL, TuiSizeS } from '@taiga-ui/core/types';
import type { PolymorpheusContent } from '@taiga-ui/polymorpheus';
import type { TuiTextfieldAccessor } from './textfield-accessor';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/directives/dropdown";
import * as i2 from "@taiga-ui/core/directives/icons";
import * as i3 from "@taiga-ui/core/directives/items-handlers";
import * as i4 from "@taiga-ui/core/components/data-list";
import * as i5 from "./textfield-dropdown.directive";
export declare class TuiTextfieldComponent<T> implements TuiDataListHost<T>, AfterContentInit {
    private readonly filler;
    private readonly autoId;
    private readonly dropdown;
    private readonly dropdownOpen;
    private readonly open;
    private readonly focusedIn;
    private readonly contentReady$;
    private readonly inputQuery;
    protected readonly label?: ElementRef<HTMLElement>;
    protected readonly control?: NgControl;
    protected readonly auxiliaryQuery: QueryList<object>;
    protected readonly icons: import("@taiga-ui/core/tokens").TuiCommonIcons;
    protected readonly clear: import("@angular/core").Signal<string | undefined>;
    protected computedFiller: import("@angular/core").Signal<string>;
    protected showFiller: import("@angular/core").Signal<boolean>;
    readonly vcr?: ViewContainerRef;
    readonly accessor?: TuiTextfieldAccessor<T>;
    readonly input?: ElementRef<HTMLInputElement>;
    content: PolymorpheusContent<TuiContext<T>>;
    readonly focused: import("@angular/core").Signal<boolean>;
    readonly options: import("./textfield.options").TuiTextfieldOptions;
    readonly el: HTMLElement;
    readonly value: import("@angular/core").WritableSignal<string>;
    readonly auxiliaries: import("@angular/core").Signal<readonly object[]>;
    set fillerSetter(filler: string);
    get id(): string;
    get size(): TuiSizeL | TuiSizeS;
    ngAfterContentInit(): void;
    handleOption(option: T): void;
    protected get hasLabel(): boolean;
    protected onResize({ contentRect }: ResizeObserverEntry): void;
    protected onIconClick(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiTextfieldComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiTextfieldComponent<any>, "tui-textfield", never, { "content": { "alias": "content"; "required": false; }; "fillerSetter": { "alias": "filler"; "required": false; }; }, {}, ["label", "control", "accessor", "input", "auxiliaryQuery"], ["input", "select", "textarea", "label", "*", "tui-icon"], true, [{ directive: typeof i1.TuiDropdownDirective; inputs: {}; outputs: {}; }, { directive: typeof i1.TuiDropdownFixed; inputs: {}; outputs: {}; }, { directive: typeof i1.TuiWithDropdownOpen; inputs: {}; outputs: {}; }, { directive: typeof i2.TuiWithIcons; inputs: {}; outputs: {}; }, { directive: typeof i3.TuiWithItemsHandlers; inputs: {}; outputs: {}; }, { directive: typeof i4.TuiWithOptionContent; inputs: {}; outputs: {}; }, { directive: typeof i5.TuiWithTextfieldDropdown; inputs: {}; outputs: {}; }]>;
}

import { coerceArray } from '@angular/cdk/coercion';
import { ChangeDetectorRef, Directive, inject, INJECTOR, Input, signal, TemplateRef, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { tuiZonefreeScheduler } from '@taiga-ui/cdk/observables';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiAsRectAccessor, tuiAsVehicle } from '@taiga-ui/core/classes';
import { tuiCheckFixedPosition } from '@taiga-ui/core/utils';
import { PolymorpheusComponent, PolymorpheusTemplate } from '@taiga-ui/polymorpheus';
import { Subject, throttleTime } from 'rxjs';
import { TuiDropdownDriver, TuiDropdownDriverDirective } from './dropdown.driver';
import { TUI_DROPDOWN_COMPONENT } from './dropdown.providers';
import { TuiDropdownService } from './dropdown.service';
import { TuiDropdownPosition } from './dropdown-position.directive';
import * as i0 from "@angular/core";
import * as i1 from "./dropdown.driver";
import * as i2 from "./dropdown-position.directive";
class TuiDropdownDirective {
    constructor() {
        this.refresh$ = new Subject();
        this.service = inject(TuiDropdownService);
        this.cdr = inject(ChangeDetectorRef);
        // TODO: think of a better solution later
        this.drivers = coerceArray(inject(TuiDropdownDriver, {
            self: true,
            optional: true,
        }));
        this.sub = this.refresh$
            .pipe(throttleTime(0, tuiZonefreeScheduler()), takeUntilDestroyed())
            .subscribe(() => {
            this.ref()?.changeDetectorRef.detectChanges();
            this.ref()?.changeDetectorRef.markForCheck();
        });
        this.el = tuiInjectElement();
        this.type = 'dropdown';
        this.component = new PolymorpheusComponent(inject(TUI_DROPDOWN_COMPONENT), inject(INJECTOR));
        this.ref = signal(null);
    }
    set tuiDropdown(content) {
        this.content =
            content instanceof TemplateRef
                ? new PolymorpheusTemplate(content, this.cdr)
                : content;
    }
    get position() {
        return tuiCheckFixedPosition(this.el) ? 'fixed' : 'absolute';
    }
    ngAfterViewChecked() {
        this.refresh$.next();
    }
    ngOnChanges() {
        if (!this.content) {
            this.toggle(false);
        }
    }
    ngOnDestroy() {
        this.toggle(false);
    }
    getClientRect() {
        return this.el.getBoundingClientRect();
    }
    toggle(show) {
        const ref = this.ref();
        if (show && this.content && !ref) {
            this.ref.set(this.service.add(this.component));
        }
        else if (!show && ref) {
            this.ref.set(null);
            this.service.remove(ref);
        }
        this.drivers.forEach((driver) => driver?.next(show));
        // TODO: Remove in v5, only needed in Angular 16
        this.cdr.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiDropdownDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiDropdownDirective, isStandalone: true, selector: "[tuiDropdown]:not(ng-container):not(ng-template)", inputs: { tuiDropdown: "tuiDropdown" }, host: { properties: { "class.tui-dropdown-open": "ref()" } }, providers: [
            tuiAsRectAccessor(TuiDropdownDirective),
            tuiAsVehicle(TuiDropdownDirective),
        ], exportAs: ["tuiDropdown"], usesOnChanges: true, hostDirectives: [{ directive: i1.TuiDropdownDriverDirective }, { directive: i2.TuiDropdownPosition, outputs: ["tuiDropdownDirectionChange", "tuiDropdownDirectionChange"] }], ngImport: i0 }); }
}
export { TuiDropdownDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiDropdownDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiDropdown]:not(ng-container):not(ng-template)',
                    providers: [
                        tuiAsRectAccessor(TuiDropdownDirective),
                        tuiAsVehicle(TuiDropdownDirective),
                    ],
                    exportAs: 'tuiDropdown',
                    hostDirectives: [
                        TuiDropdownDriverDirective,
                        {
                            directive: TuiDropdownPosition,
                            outputs: ['tuiDropdownDirectionChange'],
                        },
                    ],
                    host: {
                        '[class.tui-dropdown-open]': 'ref()',
                    },
                }]
        }], propDecorators: { tuiDropdown: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
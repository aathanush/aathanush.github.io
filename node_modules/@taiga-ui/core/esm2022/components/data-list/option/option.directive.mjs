import { createComponent, Directive, EnvironmentInjector, forwardRef, inject, INJECTOR, Input, signal, ViewContainerRef, } from '@angular/core';
import { TUI_IS_MOBILE } from '@taiga-ui/cdk/tokens';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { TuiDropdownDirective } from '@taiga-ui/core/directives/dropdown';
import { TuiWithIcons } from '@taiga-ui/core/directives/icons';
import { TuiDataListComponent } from '../data-list.component';
import { TUI_OPTION_CONTENT } from './option-content';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/directives/icons";
// TODO(v5): rename `TuiOptionNew` => `TuiOption` & remove [new] from selector
// TODO: Consider all use cases for aria roles
class TuiOptionNew {
    constructor() {
        this.vcr = inject(ViewContainerRef);
        this.isMobile = inject(TUI_IS_MOBILE);
        this.el = tuiInjectElement();
        this.dataList = inject(forwardRef(() => TuiDataListComponent), { optional: true });
        this.content = inject(TUI_OPTION_CONTENT, {
            optional: true,
        });
        this.ref = this.content &&
            createComponent(this.content, {
                environmentInjector: inject(EnvironmentInjector),
                elementInjector: inject(INJECTOR),
                hostElement: tuiInjectElement(),
            });
        this.dropdown = inject(TuiDropdownDirective, {
            self: true,
            optional: true,
        })?.ref;
        this.disabled = false;
        if (this.ref) {
            this.vcr.insert(this.ref.hostView);
            this.ref.changeDetectorRef.detectChanges();
        }
    }
    // Preventing focus loss upon focused option removal
    ngOnDestroy() {
        this.dataList?.handleFocusLossIfNecessary(this.el);
    }
    onMouseMove() {
        if (!this.isMobile &&
            !tuiIsNativeFocused(this.el) &&
            this.dataList &&
            this.el.closest('[tuiDataListDropdownManager]')) {
            this.el.focus({ preventScroll: true });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiOptionNew, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiOptionNew, isStandalone: true, selector: "button[tuiOption][new], a[tuiOption][new], label[tuiOption][new]", inputs: { disabled: "disabled" }, host: { attributes: { "type": "button", "role": "option" }, listeners: { "mousemove.zoneless": "onMouseMove()" }, properties: { "attr.disabled": "disabled || null", "class._with-dropdown": "dropdown?.()" } }, hostDirectives: [{ directive: i1.TuiWithIcons }], ngImport: i0 }); }
}
export { TuiOptionNew };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiOptionNew, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'button[tuiOption][new], a[tuiOption][new], label[tuiOption][new]',
                    hostDirectives: [TuiWithIcons],
                    host: {
                        type: 'button',
                        role: 'option',
                        '[attr.disabled]': 'disabled || null',
                        '[class._with-dropdown]': 'dropdown?.()',
                        '(mousemove.zoneless)': 'onMouseMove()',
                    },
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { disabled: [{
                type: Input
            }] } });
// TODO(v5): remove [new] from selector
class TuiOptionWithValue {
    constructor() {
        this.disabled = false;
        this.value = signal(undefined);
    }
    // TODO(v5): use `input.required<T>()` to remove `undefined` from `this.value()`
    set valueSetter(x) {
        this.value.set(x);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiOptionWithValue, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiOptionWithValue, isStandalone: true, selector: "button[tuiOption][value][new], a[tuiOption][value][new], label[tuiOption][value][new]", inputs: { disabled: "disabled", valueSetter: ["value", "valueSetter"] }, ngImport: i0 }); }
}
export { TuiOptionWithValue };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiOptionWithValue, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'button[tuiOption][value][new], a[tuiOption][value][new], label[tuiOption][value][new]',
                }]
        }], propDecorators: { disabled: [{
                type: Input
            }], valueSetter: [{
                type: Input,
                args: [{ alias: 'value', required: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9kYXRhLWxpc3Qvb3B0aW9uL29wdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUNILGVBQWUsRUFDZixTQUFTLEVBQ1QsbUJBQW1CLEVBQ25CLFVBQVUsRUFDVixNQUFNLEVBQ04sUUFBUSxFQUNSLEtBQUssRUFDTCxNQUFNLEVBQ04sZ0JBQWdCLEdBQ25CLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUM3RCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUN4RSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFFN0QsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7OztBQUVwRCw4RUFBOEU7QUFDOUUsOENBQThDO0FBQzlDLE1BWWEsWUFBWTtJQTZCckI7UUE1QmlCLFFBQUcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMvQixhQUFRLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2pDLE9BQUUsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3hCLGFBQVEsR0FBRyxNQUFNLENBQzlCLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQyxFQUN0QyxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FDbkIsQ0FBQztRQUVlLFlBQU8sR0FBRyxNQUFNLENBQW1CLGtCQUFrQixFQUFFO1lBQ3BFLFFBQVEsRUFBRSxJQUFJO1NBQ2pCLENBQUMsQ0FBQztRQUVjLFFBQUcsR0FDaEIsSUFBSSxDQUFDLE9BQU87WUFDWixlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDMUIsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLG1CQUFtQixDQUFDO2dCQUNoRCxlQUFlLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQztnQkFDakMsV0FBVyxFQUFFLGdCQUFnQixFQUFFO2FBQ2xDLENBQUMsQ0FBQztRQUVZLGFBQVEsR0FBRyxNQUFNLENBQUMsb0JBQW9CLEVBQUU7WUFDdkQsSUFBSSxFQUFFLElBQUk7WUFDVixRQUFRLEVBQUUsSUFBSTtTQUNqQixDQUFDLEVBQUUsR0FBRyxDQUFDO1FBR0QsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUdwQixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ25DLElBQUksQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDOUM7SUFDTCxDQUFDO0lBRUQsb0RBQW9EO0lBQzdDLFdBQVc7UUFDZCxJQUFJLENBQUMsUUFBUSxFQUFFLDBCQUEwQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRVMsV0FBVztRQUNqQixJQUNJLENBQUMsSUFBSSxDQUFDLFFBQVE7WUFDZCxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDNUIsSUFBSSxDQUFDLFFBQVE7WUFDYixJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxFQUNqRDtZQUNFLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUMsYUFBYSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7U0FDeEM7SUFDTCxDQUFDOytHQWxEUSxZQUFZO21HQUFaLFlBQVk7O1NBQVosWUFBWTs0RkFBWixZQUFZO2tCQVp4QixTQUFTO21CQUFDO29CQUNQLFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsa0VBQWtFO29CQUM1RSxjQUFjLEVBQUUsQ0FBQyxZQUFZLENBQUM7b0JBQzlCLElBQUksRUFBRTt3QkFDRixJQUFJLEVBQUUsUUFBUTt3QkFDZCxJQUFJLEVBQUUsUUFBUTt3QkFDZCxpQkFBaUIsRUFBRSxrQkFBa0I7d0JBQ3JDLHdCQUF3QixFQUFFLGNBQWM7d0JBQ3hDLHNCQUFzQixFQUFFLGVBQWU7cUJBQzFDO2lCQUNKOzBFQTRCVSxRQUFRO3NCQURkLEtBQUs7O0FBMkJWLHVDQUF1QztBQUN2QyxNQUthLGtCQUFrQjtJQUwvQjtRQU9XLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFUixVQUFLLEdBQUcsTUFBTSxDQUFnQixTQUFTLENBQUMsQ0FBQztLQU81RDtJQUxHLGdGQUFnRjtJQUNoRixJQUNXLFdBQVcsQ0FBQyxDQUFJO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7K0dBVlEsa0JBQWtCO21HQUFsQixrQkFBa0I7O1NBQWxCLGtCQUFrQjs0RkFBbEIsa0JBQWtCO2tCQUw5QixTQUFTO21CQUFDO29CQUNQLFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQ0osdUZBQXVGO2lCQUM5Rjs4QkFHVSxRQUFRO3NCQURkLEtBQUs7Z0JBT0ssV0FBVztzQkFEckIsS0FBSzt1QkFBQyxFQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtPbkRlc3Ryb3ksIFR5cGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBjcmVhdGVDb21wb25lbnQsXG4gICAgRGlyZWN0aXZlLFxuICAgIEVudmlyb25tZW50SW5qZWN0b3IsXG4gICAgZm9yd2FyZFJlZixcbiAgICBpbmplY3QsXG4gICAgSU5KRUNUT1IsXG4gICAgSW5wdXQsXG4gICAgc2lnbmFsLFxuICAgIFZpZXdDb250YWluZXJSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUVUlfSVNfTU9CSUxFfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3Rva2Vucyc7XG5pbXBvcnQge3R1aUluamVjdEVsZW1lbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZG9tJztcbmltcG9ydCB7dHVpSXNOYXRpdmVGb2N1c2VkfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2ZvY3VzJztcbmltcG9ydCB7VHVpRHJvcGRvd25EaXJlY3RpdmV9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvZHJvcGRvd24nO1xuaW1wb3J0IHtUdWlXaXRoSWNvbnN9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2RpcmVjdGl2ZXMvaWNvbnMnO1xuXG5pbXBvcnQge1R1aURhdGFMaXN0Q29tcG9uZW50fSBmcm9tICcuLi9kYXRhLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7VFVJX09QVElPTl9DT05URU5UfSBmcm9tICcuL29wdGlvbi1jb250ZW50JztcblxuLy8gVE9ETyh2NSk6IHJlbmFtZSBgVHVpT3B0aW9uTmV3YCA9PiBgVHVpT3B0aW9uYCAmIHJlbW92ZSBbbmV3XSBmcm9tIHNlbGVjdG9yXG4vLyBUT0RPOiBDb25zaWRlciBhbGwgdXNlIGNhc2VzIGZvciBhcmlhIHJvbGVzXG5ARGlyZWN0aXZlKHtcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIHNlbGVjdG9yOiAnYnV0dG9uW3R1aU9wdGlvbl1bbmV3XSwgYVt0dWlPcHRpb25dW25ld10sIGxhYmVsW3R1aU9wdGlvbl1bbmV3XScsXG4gICAgaG9zdERpcmVjdGl2ZXM6IFtUdWlXaXRoSWNvbnNdLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgdHlwZTogJ2J1dHRvbicsXG4gICAgICAgIHJvbGU6ICdvcHRpb24nLFxuICAgICAgICAnW2F0dHIuZGlzYWJsZWRdJzogJ2Rpc2FibGVkIHx8IG51bGwnLFxuICAgICAgICAnW2NsYXNzLl93aXRoLWRyb3Bkb3duXSc6ICdkcm9wZG93bj8uKCknLFxuICAgICAgICAnKG1vdXNlbW92ZS56b25lbGVzcyknOiAnb25Nb3VzZU1vdmUoKScsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpT3B0aW9uTmV3PFQgPSB1bmtub3duPiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSB2Y3IgPSBpbmplY3QoVmlld0NvbnRhaW5lclJlZik7XG4gICAgcHJpdmF0ZSByZWFkb25seSBpc01vYmlsZSA9IGluamVjdChUVUlfSVNfTU9CSUxFKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVsID0gdHVpSW5qZWN0RWxlbWVudCgpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZGF0YUxpc3QgPSBpbmplY3Q8VHVpRGF0YUxpc3RDb21wb25lbnQ8VD4+KFxuICAgICAgICBmb3J3YXJkUmVmKCgpID0+IFR1aURhdGFMaXN0Q29tcG9uZW50KSxcbiAgICAgICAge29wdGlvbmFsOiB0cnVlfSxcbiAgICApO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb250ZW50ID0gaW5qZWN0PFR5cGU8YW55PiB8IG51bGw+KFRVSV9PUFRJT05fQ09OVEVOVCwge1xuICAgICAgICBvcHRpb25hbDogdHJ1ZSxcbiAgICB9KTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVmID1cbiAgICAgICAgdGhpcy5jb250ZW50ICYmXG4gICAgICAgIGNyZWF0ZUNvbXBvbmVudCh0aGlzLmNvbnRlbnQsIHtcbiAgICAgICAgICAgIGVudmlyb25tZW50SW5qZWN0b3I6IGluamVjdChFbnZpcm9ubWVudEluamVjdG9yKSxcbiAgICAgICAgICAgIGVsZW1lbnRJbmplY3RvcjogaW5qZWN0KElOSkVDVE9SKSxcbiAgICAgICAgICAgIGhvc3RFbGVtZW50OiB0dWlJbmplY3RFbGVtZW50KCksXG4gICAgICAgIH0pO1xuXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRyb3Bkb3duID0gaW5qZWN0KFR1aURyb3Bkb3duRGlyZWN0aXZlLCB7XG4gICAgICAgIHNlbGY6IHRydWUsXG4gICAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgIH0pPy5yZWY7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlZikge1xuICAgICAgICAgICAgdGhpcy52Y3IuaW5zZXJ0KHRoaXMucmVmLmhvc3RWaWV3KTtcbiAgICAgICAgICAgIHRoaXMucmVmLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFByZXZlbnRpbmcgZm9jdXMgbG9zcyB1cG9uIGZvY3VzZWQgb3B0aW9uIHJlbW92YWxcbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZGF0YUxpc3Q/LmhhbmRsZUZvY3VzTG9zc0lmTmVjZXNzYXJ5KHRoaXMuZWwpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvbk1vdXNlTW92ZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXRoaXMuaXNNb2JpbGUgJiZcbiAgICAgICAgICAgICF0dWlJc05hdGl2ZUZvY3VzZWQodGhpcy5lbCkgJiZcbiAgICAgICAgICAgIHRoaXMuZGF0YUxpc3QgJiZcbiAgICAgICAgICAgIHRoaXMuZWwuY2xvc2VzdCgnW3R1aURhdGFMaXN0RHJvcGRvd25NYW5hZ2VyXScpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5lbC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBUT0RPKHY1KTogcmVtb3ZlIFtuZXddIGZyb20gc2VsZWN0b3JcbkBEaXJlY3RpdmUoe1xuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgc2VsZWN0b3I6XG4gICAgICAgICdidXR0b25bdHVpT3B0aW9uXVt2YWx1ZV1bbmV3XSwgYVt0dWlPcHRpb25dW3ZhbHVlXVtuZXddLCBsYWJlbFt0dWlPcHRpb25dW3ZhbHVlXVtuZXddJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpT3B0aW9uV2l0aFZhbHVlPFQgPSB1bmtub3duPiB7XG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZSA9IHNpZ25hbDxUIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG4gICAgLy8gVE9ETyh2NSk6IHVzZSBgaW5wdXQucmVxdWlyZWQ8VD4oKWAgdG8gcmVtb3ZlIGB1bmRlZmluZWRgIGZyb20gYHRoaXMudmFsdWUoKWBcbiAgICBASW5wdXQoe2FsaWFzOiAndmFsdWUnLCByZXF1aXJlZDogdHJ1ZX0pXG4gICAgcHVibGljIHNldCB2YWx1ZVNldHRlcih4OiBUKSB7XG4gICAgICAgIHRoaXMudmFsdWUuc2V0KHgpO1xuICAgIH1cbn1cbiJdfQ==
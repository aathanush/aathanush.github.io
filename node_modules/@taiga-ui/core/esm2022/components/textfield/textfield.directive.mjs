import { computed, Directive, inject, Input, signal } from '@angular/core';
import { NgControl } from '@angular/forms';
import { TuiNativeValidator } from '@taiga-ui/cdk/directives/native-validator';
import { tuiInjectElement, tuiValue } from '@taiga-ui/cdk/utils/dom';
import { TuiAppearance, tuiAppearance, tuiAppearanceFocus, tuiAppearanceMode, tuiAppearanceState, } from '@taiga-ui/core/directives/appearance';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/core/directives/items-handlers';
import { TuiTextfieldComponent } from './textfield.component';
import { TUI_TEXTFIELD_OPTIONS } from './textfield.options';
import { tuiAsTextfieldAccessor } from './textfield-accessor';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk/directives/native-validator";
import * as i2 from "@taiga-ui/core/directives/appearance";
class TuiTextfieldBase {
    constructor() {
        // TODO: refactor to signal inputs after Angular update
        this.focused = signal(null);
        this.control = inject(NgControl, { optional: true });
        this.a = tuiAppearance(inject(TUI_TEXTFIELD_OPTIONS).appearance);
        this.s = tuiAppearanceState(null);
        this.m = tuiAppearanceMode(this.mode);
        this.f = tuiAppearanceFocus(computed(() => this.focused() ?? this.textfield.focused()));
        this.el = tuiInjectElement();
        this.itemsHandlers = inject(TUI_ITEMS_HANDLERS);
        this.textfield = inject(TuiTextfieldComponent);
        this.readOnly = false;
        this.invalid = null;
        this.value = tuiValue(this.el);
    }
    set focusedSetter(focused) {
        this.focused.set(focused);
    }
    set stateSetter(state) {
        this.s.set(state);
    }
    get mode() {
        if (this.readOnly) {
            return 'readonly';
        }
        if (this.invalid === false) {
            return 'valid';
        }
        if (this.invalid) {
            return 'invalid';
        }
        return null;
    }
    // TODO: refactor to signal inputs after Angular update
    ngOnChanges() {
        this.m.set(this.mode);
    }
    setValue(value) {
        this.el.focus();
        this.el.select();
        if (value == null) {
            this.el.ownerDocument.execCommand('delete');
        }
        else {
            this.el.ownerDocument.execCommand('insertText', false, this.itemsHandlers.stringify()(value));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldBase, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTextfieldBase, inputs: { readOnly: "readOnly", invalid: "invalid", focusedSetter: ["focused", "focusedSetter"], stateSetter: ["state", "stateSetter"] }, usesOnChanges: true, ngImport: i0 }); }
}
export { TuiTextfieldBase };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldBase, decorators: [{
            type: Directive
        }], propDecorators: { readOnly: [{
                type: Input
            }], invalid: [{
                type: Input
            }], focusedSetter: [{
                type: Input,
                args: ['focused']
            }], stateSetter: [{
                type: Input,
                args: ['state']
            }] } });
class TuiTextfieldDirective extends TuiTextfieldBase {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiTextfieldDirective, isStandalone: true, selector: "input[tuiTextfield]:not([tuiInputCard]):not([tuiInputExpire]):not([tuiInputCVC])", host: { listeners: { "input": "0", "focusin": "0", "focusout": "0" }, properties: { "id": "textfield.id", "readOnly": "readOnly", "class._empty": "value() === \"\"" } }, providers: [tuiAsTextfieldAccessor(TuiTextfieldDirective)], usesInheritance: true, hostDirectives: [{ directive: i1.TuiNativeValidator }, { directive: i2.TuiAppearance }], ngImport: i0 }); }
}
export { TuiTextfieldDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiTextfieldDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    // TODO: Remove :not in v.5
                    selector: 'input[tuiTextfield]:not([tuiInputCard]):not([tuiInputExpire]):not([tuiInputCVC])',
                    providers: [tuiAsTextfieldAccessor(TuiTextfieldDirective)],
                    hostDirectives: [TuiNativeValidator, TuiAppearance],
                    host: {
                        '[id]': 'textfield.id',
                        '[readOnly]': 'readOnly',
                        '[class._empty]': 'value() === ""',
                        '(input)': '0',
                        '(focusin)': '0',
                        '(focusout)': '0',
                    },
                }]
        }] });
class TuiWithTextfield {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiWithTextfield, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiWithTextfield, isStandalone: true, hostDirectives: [{ directive: TuiTextfieldDirective, inputs: ["invalid", "invalid", "focused", "focused", "readOnly", "readOnly", "state", "state"] }], ngImport: i0 }); }
}
export { TuiWithTextfield };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiWithTextfield, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    hostDirectives: [
                        {
                            directive: TuiTextfieldDirective,
                            inputs: ['invalid', 'focused', 'readOnly', 'state'],
                        },
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
import { inject, Injectable } from '@angular/core';
import { tuiZoneOptimized } from '@taiga-ui/cdk/observables';
import { TUI_WINDOW_SIZE } from '@taiga-ui/cdk/tokens';
import { TUI_MEDIA } from '@taiga-ui/core/tokens';
import { distinctUntilChanged, map, Observable, shareReplay } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Service to provide the current breakpoint based on Taiga UI's media queries
 */
class TuiBreakpointService extends Observable {
    constructor() {
        super((subscriber) => this.stream$.subscribe(subscriber));
        this.media = inject(TUI_MEDIA);
        this.sorted = Object.values(this.media).sort((a, b) => a - b);
        this.invert = Object.keys(this.media).reduce((ret, key) => ({
            ...ret,
            [this.media[key]]: key,
        }), {});
        this.stream$ = inject(TUI_WINDOW_SIZE).pipe(map(({ width }) => this.sorted.find((size) => size > width)), map((key) => this.invert[key || this.sorted[this.sorted.length - 1] || 0] ?? null), distinctUntilChanged(), tuiZoneOptimized(), shareReplay({ bufferSize: 1, refCount: true }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiBreakpointService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiBreakpointService, providedIn: 'root' }); }
}
export { TuiBreakpointService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiBreakpointService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWtwb2ludC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zZXJ2aWNlcy9icmVha3BvaW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDM0QsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRXJELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBSXhFOztHQUVHO0FBQ0gsTUFHYSxvQkFBcUIsU0FBUSxVQUF3QztJQXVCOUU7UUFDSSxLQUFLLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUF2QjdDLFVBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUIsV0FBTSxHQUFhLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRSxXQUFNLEdBQTBDLE1BQU0sQ0FBQyxJQUFJLENBQ3hFLElBQUksQ0FBQyxLQUFLLENBQ2IsQ0FBQyxNQUFNLENBQ0osQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1gsR0FBRyxHQUFHO1lBQ04sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQTRCLENBQUMsQ0FBQyxFQUFFLEdBQUc7U0FDbEQsQ0FBQyxFQUNGLEVBQUUsQ0FDTCxDQUFDO1FBRWUsWUFBTyxHQUFHLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQ25ELEdBQUcsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFDMUQsR0FBRyxDQUNDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FDaEYsRUFDRCxvQkFBb0IsRUFBRSxFQUN0QixnQkFBZ0IsRUFBRSxFQUNsQixXQUFXLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUMvQyxDQUFDO0lBSUYsQ0FBQzsrR0F6QlEsb0JBQW9CO21IQUFwQixvQkFBb0IsY0FGakIsTUFBTTs7U0FFVCxvQkFBb0I7NEZBQXBCLG9CQUFvQjtrQkFIaEMsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aVpvbmVPcHRpbWl6ZWR9IGZyb20gJ0B0YWlnYS11aS9jZGsvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHtUVUlfV0lORE9XX1NJWkV9IGZyb20gJ0B0YWlnYS11aS9jZGsvdG9rZW5zJztcbmltcG9ydCB0eXBlIHtUdWlNZWRpYX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcbmltcG9ydCB7VFVJX01FRElBfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBPYnNlcnZhYmxlLCBzaGFyZVJlcGxheX0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCB0eXBlIFR1aUJyZWFrcG9pbnRNZWRpYUtleSA9IGtleW9mIE9taXQ8VHVpTWVkaWEsICd0YWJsZXQnPjtcblxuLyoqXG4gKiBTZXJ2aWNlIHRvIHByb3ZpZGUgdGhlIGN1cnJlbnQgYnJlYWtwb2ludCBiYXNlZCBvbiBUYWlnYSBVSSdzIG1lZGlhIHF1ZXJpZXNcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQnJlYWtwb2ludFNlcnZpY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPFR1aUJyZWFrcG9pbnRNZWRpYUtleSB8IG51bGw+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1lZGlhID0gaW5qZWN0KFRVSV9NRURJQSk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzb3J0ZWQ6IG51bWJlcltdID0gT2JqZWN0LnZhbHVlcyh0aGlzLm1lZGlhKS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgcHJpdmF0ZSByZWFkb25seSBpbnZlcnQ6IFJlY29yZDxudW1iZXIsIFR1aUJyZWFrcG9pbnRNZWRpYUtleT4gPSBPYmplY3Qua2V5cyhcbiAgICAgICAgdGhpcy5tZWRpYSxcbiAgICApLnJlZHVjZShcbiAgICAgICAgKHJldCwga2V5KSA9PiAoe1xuICAgICAgICAgICAgLi4ucmV0LFxuICAgICAgICAgICAgW3RoaXMubWVkaWFba2V5IGFzIFR1aUJyZWFrcG9pbnRNZWRpYUtleV1dOiBrZXksXG4gICAgICAgIH0pLFxuICAgICAgICB7fSxcbiAgICApO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdHJlYW0kID0gaW5qZWN0KFRVSV9XSU5ET1dfU0laRSkucGlwZShcbiAgICAgICAgbWFwKCh7d2lkdGh9KSA9PiB0aGlzLnNvcnRlZC5maW5kKChzaXplKSA9PiBzaXplID4gd2lkdGgpKSxcbiAgICAgICAgbWFwKFxuICAgICAgICAgICAgKGtleSkgPT4gdGhpcy5pbnZlcnRba2V5IHx8IHRoaXMuc29ydGVkW3RoaXMuc29ydGVkLmxlbmd0aCAtIDFdIHx8IDBdID8/IG51bGwsXG4gICAgICAgICksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgIHR1aVpvbmVPcHRpbWl6ZWQoKSxcbiAgICAgICAgc2hhcmVSZXBsYXkoe2J1ZmZlclNpemU6IDEsIHJlZkNvdW50OiB0cnVlfSksXG4gICAgKTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigoc3Vic2NyaWJlcikgPT4gdGhpcy5zdHJlYW0kLnN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgfVxufVxuIl19
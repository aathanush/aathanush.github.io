import { Location } from '@angular/common';
import { Directive, EventEmitter, inject, Input, Output, signal, TemplateRef, } from '@angular/core';
import { ActivatedRoute, UrlSerializer } from '@angular/router';
import { TUI_DOC_URL_STATE_HANDLER } from '@taiga-ui/addon-doc/tokens';
import { tuiCleanObject, tuiCoerceValue, tuiInspectAny } from '@taiga-ui/addon-doc/utils';
import { tuiIsNumber } from '@taiga-ui/cdk/utils/miscellaneous';
import { TuiAlertService } from '@taiga-ui/core/components/alert';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
const SERIALIZED_SUFFIX = '$';
// @bad TODO: refactor output and value sync
class TuiDocDocumentationPropertyConnector {
    constructor() {
        this.locationRef = inject(Location);
        this.activatedRoute = inject(ActivatedRoute);
        this.urlSerializer = inject(UrlSerializer);
        this.urlStateHandler = inject(TUI_DOC_URL_STATE_HANDLER);
        this.alerts = inject(TuiAlertService);
        this.documentationPropertyName = '';
        this.documentationPropertyMode = null;
        this.documentationPropertyType = '';
        this.documentationPropertyDeprecated = false;
        this.documentationPropertyValues = null;
        this.documentationPropertyValueChange = new EventEmitter();
        this.changed$ = new Subject();
        this.emits = signal(1);
        this.template = inject(TemplateRef);
    }
    get attrName() {
        switch (this.documentationPropertyMode) {
            case 'input':
                return `[${this.documentationPropertyName}]`;
            case 'input-output':
                return `[(${this.documentationPropertyName})]`;
            case 'output':
                return `(${this.documentationPropertyName})`;
            default:
                return this.documentationPropertyName;
        }
    }
    get shouldShowValues() {
        return this.documentationPropertyMode !== 'output';
    }
    get hasItems() {
        return !!this.documentationPropertyValues;
    }
    ngOnInit() {
        this.parseParams(this.activatedRoute.snapshot.queryParams);
    }
    ngOnChanges() {
        this.changed$.next();
    }
    onValueChange(value) {
        this.documentationPropertyValue = value;
        this.documentationPropertyValueChange.emit(value);
        this.setQueryParam(value);
    }
    emitEvent(event) {
        // For more convenient debugging
        console.info(this.attrName, event);
        this.emits.update((x) => ++x);
        let content;
        if (event !== undefined) {
            content = tuiInspectAny(event, 2);
        }
        this.alerts.open(content, { label: this.attrName }).subscribe();
    }
    parseParams(params) {
        const propertyValue = params[this.documentationPropertyName];
        const propertyValueWithSuffix = params[`${this.documentationPropertyName}${SERIALIZED_SUFFIX}`];
        if (!propertyValue && !propertyValueWithSuffix) {
            return;
        }
        let value = !!propertyValueWithSuffix && this.documentationPropertyValues
            ? this.documentationPropertyValues[propertyValueWithSuffix]
            : tuiCoerceValue(propertyValue);
        if (this.documentationPropertyType === 'string' && tuiIsNumber(value)) {
            value = value.toString();
        }
        this.onValueChange(value);
    }
    setQueryParam(value) {
        const tree = this.urlSerializer.parse(this.locationRef.path());
        const isValueAvailableByKey = value instanceof Object;
        const name = this.documentationPropertyName;
        const nameWithSuffix = `${name}${SERIALIZED_SUFFIX}`;
        const computedValue = isValueAvailableByKey && this.documentationPropertyValues
            ? this.documentationPropertyValues.indexOf(value)
            : value;
        tree.queryParams = tuiCleanObject({
            ...tree.queryParams,
            /**
             * Caretaker note: reset previous conflicted param in route
             * issue: https://github.com/taiga-family/taiga-ui/issues/9764
             */
            ...(isValueAvailableByKey
                ? {
                    [nameWithSuffix]: computedValue,
                    [name]: undefined,
                }
                : {
                    [nameWithSuffix]: undefined,
                    [name]: computedValue,
                }),
        });
        this.locationRef.go(this.urlStateHandler(tree));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiDocDocumentationPropertyConnector, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiDocDocumentationPropertyConnector, isStandalone: true, selector: "ng-template[documentationPropertyName]", inputs: { documentationPropertyName: "documentationPropertyName", documentationPropertyMode: "documentationPropertyMode", documentationPropertyType: "documentationPropertyType", documentationPropertyValue: "documentationPropertyValue", documentationPropertyDeprecated: "documentationPropertyDeprecated", documentationPropertyValues: "documentationPropertyValues" }, outputs: { documentationPropertyValueChange: "documentationPropertyValueChange" }, exportAs: ["documentationProperty"], usesOnChanges: true, ngImport: i0 }); }
}
export { TuiDocDocumentationPropertyConnector };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiDocDocumentationPropertyConnector, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: 'ng-template[documentationPropertyName]',
                    exportAs: 'documentationProperty',
                }]
        }], propDecorators: { documentationPropertyName: [{
                type: Input
            }], documentationPropertyMode: [{
                type: Input
            }], documentationPropertyType: [{
                type: Input
            }], documentationPropertyValue: [{
                type: Input
            }], documentationPropertyDeprecated: [{
                type: Input
            }], documentationPropertyValues: [{
                type: Input
            }], documentationPropertyValueChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
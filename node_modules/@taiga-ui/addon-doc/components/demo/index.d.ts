import type { AfterViewInit } from '@angular/core';
import { TemplateRef } from '@angular/core';
import type { AbstractControl } from '@angular/forms';
import { FormGroup } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class TuiDocDemo implements AfterViewInit {
    private readonly resizable?;
    private readonly content?;
    private readonly resizer?;
    private readonly el;
    private readonly locationRef;
    private readonly urlSerializer;
    private readonly urlStateHandler;
    private readonly darkMode;
    protected readonly template: TemplateRef<Record<string, unknown>> | null;
    protected readonly rendered: import("@angular/core").WritableSignal<boolean>;
    protected theme: import("@angular/core").Signal<"dark" | "light">;
    protected dark: import("@angular/core").WritableSignal<boolean>;
    protected readonly $: import("rxjs").Subscription;
    protected testForm?: FormGroup;
    protected readonly updateOnVariants: readonly ["change", "blur", "submit"];
    protected updateOn: 'blur' | 'change' | 'submit';
    protected opaque: boolean;
    protected expanded: boolean;
    protected sandboxWidth: number;
    protected readonly texts: [string, string, string];
    control: AbstractControl | null;
    sticky: boolean;
    ngAfterViewInit(): void;
    protected onResize(): void;
    protected onMouseUp(): void;
    protected onModeChange(darkMode: boolean): void;
    protected toggleDetails(): void;
    protected changeOpaque(opaque: boolean): void;
    protected updateOnChange(updateOn: 'blur' | 'change' | 'submit'): void;
    protected updateWidth(width?: number): void;
    private get delta();
    private get params();
    private updateUrl;
    private createForm;
    private getUrlTree;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiDocDemo, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiDocDemo, "tui-doc-demo", never, { "control": { "alias": "control"; "required": false; }; "sticky": { "alias": "sticky"; "required": false; }; }, {}, ["template"], ["*"], true, never>;
}

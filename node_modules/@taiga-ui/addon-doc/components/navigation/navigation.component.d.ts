import { FormControl } from '@angular/forms';
import type { TuiDocRoutePage, TuiDocRoutePages } from '@taiga-ui/addon-doc/types';
import { TuiSidebarDirective } from '@taiga-ui/addon-mobile/directives/sidebar';
import * as i0 from "@angular/core";
export declare class TuiDocNavigation {
    private readonly searchInput?;
    private readonly router;
    private readonly doc;
    protected open: import("@angular/core").WritableSignal<boolean>;
    protected menuOpen: boolean;
    protected readonly sidebar: TuiSidebarDirective<any> | null;
    protected readonly labels: readonly string[];
    protected readonly items: readonly TuiDocRoutePages[];
    protected readonly searchText: string;
    protected readonly searchEnabled: import("@angular/core").WritableSignal<boolean>;
    protected readonly docIcons: import("@taiga-ui/addon-doc/tokens").TuiDocIcons;
    protected readonly icons: import("@taiga-ui/core/tokens").TuiCommonIcons;
    protected openPagesArr: boolean[];
    protected openPagesGroupsArr: boolean[];
    protected active: string;
    protected readonly search: FormControl<string | null>;
    protected readonly filtered: import("@angular/core").Signal<never[] | readonly (readonly TuiDocRoutePage[])[]>;
    constructor();
    protected get canOpen(): boolean;
    protected get itemsWithoutSections(): TuiDocRoutePages;
    protected $pages(pages: any): readonly TuiDocRoutePage[];
    protected isActive(route: string): boolean;
    protected onGroupClick(index: number): void;
    protected closeMenu(): void;
    protected onClick(): void;
    protected onFocusSearch(event: KeyboardEvent): void;
    private filterItems;
    private flattenSubPages;
    private isActiveRoute;
    private openActivePageGroup;
    private navigateToAnchorLink;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiDocNavigation, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiDocNavigation, "tui-doc-navigation", never, {}, {}, never, ["*"], true, never>;
}

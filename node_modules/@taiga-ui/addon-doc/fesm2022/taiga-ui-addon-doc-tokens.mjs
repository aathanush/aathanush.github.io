import { tuiCreateToken, tuiProvideOptions, tuiCreateTokenFromFactory } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiTryParseMarkdownCodeBlock, tuiToFlatMapPages, tuiTypeReferenceParser } from '@taiga-ui/addon-doc/utils';
import { identity, defer, timer, switchMap, of } from 'rxjs';
import { signal, inject } from '@angular/core';

/**
 * Code actions for the opened tab with code example
 */
const TUI_DOC_CODE_ACTIONS = tuiCreateToken('');

/**
 * Service for opening online IDE e.g. Stackblitz
 */
const TUI_DOC_CODE_EDITOR = tuiCreateToken();

/**
 * Array of default tab names
 */
const TUI_DOC_DEFAULT_TABS = tuiCreateToken([]);

const TUI_DOC_DEFAULT_ICONS = {
    search: '@tui.search',
    light: '@tui.sun',
    dark: '@tui.moon',
    code: '@tui.code',
    menu: '@tui.menu',
    copy: '@tui.copy',
    check: '@tui.check',
    link: '@tui.link',
    languages: '@tui.languages',
    shrink: '@tui.shrink',
    expand: '@tui.expand',
};
const TUI_DOC_ICONS = tuiCreateToken(TUI_DOC_DEFAULT_ICONS);
function tuiDocIconsProvider(icons) {
    return tuiProvideOptions(TUI_DOC_ICONS, icons, TUI_DOC_DEFAULT_ICONS);
}

/**
 * Processes content in example
 */
const TUI_DOC_EXAMPLE_CONTENT_PROCESSOR = tuiCreateToken(identity);
/**
 * Processes markdown in code block
 */
const TUI_DOC_EXAMPLE_MARKDOWN_CODE_PROCESSOR = tuiCreateToken(tuiTryParseMarkdownCodeBlock);

/**
 * Token to exclude inherited documentation properties
 */
const TUI_DOC_EXCLUDED_PROPERTIES = tuiCreateToken(new Set([]));
function tuiDocExcludeProperties(properties) {
    return { provide: TUI_DOC_EXCLUDED_PROPERTIES, useValue: new Set(properties) };
}

/**
 * TODO: think about reorganization in @taiga-ui/i18n way
 */
/**
 * tui-doc-demo i18n texts
 * Works with a tuple
 */
const TUI_DOC_DEMO_TEXTS = tuiCreateToken([
    'Dark mode',
    'Background',
    'Form value',
]);
/**
 * tui-doc-documentation i18n texts
 * Works with a tuple
 * [
 * @string word 'argument',
 * @string word 'type',
 * @string 'name and description',
 * @string word 'value'
 * @string @deprecated message for tooltip about ng-polymorpheus
 * ]
 */
const TUI_DOC_DOCUMENTATION_TEXTS = tuiCreateToken([
    'Argument',
    'Type',
    'Name and description',
    'Value',
    /**
     * @deprecated
     */
    'Learn about our dynamic templates from ',
]);
/**
 * tui-doc-example i18n texts
 * Works with a tuple
 * [
 * @string default tab name,
 * @string link to a sample copied message text,
 * @string link to a sample copied message label
 * ]
 */
const TUI_DOC_EXAMPLE_TEXTS = tuiCreateToken([
    'Preview',
    'Link to a sample was successfully copied',
    'Done',
]);
const TUI_DOC_MENU_TEXT = tuiCreateToken('Menu');
const TUI_DOC_SEARCH_TEXT = tuiCreateToken('Search');
const TUI_DOC_SEE_ALSO_TEXT = tuiCreateToken('See also');
const TUI_DOC_SOURCE_CODE_TEXT = tuiCreateToken('Source code');
const TUI_DOC_SEARCH_ENABLED = tuiCreateToken(signal(true));

/**
 * Main logo
 */
const TUI_DOC_LOGO = tuiCreateToken('');

/**
 * Stream that emits if loading of page is over (for example, to begin scrollIntoView)
 */
const TUI_DOC_PAGE_LOADED = tuiCreateToken(defer(() => timer(200).pipe(switchMap(() => of(true)))));

/**
 * Documentation pages
 */
const TUI_DOC_PAGES = tuiCreateToken([]);
const TUI_DOC_MAP_PAGES = tuiCreateTokenFromFactory(() => tuiToFlatMapPages(inject(TUI_DOC_PAGES)));

/**
 * Array of arrays of related pages
 */
const TUI_DOC_SEE_ALSO = tuiCreateToken([]);

/**
 * Source code link
 */
const TUI_DOC_SOURCE_CODE = tuiCreateToken(null);

const TUI_DOC_SUPPORT_LANGUAGE = tuiCreateToken(new Set());

/**
 * Page title prefix
 */
const TUI_DOC_TITLE = tuiCreateToken('');

const TUI_DOC_TYPE_REFERENCE_HANDLER = tuiCreateToken(null);
const TUI_DOC_TYPE_REFERENCE_PARSER = tuiCreateToken(tuiTypeReferenceParser);

/**
 * TODO: delete it in 5.0
 * Replace the following approach to append query params
 * ```ts
 * urlStateHandler = inject(TUI_DOC_URL_STATE_HANDLER);
 * locationRef = inject(Location);
 *
 * this.locationRef.go(this.urlStateHandler(tree));
 * ```
 * with this one:
 * ```ts
 * router = inject(Router);
 * activatedRoute = inject(ActivatedRoute);
 *
 * void this.router.navigate([], {
 *     relativeTo: this.activatedRoute,
 *     queryParams: {sandboxWidth: 300},
 *     queryParamsHandling: 'merge',
 * });
 * ```
 * It is more robust to the cases when application has base href.
 */
const TUI_DOC_URL_STATE_HANDLER = tuiCreateToken(String);

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_DOC_CODE_ACTIONS, TUI_DOC_CODE_EDITOR, TUI_DOC_DEFAULT_ICONS, TUI_DOC_DEFAULT_TABS, TUI_DOC_DEMO_TEXTS, TUI_DOC_DOCUMENTATION_TEXTS, TUI_DOC_EXAMPLE_CONTENT_PROCESSOR, TUI_DOC_EXAMPLE_MARKDOWN_CODE_PROCESSOR, TUI_DOC_EXAMPLE_TEXTS, TUI_DOC_EXCLUDED_PROPERTIES, TUI_DOC_ICONS, TUI_DOC_LOGO, TUI_DOC_MAP_PAGES, TUI_DOC_MENU_TEXT, TUI_DOC_PAGES, TUI_DOC_PAGE_LOADED, TUI_DOC_SEARCH_ENABLED, TUI_DOC_SEARCH_TEXT, TUI_DOC_SEE_ALSO, TUI_DOC_SEE_ALSO_TEXT, TUI_DOC_SOURCE_CODE, TUI_DOC_SOURCE_CODE_TEXT, TUI_DOC_SUPPORT_LANGUAGE, TUI_DOC_TITLE, TUI_DOC_TYPE_REFERENCE_HANDLER, TUI_DOC_TYPE_REFERENCE_PARSER, TUI_DOC_URL_STATE_HANDLER, tuiDocExcludeProperties, tuiDocIconsProvider };
//# sourceMappingURL=taiga-ui-addon-doc-tokens.mjs.map

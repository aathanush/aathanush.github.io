import { Directive, inject, Input } from '@angular/core';
import { MaskitoDirective } from './maskito.directive';
import * as i0 from "@angular/core";
import * as i1 from "./maskito.directive";
class MaskitoPattern {
    constructor() {
        this.maskitoDirective = inject(MaskitoDirective, { self: true });
    }
    set regExpStr(pattern) {
        this.maskitoDirective.options = {
            mask: typeof pattern === 'string' ? new RegExp(`^${pattern}$`) : pattern,
        };
        this.maskitoDirective.ngOnChanges();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: MaskitoPattern, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: MaskitoPattern, isStandalone: true, selector: "[maskitoPattern]", inputs: { regExpStr: ["maskitoPattern", "regExpStr"] }, hostDirectives: [{ directive: i1.MaskitoDirective }], ngImport: i0 }); }
}
export { MaskitoPattern };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: MaskitoPattern, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[maskitoPattern]',
                    hostDirectives: [MaskitoDirective],
                }]
        }], propDecorators: { regExpStr: [{
                type: Input,
                args: ['maskitoPattern']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0dGVybi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyL3NyYy9saWIvcGF0dGVybi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXZELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHFCQUFxQixDQUFDOzs7QUFFckQsTUFLYSxjQUFjO0lBTDNCO1FBTXFCLHFCQUFnQixHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0tBUzlFO0lBUEcsSUFDVyxTQUFTLENBQUMsT0FBd0I7UUFDekMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sR0FBRztZQUM1QixJQUFJLEVBQUUsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU87U0FDM0UsQ0FBQztRQUNGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN4QyxDQUFDOytHQVRRLGNBQWM7bUdBQWQsY0FBYzs7U0FBZCxjQUFjOzRGQUFkLGNBQWM7a0JBTDFCLFNBQVM7bUJBQUM7b0JBQ1AsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLGNBQWMsRUFBRSxDQUFDLGdCQUFnQixDQUFDO2lCQUNyQzs4QkFLYyxTQUFTO3NCQURuQixLQUFLO3VCQUFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBpbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtNYXNraXRvRGlyZWN0aXZlfSBmcm9tICcuL21hc2tpdG8uZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBzZWxlY3RvcjogJ1ttYXNraXRvUGF0dGVybl0nLFxuICAgIGhvc3REaXJlY3RpdmVzOiBbTWFza2l0b0RpcmVjdGl2ZV0sXG59KVxuZXhwb3J0IGNsYXNzIE1hc2tpdG9QYXR0ZXJuIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IG1hc2tpdG9EaXJlY3RpdmUgPSBpbmplY3QoTWFza2l0b0RpcmVjdGl2ZSwge3NlbGY6IHRydWV9KTtcblxuICAgIEBJbnB1dCgnbWFza2l0b1BhdHRlcm4nKVxuICAgIHB1YmxpYyBzZXQgcmVnRXhwU3RyKHBhdHRlcm46IFJlZ0V4cCB8IHN0cmluZykge1xuICAgICAgICB0aGlzLm1hc2tpdG9EaXJlY3RpdmUub3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1hc2s6IHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJyA/IG5ldyBSZWdFeHAoYF4ke3BhdHRlcm59JGApIDogcGF0dGVybixcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tYXNraXRvRGlyZWN0aXZlLm5nT25DaGFuZ2VzKCk7XG4gICAgfVxufVxuIl19